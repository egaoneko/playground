{"version":3,"file":"example.js","sources":["../src/pg/util.js","../src/pg/utils/image.js","index.js","../src/pg/utils/math.js"],"sourcesContent":["/**\n * @module pg/util\n */\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet _uidCounter = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj._uid || (obj._uid = ++_uidCounter);\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = 'latest';\n","/**\n * @module pg/utils/image\n */\n\n/**\n * Gets a random hex color\n *\n * @return {string} The random hex color.\n * @api\n */\nexport function getRandomHexColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n * Gets a random dummy images\n *\n * @param {number} width The image width.\n * @param {number} height The image height.\n * @param {number} size The images size.\n * @return {Array<string>} The random dummy images.\n * @api\n */\nexport function getRandomDummyImages(width, height, size) {\n  if (\n    typeof width !== 'number' ||\n    typeof height !== 'number' ||\n    typeof size !== 'number'\n  ) {\n    throw new TypeError('Must be params number');\n  }\n\n  const baseUrl = `https://dummyimage.com/${width}x${height}/`;\n  const images = [];\n\n  for (let i = 0; i < size; i++) {\n    images.push(baseUrl + getRandomHexColor().slice(1));\n  }\n\n  return images;\n}\n","import * as _pg_util from './pg/util';\nimport * as _pg_utils_image from './pg/utils/image';\nimport * as _pg_utils_math from './pg/utils/math';\n\nvar pg = window['pg'] = {};\n\npg.graphics = {};\npg.graphics.three = {};\npg.math = {};\npg.util = {};\npg.utils = {};\npg.utils.image = {};\npg.utils.math = {};\npg.graphics.three.three = $pg$graphics$three$three;\npg.math.vector3 = $pg$math$vector3;\npg.util.getUid = _pg_util.getUid;\npg.utils.image.getRandomDummyImages = _pg_utils_image.getRandomDummyImages;\npg.utils.image.getRandomHexColor = _pg_utils_image.getRandomHexColor;\npg.utils.math.randomInt = _pg_utils_math.randomInt;\n","/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {boolean} success\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return false;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n  return true;\n}\n"],"names":["let","_uidCounter","getRandomHexColor","const","color","i","Math","floor","random","pg","window","graphics","three","math","util","utils","image","$pg$graphics$three$three","vector3","$pg$math$vector3","getUid","obj","_uid","getRandomDummyImages","width","height","size","TypeError","baseUrl","images","push","slice","_pg_utils_image.getRandomHexColor","randomInt","min","max"],"mappings":"yBASAA,IAAIC,EAAc,ECCX,SAASC,IAGd,IAFAC,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHc,mBAGGE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,ECZT,IAAIK,EAAKC,OAAW,GAAI,GAExBD,EAAGE,SAAW,GACdF,EAAGE,SAASC,MAAQ,GACpBH,EAAGI,KAAO,GACVJ,EAAGK,KAAO,GACVL,EAAGM,MAAQ,GACXN,EAAGM,MAAMC,MAAQ,GACjBP,EAAGM,MAAMF,KAAO,GAChBJ,EAAGE,SAASC,MAAMA,MAAQK,yBAC1BR,EAAGI,KAAKK,QAAUC,iBAClBV,EAAGK,KAAKM,OFKD,SAAgBC,GACrB,OAAOA,EAAIC,OAASD,EAAIC,OAASrB,IELnCQ,EAAGM,MAAMC,MAAMO,qBDYR,SAA8BC,EAAOC,EAAQC,GAClD,GACmB,iBAAVF,GACW,iBAAXC,GACS,iBAATC,EAEP,MAAM,IAAIC,UAAU,yBAMtB,IAHAxB,IAAMyB,EAAU,0BAA0BJ,MAASC,MAC7CI,EAAS,GAENxB,EAAI,EAAGA,EAAIqB,EAAMrB,IACxBwB,EAAOC,KAAKF,EAAU1B,IAAoB6B,MAAM,IAGlD,OAAOF,GC3BTpB,EAAGM,MAAMC,MAAMd,kBAAoB8B,EACnCvB,EAAGM,MAAMF,KAAKoB,UCNP,SAAmBC,EAAKC,GAC7B,OAAO7B,KAAKC,MAAMD,KAAKE,UAAY2B,EAAMD,EAAM,GAAKA"}