{"version":3,"sources":["webpack:///./webgl-image-processing-2.js"],"names":["let","gl","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","trianglesVerticeBuffer","vertexIndexBuffer","texture","textureImage","COLORS_SWAPPED_EFFECT","SEPIA_EFFECT","effectUniform","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","drawScene","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","drawElements","TRIANGLES","numItems","UNSIGNED_SHORT","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","getContext","e","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","size","vertexPositionData","indexData","createBuffer","bufferData","Float32Array","STATIC_DRAW","itemSize","length","Uint16Array","STREAM_DRAW","createSquare","Image","src","getAttribLocation","enableVertexAttribArray","getUniformLocation","onload","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","uniform1i","samplerUniform","isTexture","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","viewport"],"mappings":"2EAAAA,IAAIC,EAAK,KACLC,EAAS,KACTC,EAAY,KACZC,EAAY,KACZC,EAAiB,KACjBC,EAAe,KAEfC,EAA0B,KAC1BC,EAAyB,KACzBC,EAAoB,KAEpBC,EAAU,KACVC,EAAe,KAEbC,EAAwB,EACxBC,EAAe,EAEjBC,EAAgB,KAmFpB,SAASC,EAAWC,EAAQC,GAE1BC,IAAMC,EAASlB,EAAGmB,aAAaH,GAQ/B,OAPAhB,EAAGoB,aAAaF,EAAQH,GACxBf,EAAGqB,cAAcH,GAEZlB,EAAGsB,mBAAmBJ,EAAQlB,EAAGuB,iBACpCC,MAAM,2BAA2BxB,EAAGyB,iBAAiBP,IAGhDA,EA4CT,SAASQ,IACP1B,EAAG2B,WAAW3B,EAAG4B,aAAcrB,GAC/BP,EAAG6B,oBAAoBvB,EAAyB,EAAGN,EAAG8B,OAAO,EAAO,EAAG,GACvE9B,EAAG2B,WAAW3B,EAAG+B,qBAAsBvB,GACvCR,EAAGgC,aAAahC,EAAGiC,UAAWzB,EAAkB0B,SAAUlC,EAAGmC,eAAgB,GA3I/EC,OAAOC,iBAAiB,OAExB,WACEpC,EAASqC,SAASC,cAAc,WAChCrC,EAAYoC,SAASC,cAAc,cACnCtC,EAAOuC,MAAQtC,EAAUuC,YACzBxC,EAAOyC,OAASxC,EAAUyC,aAE1B,IACE3C,EAAKC,EAAO2C,WAAW,UAAY3C,EAAO2C,WAAW,sBACrD,MAAOC,GACPC,QAAQC,MAAMF,GAGZ7C,KA0CN,WAEEiB,IAAM+B,EAqCC,uMApCDC,EAgDC,g2BA7CP5C,EAAeS,EAAWkC,EAAUhD,EAAGkD,eACvC9C,EAAiBU,EAAWmC,EAAUjD,EAAGmD,iBAGzChD,EAAYH,EAAGoD,gBAGfpD,EAAGqD,aAAalD,EAAWE,GAC3BL,EAAGqD,aAAalD,EAAWC,GAC3BJ,EAAGsD,YAAYnD,GAEVH,EAAGuD,oBAAoBpD,EAAWH,EAAGwD,cACxChC,MAAM,4CAIRxB,EAAGyD,WAAWtD,GA/DZuD,GA+HJ,SAAsBC,kBAAO,GAC3B1C,IAAM2C,GACJ,EAAK,EAAK,EACF,IAAPD,EAAoB,IAAPA,EAAY,EACnB,GAAPA,EAAoB,IAAPA,EAAY,EAClB,GAAPA,EAAmB,GAAPA,EAAY,EAChB,IAAPA,EAAmB,GAAPA,EAAY,GAGrBE,GAAa,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpDtD,EAAyBP,EAAG8D,eAC5B9D,EAAG2B,WAAW3B,EAAG4B,aAAcrB,GAC/BP,EAAG+D,WAAW/D,EAAG4B,aAAc,IAAIoC,aAAaJ,GAAqB5D,EAAGiE,aACxE1D,EAAuB2D,SAAW,EAClC3D,EAAuB2B,SAAW0B,EAAmBO,OAAS,EAC9D3D,EAAoBR,EAAG8D,eACvB9D,EAAG2B,WAAW3B,EAAG+B,qBAAsBvB,GACvCR,EAAG+D,WAAW/D,EAAG+B,qBAAsB,IAAIqC,YAAYP,GAAY7D,EAAGqE,aACtE7D,EAAkB0D,SAAW,EAC7B1D,EAAkB0B,SAAW2B,EAAUM,OAjJrCG,IAqJF5D,EAAe,IAAI6D,OACNC,IAAM,uBAlJjBlE,EAA0BN,EAAGyE,kBAAkBtE,EAAW,mBAC1DH,EAAG0E,wBAAwBpE,GAC3BO,EAAgBb,EAAG2E,mBAAmBxE,EAAW,WAEjDO,EAAakE,OAAS,WAkJxBnE,EAAUT,EAAG6E,gBACb7E,EAAG8E,YAAY9E,EAAG+E,WAAYtE,GAC9BT,EAAGgF,YAAYhF,EAAGiF,qBAAqB,GACvCjF,EAAGkF,WAAWlF,EAAG+E,WAAY,EAAG/E,EAAGmF,KAAMnF,EAAGmF,KAAMnF,EAAGoF,cAAe1E,GACpEV,EAAGqF,cAAcrF,EAAG+E,WAAY/E,EAAGsF,mBAAoBtF,EAAGuF,SAC1DvF,EAAGqF,cAAcrF,EAAG+E,WAAY/E,EAAGwF,mBAAoBxF,EAAGuF,SAC1DvF,EAAGqF,cAAcrF,EAAG+E,WAAY/E,EAAGyF,eAAgBzF,EAAG0F,eACtD1F,EAAGqF,cAAcrF,EAAG+E,WAAY/E,EAAG2F,eAAgB3F,EAAG0F,eAEtD1F,EAAG4F,UAAUzF,EAAU0F,eAAgB,GAElC7F,EAAG8F,UAAUrF,IAChBqC,QAAQC,MAAM,6BAnIhB/C,EAAG+F,WAAW,GAAK,GAAK,GAAK,IAC7B/F,EAAGgG,MAAMhG,EAAGiG,iBAAmBjG,EAAGkG,kBAClClG,EAAGmG,OAAOnG,EAAGoG,YAzBTpG,EAAG4F,UAAU/E,EAAeF,GAC5BX,EAAGqG,SACc,GAAfpG,EAAOuC,MAA8B,GAAhBvC,EAAOyC,OACZ,GAAhBzC,EAAOyC,OAAe,GACN,GAAhBzC,EAAOyC,OACS,GAAhBzC,EAAOyC,QAEThB,IAEA1B,EAAG4F,UAAU/E,EAAeD,GAC5BZ,EAAGqG,SACc,GAAfpG,EAAOuC,MACS,GAAhBvC,EAAOyC,OAAe,GACN,GAAhBzC,EAAOyC,OACS,GAAhBzC,EAAOyC,QAEThB","file":"webgl-image-processing-2.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet trianglesVerticeBuffer = null;\nlet vertexIndexBuffer = null;\n\nlet texture = null;\nlet textureImage = null;\n\nconst COLORS_SWAPPED_EFFECT = 0;\nconst SEPIA_EFFECT = 1;\n\nlet effectUniform = null;\n\nwindow.addEventListener('load', initWebGL);\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    createSquare();\n\n    loadTexture();\n\n    vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    effectUniform = gl.getUniformLocation(glProgram, 'uEffect');\n\n    textureImage.onload = function () {\n      setupTexture();\n      setupWebGL();\n\n      gl.uniform1i(effectUniform, COLORS_SWAPPED_EFFECT);\n      gl.viewport(\n        canvas.width * 0.5 - canvas.height * 0.5,\n        canvas.height * 0.5 * 0.5,\n        canvas.height * 0.5,\n        canvas.height * 0.5\n      );\n      drawScene();\n\n      gl.uniform1i(effectUniform, SEPIA_EFFECT);\n      gl.viewport(\n        canvas.width * 0.5,\n        canvas.height * 0.5 * 0.5,\n        canvas.height * 0.5,\n        canvas.height * 0.5\n      );\n      drawScene();\n    };\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.1, 0.1, 0.1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    \n    varying vec2 position;\n    void main(void) {\n      position = vec2(aVertexPosition.xy);\n      gl_Position = vec4(position, 0.0, 1.0);\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp vec2 position;\n    uniform sampler2D uSampler;\n    uniform int uEffect;\n    \n    void main(void) {\n      //convert texture coordinates from [-1, 1] to [0, 1]\n      highp vec2 texCoords = position * 0.5 + .5;\n      \n      highp vec4 texColor = texture2D( uSampler, vec2(texCoords.s, texCoords.t) );\n      highp vec4 finalColor;\n      \n      if(uEffect == 0){\n        finalColor = texColor.gbra;\n      }else if(uEffect == 1){\n        highp vec3 sepia = vec3( \n          min((texColor.r * .393) + (texColor.g *.769) + (texColor.b * .189), 1.0),\n          min((texColor.r * .349) + (texColor.g *.686) + (texColor.b * .168), 1.0),\n          min((texColor.r * .272) + (texColor.g *.534) + (texColor.b * .131), 1.0)\n        );\n        finalColor = vec4(sepia, 1.0);\n      }\n      \n      gl_FragColor = finalColor;  \n    }\n  `;\n}\n\nfunction drawScene() {\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffer);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);\n  gl.drawElements(gl.TRIANGLES, vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n}\n\nfunction createSquare(size = 2.0) {\n  const vertexPositionData = [\n    0.0, 0.0, 0.0,\n    -size * 0.5, -size * 0.5, 0.0,\n    size * 0.5, -size * 0.5, 0.0,\n    size * 0.5, size * 0.5, 0.0,\n    -size * 0.5, size * 0.5, 0.0,\n  ];\n\n  const indexData = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1];\n  trianglesVerticeBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffer.itemSize = 3;\n  trianglesVerticeBuffer.numItems = vertexPositionData.length / 3;\n  vertexIndexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffer.itemSize = 3;\n  vertexIndexBuffer.numItems = indexData.length;\n}\n\nfunction loadTexture() {\n  textureImage = new Image();\n  textureImage.src = 'data/img/iu/iu01.jpg';\n}\n\nfunction setupTexture() {\n  texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  gl.uniform1i(glProgram.samplerUniform, 0);\n\n  if (!gl.isTexture(texture)) {\n    console.error('Error: Texture is invalid');\n  }\n}\n"],"sourceRoot":""}