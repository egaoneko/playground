{"version":3,"sources":["webpack:///./utils/particles.js","webpack:///./offscreen-canvas-ex02.js"],"names":["Particles","container","option","Object","assign","width","height","ratio","this","init","animate","prototype","camera","THREE","PerspectiveCamera","position","z","scene","Scene","background","Color","fog","Fog","const","geometry","BufferGeometry","positions","colors","color","n","i","x","Math","random","y","push","vx","vy","vz","setRGB","r","g","b","addAttribute","Float32BufferAttribute","computeBoundingSphere","material","PointsMaterial","size","vertexColors","VertexColors","points","Points","add","renderer","WebGLRenderer","canvas","setPixelRatio","requestAnimationFrame","bind","render","time","Date","now","rotation","windowCanvas","document","getElementById","offscreen","transferControlToOffscreen","particles","window","devicePixelRatio","key","worker","Worker","postMessage","type","addEventListener","e","target","checked","clearInterval","setInterval","delay","start","getTime","console","log","sleep","busy","let","count","countSpan","innerHTML","toString"],"mappings":"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","file":"offscreen-canvas-ex02.js","sourcesContent":["// https://github.com/mrdoob/three.js/blob/master/examples/webgl_buffergeometry_points.html\nexport default class Particles {\n  constructor(container, option) {\n    if (!container) {\n      return;\n    }\n\n    option = Object.assign({\n      width: 300,\n      height: 300,\n      ratio: 1,\n    }, option);\n\n    this.container = container;\n    this.width = option.width;\n    this.height = option.height;\n    this.ratio = option.ratio;\n\n    this.init();\n    this.animate();\n  }\n\n  init() {\n    // Resize to the screen\n    if (this.container.width !== this.width || this.container.width !== this.height) {\n      this.container.width = this.width;\n      this.container.height = this.height;\n    }\n\n    this.camera = new THREE.PerspectiveCamera(27, this.width / this.height, 5, 3500);\n    this.camera.position.z = 2750;\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0x050505);\n    this.scene.fog = new THREE.Fog(0x050505, 2000, 3500);\n\n    const particles = 500000;\n    const geometry = new THREE.BufferGeometry();\n    const positions = [];\n    const colors = [];\n    const color = new THREE.Color();\n    const n = 1000, n2 = n / 2; // particles spread in the cube\n    for (let i = 0; i < particles; i++) {\n      // positions\n      const x = Math.random() * n - n2;\n      const y = Math.random() * n - n2;\n      const z = Math.random() * n - n2;\n      positions.push(x, y, z);\n      // colors\n      const vx = (x / n) + 0.5;\n      const vy = (y / n) + 0.5;\n      const vz = (z / n) + 0.5;\n      color.setRGB(vx, vy, vz);\n      colors.push(color.r, color.g, color.b);\n    }\n    geometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n    geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n    geometry.computeBoundingSphere();\n\n    const material = new THREE.PointsMaterial({size: 15, vertexColors: THREE.VertexColors});\n    this.points = new THREE.Points(geometry, material);\n    this.scene.add(this.points);\n\n    this.renderer = new THREE.WebGLRenderer({ canvas: this.container });\n    this.renderer.setPixelRatio(this.ratio);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render();\n  }\n\n  render() {\n    const time = Date.now() * 0.001;\n    this.points.rotation.x = time * 0.25;\n    this.points.rotation.y = time * 0.5;\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\n\n","import Particles from './utils/particles';\n\nconst windowCanvas = document.getElementById('canvas-window');\nconst workerCanvas = document.getElementById('canvas-worker');\nconst offscreen = workerCanvas.transferControlToOffscreen();\n\nnew Particles(windowCanvas, {ratio: window.devicePixelRatio});\n\nconst worker = new Worker('data/worker/offscreen-canvas-ex02.js');\nworker.postMessage({canvas: offscreen, type: 'canvas'}, [offscreen]);\n\nfunction sleep(delay) {\n  const start = new Date().getTime();\n  console.log('Sleeping!');\n  while (new Date().getTime() < start + delay) ;\n}\n\nlet key;\n\ndocument.getElementById('canvas-window-check').addEventListener('change', (e) => {\n  if (key || !e.target.checked) {\n    clearInterval(key);\n  }\n\n  if (e.target.checked) {\n    key = setInterval(() => {\n      sleep(1000);\n    }, 3000);\n  }\n});\n\ndocument.getElementById('canvas-worker-check').addEventListener('change', (e) => {\n  worker.postMessage({busy: e.target.checked, type: 'busy'});\n});\n\nlet count = 0;\nlet countSpan = document.getElementById('interaction-count');\ndocument.getElementById('interaction-btn').addEventListener('click', () => {\n  countSpan.innerHTML = (++count).toString();\n});\n"],"sourceRoot":""}