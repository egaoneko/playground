{"version":3,"sources":["webpack:///./lazy-load-image-vanilla.js","webpack:///../src/pg/utils/image.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_pg_utils_image__WEBPACK_IMPORTED_MODULE_0__","offsetWidth","offsetHeight","scrollBox","document","getElementById","imageBox","images","const","frag","createDocumentFragment","forEach","src","appendChild","image","Image","setAttribute","div","createElement","className","getImages","loadImagesBlock","Object","scrollTop","scrollLeft","lazyLoadImageSet","Array","from","querySelectorAll","addEventListener","scrollRect","top","left","right","bottom","slice","imageRect","offsetTop","offsetLeft","clientWidth","clientHeight","collisionCheck","getAttribute","loadImage","splice","indexOf","loadImages","getRandomHexColor","color","i","Math","floor","random","getRandomDummyImages","width","height","size","TypeError","baseUrl","push","d"],"mappings":"yFAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAEMI,EAAc,IACdC,EAAe,IACfC,EAAYC,SAASC,eAAe,cACpCC,EAAWF,SAASC,eAAe,cAYzC,SAAyBE,GACvBC,IAAMC,EAAOL,SAASM,yBACtBH,EAAOI,QAAQ,SAAUC,GACvBH,EAAKI,YA+CT,SAAmBD,GACjBJ,IAAMM,EAAQ,IAAIC,MAClBD,EAAME,aAAa,WAAYJ,GAE/BJ,IAAMS,EAAMb,SAASc,cAAc,OAGnC,OAFAD,EAAIE,UAAY,cAChBF,EAAIJ,YAAYC,GACTG,EAtDYG,CAAUR,MAE7BN,EAASO,YAAYJ,GAdvBY,CAFiBC,OAAAtB,EAAA,EAAAsB,CAAqB,IAAK,IAAK,MAGhDnB,EAAUoB,UAAY,IACtBpB,EAAUqB,WAAa,KAEvBhB,IAAMiB,EAAmBC,MAAMC,KAAKvB,SAASwB,iBAAiB,uBAC9DzB,EAAU0B,iBAAiB,SAAU,YAYrC,SAAoBtB,GAClBC,IAAMsB,GACJC,IAAK5B,EAAUoB,UAAYrB,EAC3B8B,KAAM7B,EAAUqB,WAAavB,EAC7BgC,MAAO9B,EAAUqB,WAAarB,EAAUF,YAA4B,EAAdA,EACtDiC,OAAQ/B,EAAUoB,UAAYpB,EAAUD,aAA8B,EAAfA,GAGzDK,EAAO4B,QAAQxB,QAAQ,SAAUG,GAC/B,IAAIA,EAAMF,IAAV,CAIAJ,IAAM4B,GACJL,IAAKjB,EAAMuB,UACXL,KAAMlB,EAAMwB,WACZL,MAAOnB,EAAMwB,WAAaxB,EAAMyB,YAChCL,OAAQpB,EAAMuB,UAAYvB,EAAM0B,eAYtC,SAAwBV,EAAYM,GAClC,OACEA,EAAUL,IAAMD,EAAWC,KAC3BK,EAAUJ,KAAOF,EAAWE,MAC5BI,EAAUH,MAAQH,EAAWG,OAC7BG,EAAUF,OAASJ,EAAWI,QAdzBO,CAAeX,EAAYM,MAkBpC,SAAmBtB,GACjBA,EAAMF,IAAME,EAAM4B,aAAa,YAf7BC,CAAU7B,GACVP,EAAOqC,OAAOrC,EAAOsC,QAAQ/B,GAAQ,OApCvCgC,CAAWrB,qCCJN,SAASsB,IAGd,IAFAvC,IACIwC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHc,mBAGGE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,EAYF,SAASK,EAAqBC,EAAOC,EAAQC,GAClD,GACmB,iBAAVF,GACW,iBAAXC,GACS,iBAATC,EAEP,MAAM,IAAIC,UAAU,yBAMtB,IAHAjD,IAAMkD,EAAU,0BAA0BJ,EAAK,IAAIC,EAAM,IACnDhD,KAEG0C,EAAI,EAAGA,EAAIO,EAAMP,IACxB1C,EAAOoD,KAAKD,EAAUX,IAAoBZ,MAAM,IAGlD,OAAO5B,EA5CTV,EAAA+D,EAAA7D,EAAA,sBAAAsD","file":"lazy-load-image-vanilla.js","sourcesContent":["import { getRandomDummyImages } from \"../src/pg/utils/image\";\n\nconst offsetWidth = 200;\nconst offsetHeight = 100;\nconst scrollBox = document.getElementById('scroll-box');\nconst imageBox = document.getElementById('image-box');\nconst imageSet = getRandomDummyImages(200, 100, 300);\n\nloadImagesBlock(imageSet);\nscrollBox.scrollTop = 1000;\nscrollBox.scrollLeft = 1500;\n\nconst lazyLoadImageSet = Array.from(document.querySelectorAll('.image-block > img'));\nscrollBox.addEventListener('scroll', function () {\n  loadImages(lazyLoadImageSet);\n});\n\nfunction loadImagesBlock(images) {\n  const frag = document.createDocumentFragment();\n  images.forEach(function (src) {\n    frag.appendChild(getImages(src));\n  });\n  imageBox.appendChild(frag);\n}\n\nfunction loadImages(images) {\n  const scrollRect = {\n    top: scrollBox.scrollTop - offsetHeight,\n    left: scrollBox.scrollLeft - offsetWidth,\n    right: scrollBox.scrollLeft + scrollBox.offsetWidth + offsetWidth * 2,\n    bottom: scrollBox.scrollTop + scrollBox.offsetHeight + offsetHeight * 2\n  };\n\n  images.slice().forEach(function (image) {\n    if (image.src) {\n      return;\n    }\n\n    const imageRect = {\n      top: image.offsetTop,\n      left: image.offsetLeft,\n      right: image.offsetLeft + image.clientWidth,\n      bottom: image.offsetTop + image.clientHeight\n    };\n\n    if (!collisionCheck(scrollRect, imageRect)) {\n      return;\n    }\n\n    loadImage(image);\n    images.splice(images.indexOf(image), 1);\n  });\n}\n\nfunction collisionCheck(scrollRect, imageRect) {\n  return (\n    imageRect.top > scrollRect.top &&\n    imageRect.left > scrollRect.left &&\n    imageRect.right < scrollRect.right &&\n    imageRect.bottom < scrollRect.bottom\n  );\n}\n\nfunction loadImage(image) {\n  image.src = image.getAttribute('data-src');\n}\n\nfunction getImages(src) {\n  const image = new Image();\n  image.setAttribute('data-src', src);\n\n  const div = document.createElement('div');\n  div.className = 'image-block';\n  div.appendChild(image);\n  return div;\n}\n","/**\n * @module pg/utils/image\n */\n\n/**\n * Gets a random hex color\n *\n * @return {string} The random hex color.\n * @api\n */\nexport function getRandomHexColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n * Gets a random dummy images\n *\n * @param {number} width The image width.\n * @param {number} height The image height.\n * @param {number} size The images size.\n * @return {Array<string>} The random dummy images.\n * @api\n */\nexport function getRandomDummyImages(width, height, size) {\n  if (\n    typeof width !== 'number' ||\n    typeof height !== 'number' ||\n    typeof size !== 'number'\n  ) {\n    throw new TypeError('Must be params number');\n  }\n\n  const baseUrl = `https://dummyimage.com/${width}x${height}/`;\n  const images = [];\n\n  for (let i = 0; i < size; i++) {\n    images.push(baseUrl + getRandomHexColor().slice(1));\n  }\n\n  return images;\n}\n"],"sourceRoot":""}