{"version":3,"sources":["webpack:///../src/pg/utils/image.js","webpack:///./lazy-load-image-vanilla.js"],"names":["getRandomHexColor","const","color","i","Math","floor","random","getRandomDummyImages","width","height","size","TypeError","baseUrl","images","push","slice","__webpack_require__","d","__webpack_exports__","r","_src_pg_utils_image__WEBPACK_IMPORTED_MODULE_0__","offsetWidth","offsetHeight","scrollBox","document","getElementById","imageBox","frag","createDocumentFragment","forEach","src","appendChild","image","Image","setAttribute","div","createElement","className","getImages","loadImagesBlock","Object","scrollTop","scrollLeft","lazyLoadImageSet","Array","from","querySelectorAll","addEventListener","scrollRect","top","left","right","bottom","imageRect","offsetTop","offsetLeft","clientWidth","clientHeight","collisionCheck","getAttribute","loadImage","splice","indexOf","loadImages"],"mappings":"yFAUO,SAASA,IAGd,IAFAC,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHc,mBAGGE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,EAYF,SAASK,EAAqBC,EAAOC,EAAQC,GAClD,GACmB,iBAAVF,GACW,iBAAXC,GACS,iBAATC,EAEP,MAAM,IAAIC,UAAU,yBAMtB,IAHAV,IAAMW,EAAU,0BAA0BJ,EAAK,IAAIC,EAAM,IACnDI,KAEGV,EAAI,EAAGA,EAAIO,EAAMP,IACxBU,EAAOC,KAAKF,EAAUZ,IAAoBe,MAAM,IAGlD,OAAOF,EA5CTG,EAAAC,EAAAC,EAAA,sBAAAX,qCCAAS,EAAAG,EAAAD,GAAA,IAAAE,EAAAJ,EAAA,GAEMK,EAAc,IACdC,EAAe,IACfC,EAAYC,SAASC,eAAe,cACpCC,EAAWF,SAASC,eAAe,cAYzC,SAAyBZ,GACvBZ,IAAM0B,EAAOH,SAASI,yBACtBf,EAAOgB,QAAQ,SAAUC,GACvBH,EAAKI,YA+CT,SAAmBD,GACjB7B,IAAM+B,EAAQ,IAAIC,MAClBD,EAAME,aAAa,WAAYJ,GAE/B7B,IAAMkC,EAAMX,SAASY,cAAc,OAGnC,OAFAD,EAAIE,UAAY,cAChBF,EAAIJ,YAAYC,GACTG,EAtDYG,CAAUR,MAE7BJ,EAASK,YAAYJ,GAdvBY,CAFiBC,OAAApB,EAAA,EAAAoB,CAAqB,IAAK,IAAK,MAGhDjB,EAAUkB,UAAY,IACtBlB,EAAUmB,WAAa,KAEvBzC,IAAM0C,EAAmBC,MAAMC,KAAKrB,SAASsB,iBAAiB,uBAC9DvB,EAAUwB,iBAAiB,SAAU,YAYrC,SAAoBlC,GAClBZ,IAAM+C,GACJC,IAAK1B,EAAUkB,UAAYnB,EAC3B4B,KAAM3B,EAAUmB,WAAarB,EAC7B8B,MAAO5B,EAAUmB,WAAanB,EAAUF,YAA4B,EAAdA,EACtD+B,OAAQ7B,EAAUkB,UAAYlB,EAAUD,aAA8B,EAAfA,GAGzDT,EAAOE,QAAQc,QAAQ,SAAUG,GAC/B,IAAIA,EAAMF,IAAV,CAIA7B,IAAMoD,GACJJ,IAAKjB,EAAMsB,UACXJ,KAAMlB,EAAMuB,WACZJ,MAAOnB,EAAMuB,WAAavB,EAAMwB,YAChCJ,OAAQpB,EAAMsB,UAAYtB,EAAMyB,eAYtC,SAAwBT,EAAYK,GAClC,OACEA,EAAUJ,IAAMD,EAAWC,KAC3BI,EAAUH,KAAOF,EAAWE,MAC5BG,EAAUF,MAAQH,EAAWG,OAC7BE,EAAUD,OAASJ,EAAWI,QAdzBM,CAAeV,EAAYK,MAkBpC,SAAmBrB,GACjBA,EAAMF,IAAME,EAAM2B,aAAa,YAf7BC,CAAU5B,GACVnB,EAAOgD,OAAOhD,EAAOiD,QAAQ9B,GAAQ,OApCvC+B,CAAWpB","file":"lazy-load-image-vanilla.js","sourcesContent":["/**\n * @module pg/utils/image\n */\n\n/**\n * Gets a random hex color\n *\n * @return {string} The random hex color.\n * @api\n */\nexport function getRandomHexColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n * Gets a random dummy images\n *\n * @param {number} width The image width.\n * @param {number} height The image height.\n * @param {number} size The images size.\n * @return {Array<string>} The random dummy images.\n * @api\n */\nexport function getRandomDummyImages(width, height, size) {\n  if (\n    typeof width !== 'number' ||\n    typeof height !== 'number' ||\n    typeof size !== 'number'\n  ) {\n    throw new TypeError('Must be params number');\n  }\n\n  const baseUrl = `https://dummyimage.com/${width}x${height}/`;\n  const images = [];\n\n  for (let i = 0; i < size; i++) {\n    images.push(baseUrl + getRandomHexColor().slice(1));\n  }\n\n  return images;\n}\n","import { getRandomDummyImages } from \"../src/pg/utils/image\";\n\nconst offsetWidth = 200;\nconst offsetHeight = 100;\nconst scrollBox = document.getElementById('scroll-box');\nconst imageBox = document.getElementById('image-box');\nconst imageSet = getRandomDummyImages(200, 100, 300);\n\nloadImagesBlock(imageSet);\nscrollBox.scrollTop = 1000;\nscrollBox.scrollLeft = 1500;\n\nconst lazyLoadImageSet = Array.from(document.querySelectorAll('.image-block > img'));\nscrollBox.addEventListener('scroll', function () {\n  loadImages(lazyLoadImageSet);\n});\n\nfunction loadImagesBlock(images) {\n  const frag = document.createDocumentFragment();\n  images.forEach(function (src) {\n    frag.appendChild(getImages(src));\n  });\n  imageBox.appendChild(frag);\n}\n\nfunction loadImages(images) {\n  const scrollRect = {\n    top: scrollBox.scrollTop - offsetHeight,\n    left: scrollBox.scrollLeft - offsetWidth,\n    right: scrollBox.scrollLeft + scrollBox.offsetWidth + offsetWidth * 2,\n    bottom: scrollBox.scrollTop + scrollBox.offsetHeight + offsetHeight * 2\n  };\n\n  images.slice().forEach(function (image) {\n    if (image.src) {\n      return;\n    }\n\n    const imageRect = {\n      top: image.offsetTop,\n      left: image.offsetLeft,\n      right: image.offsetLeft + image.clientWidth,\n      bottom: image.offsetTop + image.clientHeight\n    };\n\n    if (!collisionCheck(scrollRect, imageRect)) {\n      return;\n    }\n\n    loadImage(image);\n    images.splice(images.indexOf(image), 1);\n  });\n}\n\nfunction collisionCheck(scrollRect, imageRect) {\n  return (\n    imageRect.top > scrollRect.top &&\n    imageRect.left > scrollRect.left &&\n    imageRect.right < scrollRect.right &&\n    imageRect.bottom < scrollRect.bottom\n  );\n}\n\nfunction loadImage(image) {\n  image.src = image.getAttribute('data-src');\n}\n\nfunction getImages(src) {\n  const image = new Image();\n  image.setAttribute('data-src', src);\n\n  const div = document.createElement('div');\n  div.className = 'image-block';\n  div.appendChild(image);\n  return div;\n}\n"],"sourceRoot":""}