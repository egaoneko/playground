{"version":3,"sources":["webpack:///./webgl-triangular-prism-texture.js"],"names":["let","gl","canvas","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","trianglesVerticesBuffer","vertexTexCoordAttribute","trianglesTexCoordBuffer","vertexNormalAttribute","trianglesNormalBuffer","STONE_TEXTURE","WEBGL_LOGO_TEXTURE","textures","textureImages","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","angle","paused","useTexture","useLighting","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","setupTexture","i","activeTexture","TEXTURE0","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","uDoTexturing","getUniformLocation","uniform1i","isTexture","console","error","window","addEventListener","document","querySelector","container","width","clientWidth","height","clientHeight","getContext","e","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","triangleVerticesOriginal","triangleVertexIndices","triangleVertices","triangleTexCoords","length","a","push","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","triangleNormals","b","c","v1","v2","cross","apply","setupBuffers","pMatrixUniform","mvMatrixUniform","samplerUnifrom0","samplerUnifrom1","normalMatrixUniform","Image","onload","src","animLoop","clearColor","clear","COLOR_BUFFER_BIT","enable","DEPTH_TEST","viewport","perspective","identity","translate","rotate","invertedMatrix","fromMat4","invert","transpose","setupWebGL","uniformMatrix4fv","uniformMatrix3fv","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLES","requestAnimationFrame","evt","keyCode"],"mappings":"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","file":"webgl-triangular-prism-texture.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet trianglesVerticesBuffer = null;\nlet vertexTexCoordAttribute = null;\nlet trianglesTexCoordBuffer = null;\nlet vertexNormalAttribute = null;\nlet trianglesNormalBuffer = null;\n\nconst STONE_TEXTURE = 0;\nconst WEBGL_LOGO_TEXTURE = 1;\nconst textures = [];\nconst textureImages = [];\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nlet angle = 0.0;\n\nlet paused = false;\nlet useTexture = false;\nlet useLighting = false;\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n    case 84: // 't'\n      useTexture = !useTexture;\n\n      if (useTexture) {\n        gl.uniform1i(glProgram.uDoTexturing, 1);\n      } else {\n        gl.uniform1i(glProgram.uDoTexturing, 0);\n      }\n      break;\n    case 76: // 'l'\n      useLighting = !useLighting;\n      break;\n    default:\n      break;\n  }\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n  }\n\n  if (gl) {\n    initShaders();\n    setupBuffers();\n    getMatrixUniforms();\n    loadTexture();\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        setMatrixUniforms();\n        drawScene();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.5, 0.1, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n  mat4.identity(mvMatrix);\n  mat4.translate(mvMatrix, mvMatrix, [-1.0, -1.0, -7.0]);\n  mat4.rotate(mvMatrix, mvMatrix, angle, [0.0, 1.0, 0.0]);\n  angle += 0.01;\n\n  const invertedMatrix = mat3.create();\n  mat3.fromMat4(invertedMatrix, mvMatrix);\n  mat3.invert(normalMatrix, invertedMatrix);\n  mat3.transpose(normalMatrix, normalMatrix);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec2 aVertexTexCoord;\n    attribute vec3 aVertexNormal;\n\n    uniform mat4 uPMatrix;    \n    uniform mat4 uMVMatrix;\n    uniform mat3 uNormalMatrix;\n    \n    varying highp vec2 vTextureCoord;\n    varying highp vec3 vLight;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      vTextureCoord = aVertexTexCoord;\n      \n      // lighting\n      vec3 ambientLight = vec3(0.3, 0.3, 0.3);\n      vec3 transformedNormal = uNormalMatrix * aVertexNormal;\n      vec3 lightColor = vec3(0.5, 0.5, 0.5);\n      \n      // vec3 directionalLightPosition = normalize(vec3(10.0, 10.0, 5.0));\n      // vec3 light = vec3(uPMatrix * uMVMatrix * vec4(directionalLightPosition, 1.0));\n      \n      vec3 pointLightPosition = vec3(1.0,2.0,-1.0);\n      vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - aVertexPosition.xyz));\n      vec3 light = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      \n      float diffuseLightAmount = max(dot(normalize(transformedNormal), normalize(light)), 0.0);\n      vLight = ambientLight + (diffuseLightAmount * lightColor);\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp vec2 vTextureCoord;\n    varying highp vec3 vLight;\n    \n    uniform sampler2D uSampler0;\n    uniform sampler2D uSampler1;\n    uniform int uDoTexturing;\n    \n    void main(void) {\n      if (uDoTexturing == 1) {\n        highp vec4 stoneColor = texture2D(uSampler0, vec2(vTextureCoord.st));\n        highp vec4 webglLogoColor = texture2D(uSampler1, vec2(vTextureCoord.st));\n        \n        // highp vec4 vColor = mix(stoneColor, webglLogoColor, 0.5);\n        highp vec4 vColor = mix(stoneColor, webglLogoColor, webglLogoColor.a);\n        // highp vec4 vColor = mix(stoneColor, webglLogoColor, 1.0 - webglLogoColor.a);\n        \n        gl_FragColor = vec4(vColor.xyz * vLight, vColor.a);\n      } else {\n        gl_FragColor = vec4(vec3(1.0, 0.1, 0.1) * vLight, 1.0);\n      }\n    }\n  `;\n}\n\nfunction setupBuffers() {\n  // 12 vertices\n  const triangleVerticesOriginal = [\n    // front face\n    // bottom left to right, to top\n    0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0,\n    2.0, 0.0, 0.0,\n    0.5, 1.0, 0.0,\n    1.5, 1.0, 0.0,\n    1.0, 2.0, 0.0,\n\n    // rear face\n    0.0, 0.0, -2.0,\n    1.0, 0.0, -2.0,\n    2.0, 0.0, -2.0,\n    0.5, 1.0, -2.0,\n    1.5, 1.0, -2.0,\n    1.0, 2.0, -2.0,\n  ];\n\n  // setup vertices buffer\n  // 16 triangles\n  const triangleVertexIndices = [\n    //front face\n    0, 1, 3,\n    1, 4, 3, //flipped\n    1, 2, 4,\n    3, 4, 5,\n\n    //rear face\n    6, 9, 7,\n    7, 9, 10, //flipped\n    7, 10, 8,\n    9, 11, 10,\n\n    //left side\n    0, 3, 6,\n    3, 9, 6, //flipped\n    3, 5, 9,\n    5, 11, 9, //flipped\n\n    //right side\n    2, 8, 4, //flipped\n    4, 8, 10,\n    4, 10, 5, //flipped\n    5, 10, 11,\n  ];\n\n  //48 vertices\n  const triangleVertices = [];\n  const triangleTexCoords = [];\n  for (let i = 0; i < triangleVertexIndices.length; ++i) {\n    var a = triangleVertexIndices[i];\n    triangleVertices.push(triangleVerticesOriginal[a * 3]);\n    triangleVertices.push(triangleVerticesOriginal[a * 3 + 1]);\n    triangleVertices.push(triangleVerticesOriginal[a * 3 + 2]);\n    if (i >= 24) {\n      triangleTexCoords.push(triangleVerticesOriginal[a * 3 + 1]);\n      triangleTexCoords.push(triangleVerticesOriginal[a * 3 + 2]);\n    } else {\n      triangleTexCoords.push(triangleVerticesOriginal[a * 3]);\n      triangleTexCoords.push(triangleVerticesOriginal[a * 3 + 1]);\n    }\n  }\n\n  trianglesVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVertices), gl.STATIC_DRAW);\n  trianglesTexCoordBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleTexCoords), gl.STATIC_DRAW);\n\n  const triangleNormals = [];\n  for (let i = 0; i < triangleVertexIndices.length; i += 3) {\n    const a = triangleVertexIndices[i];\n    const b = triangleVertexIndices[i + 1];\n    const c = triangleVertexIndices[i + 2];\n    //normal is the cross product\n    const v1 = [\n      triangleVerticesOriginal[a * 3] - triangleVerticesOriginal[b * 3],\n      triangleVerticesOriginal[a * 3 + 1] - triangleVerticesOriginal[b * 3 + 1],\n      triangleVerticesOriginal[a * 3 + 2] - triangleVerticesOriginal[b * 3 + 2],\n    ];\n    const v2 = [\n      triangleVerticesOriginal[a * 3] - triangleVerticesOriginal[c * 3],\n      triangleVerticesOriginal[a * 3 + 1] - triangleVerticesOriginal[c * 3 + 1],\n      triangleVerticesOriginal[a * 3 + 2] - triangleVerticesOriginal[c * 3 + 2],\n    ];\n    const cross = [\n      v1[1] * v2[2] - v1[2] * v2[1],\n      v1[2] * v2[0] - v1[0] * v2[2],\n      v1[0] * v2[1] - v1[1] * v2[0]\n    ];\n    //same value for each of the three vertices\n    triangleNormals.push.apply(triangleNormals, cross);\n    triangleNormals.push.apply(triangleNormals, cross);\n    triangleNormals.push.apply(triangleNormals, cross);\n  }\n\n  trianglesNormalBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleNormals), gl.STATIC_DRAW);\n}\n\nfunction drawScene() {\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  vertexTexCoordAttribute = gl.getAttribLocation(glProgram, 'aVertexTexCoord');\n  gl.enableVertexAttribArray(vertexTexCoordAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffer);\n  gl.vertexAttribPointer(vertexTexCoordAttribute, 2, gl.FLOAT, false, 0, 0);\n\n  vertexNormalAttribute = gl.getAttribLocation(glProgram, \"aVertexNormal\");\n  gl.enableVertexAttribArray(vertexNormalAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffer);\n  gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  gl.drawArrays(gl.TRIANGLES, 0, 16 * 3);\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.samplerUnifrom0 = gl.getUniformLocation(glProgram, 'uSampler0');\n  glProgram.samplerUnifrom1 = gl.getUniformLocation(glProgram, 'uSampler1');\n  glProgram.normalMatrixUniform = gl.getUniformLocation(glProgram, \"uNormalMatrix\");\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n  gl.uniformMatrix3fv(glProgram.normalMatrixUniform, false, normalMatrix);\n}\n\nfunction loadTexture() {\n  textureImages[STONE_TEXTURE] = new Image();\n  textureImages[STONE_TEXTURE].onload = () => {\n    setupTexture(0);\n    gl.uniform1i(glProgram.samplerUnifrom0, 0);\n  };\n  textureImages[STONE_TEXTURE].src = 'data/img/stone-128px.jpg';\n\n  textureImages[WEBGL_LOGO_TEXTURE] = new Image();\n  textureImages[WEBGL_LOGO_TEXTURE].onload = () => {\n    setupTexture(1);\n    gl.uniform1i(glProgram.samplerUnifrom1, 1);\n  };\n  textureImages[WEBGL_LOGO_TEXTURE].src = 'data/img/webgl_logo-512px.png';\n}\n\nfunction setupTexture(i) {\n  gl.activeTexture(gl.TEXTURE0 + i);\n  textures[i] = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, textures[i]);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImages[i]);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n\n  glProgram.uDoTexturing = gl.getUniformLocation(glProgram, 'uDoTexturing');\n  gl.uniform1i(glProgram.uDoTexturing, 1);\n\n  if (!gl.isTexture(textures[i])) {\n    console.error('Error: Texture is invalid');\n  }\n\n}\n"],"sourceRoot":""}