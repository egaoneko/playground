{"version":3,"sources":["webpack:///./three-globe.js"],"names":["const","renderer","scene","camera","width","height","container","globe","VIEW_ANGLE","NEAR","FAR","RADIUS","raycaster","THREE","Raycaster","mouse","Vector2","onWindowResize","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","onClick","event","x","clientX","window","innerWidth","y","clientY","innerHeight","setFromCamera","intersects","intersectObject","i","length","console","log","convertVector3ToLngLat","point","convertLngLatToVector3","lng","lat","radius","phi","deg2rad","theta","Math","sin","cos","z","Vector3","vector","normalize","let","rad2deg","atan2","p","acos","dot","degree","PI","radians","proj4","defs","document","getElementById","Scene","antialias","background","Color","fog","FogExp2","PerspectiveCamera","position","set","pointLight","PointLight","add","Group","TextureLoader","load","texture","sphere","SphereGeometry","material","MeshBasicMaterial","map","overdraw","mesh","Mesh","geometry","PointsMaterial","size","transparency","opacity","random","vertices","push","stars","Points","WebGLRenderer","alpha","setClearColor","setPixelRatio","devicePixelRatio","appendChild","domElement","controls","OrbitControls","screenSpacePanning","minDistance","maxDistance","addEventListener","fetch","then","response","json","geojson","capitals","features","feature","Object","assign","properties","coordinates","turf","getCoord","forEach","capital","ref","color","copy","text","message","parameters","undefined","fontface","hasOwnProperty","fontsize","borderThickness","borderColor","r","g","b","a","backgroundColor","textColor","canvas","createElement","context","getContext","font","textWidth","measureText","fillStyle","strokeStyle","lineWidth","ctx","w","h","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","roundRect","fillText","Texture","needsUpdate","spriteMaterial","SpriteMaterial","useScreenCoordinates","sprite","Sprite","scale","makeTextSprite","city","init","animate","requestAnimationFrame","render"],"mappings":"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","file":"three-globe.js","sourcesContent":["// three\nconst VIEW_ANGLE = 45;\nconst NEAR = 0.1;\nconst FAR = 2000;\n\n// Earth\nconst RADIUS = 200;\n\nlet renderer;\nlet scene;\nlet camera;\nlet width;\nlet height;\nlet container;\nlet globe;\n\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\n// Proj4\nproj4.defs([\n  [\n    'Globe',\n    '+proj=longlat +a=6367470 +b=6367470 +ellps=sphere +datum=WGS84 +units=degrees'\n  ]\n]);\n// console.log(proj4('Globe', 'EPSG:4326', [126.982512, 37.564174]));\n// console.log(proj4('EPSG:4326', 'EPSG:3857', [126.982512, 37.564174]));\n\ninit();\nanimate();\n\nfunction init() {\n  container = document.getElementById('container');\n  width = container.clientWidth;\n  height = container.clientHeight;\n\n  // initEvent(container);\n\n  // scene\n  scene = new THREE.Scene({antialias: true});\n  scene.background = new THREE.Color(0x000);\n  scene.fog = new THREE.FogExp2(0x000000, 0.0003);\n\n  // camera\n  camera = new THREE.PerspectiveCamera(VIEW_ANGLE, width / height, NEAR, FAR);\n  camera.position.set(0, 0, 1000);\n  // camera.lookAt(0, 0, 0);\n\n  // light\n  const pointLight = new THREE.PointLight(0xFFFFFF);\n  pointLight.position.set(10, 50, 400);\n  scene.add(pointLight);\n\n  // globe\n  const radius = RADIUS;\n  const segments = 50;\n  const rings = 50;\n\n  globe = new THREE.Group();\n  scene.add(globe);\n\n  const loader = new THREE.TextureLoader();\n  loader.load(\n    'data/img/land_ocean_ice_cloud_2048.jpg',\n    (texture) => {\n      // Create the sphere\n      const sphere = new THREE.SphereGeometry(radius, segments, rings);\n\n      // Map the texture to the material.\n      const material = new THREE.MeshBasicMaterial({map: texture, overdraw: 0.5});\n\n      // Create a new mesh with sphere geometry.\n      const mesh = new THREE.Mesh(sphere, material);\n\n      // Add mesh to globe\n      globe.add(mesh);\n    }\n  );\n  globe.position.set(0, 0, 0);\n\n  // stars\n  const starSize = 45000;\n  const geometry = new THREE.SphereGeometry(1000, 100, 50);\n\n  const materialOptions = {\n    size: 1.0, //I know this is the default, it's for you.  Play with it if you want.\n    transparency: true,\n    opacity: 0.7\n  };\n\n  const material = new THREE.PointsMaterial(materialOptions);\n\n  // The wizard gaze became stern, his jaw set, he creates the cosmos with a wave of his arms\n\n  for (let i = 0; i < starSize; i++) {\n    const vector = new THREE.Vector3();\n    vector.x = Math.random() * 2000 - 1000;\n    vector.y = Math.random() * 2000 - 1000;\n    vector.z = Math.random() * 2000 - 1000;\n\n    geometry.vertices.push(vector);\n  }\n\n  const stars = new THREE.Points(geometry, material);\n  scene.add(stars);\n\n  // renderer\n  renderer = new THREE.WebGLRenderer({\n    alpha: true,\n    antialias: true\n  });\n  renderer.setClearColor(0xFFFFFFF, 0);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(width, height);\n\n  container.appendChild(renderer.domElement);\n\n  // controls\n  const controls = new THREE.OrbitControls(camera, renderer.domElement);\n  controls.screenSpacePanning = true;\n  controls.minDistance = 300;\n  controls.maxDistance = FAR;\n\n  window.addEventListener('resize', onWindowResize, false);\n  window.addEventListener('click', onClick);\n\n  loadGeojson();\n}\n\nfunction onWindowResize() {\n  width = container.clientWidth;\n  height = container.clientHeight;\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  renderer.setSize(width, height);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}\n\nfunction loadGeojson() {\n  fetch('data/geojson/capitals.geojson')\n    .then(response => response.json())\n    .then(geojson => {\n      const capitals = geojson.features\n        .map(feature => {\n          return Object.assign(\n            {},\n            feature.properties,\n            {\n              coordinates: turf.getCoord(feature)\n            }\n          );\n        });\n\n\n      capitals.forEach(capital => {\n        const [lng, lat] = capital.coordinates;\n        // const [lng, lat] = [126.982512, 37.564174]; // Seoul\n        // const [lng, lat] = [126.529541, 33.364209]; // Jeju\n        // const [lng, lat] = [-73.959961, 40.725275]; // New York\n        // const [lng, lat] = [-74.132116, 20.215811];\n        // const [lng, lat] = proj4('Globe', 'EPSG:4326', [-74.132116, 20.215811]);\n\n        const geometry = new THREE.SphereGeometry(1);\n        const material = new THREE.MeshBasicMaterial({color: '#ff0000'});\n        const sphere = new THREE.Mesh(geometry, material);\n        sphere.position.copy(convertLngLatToVector3(lng, lat, RADIUS));\n        scene.add(sphere);\n\n        const text = makeTextSprite(capital.city, {fontsize: 50});\n        text.position.copy(convertLngLatToVector3(lng, lat, RADIUS + 10));\n        scene.add(text);\n      });\n    });\n}\n\nfunction makeTextSprite(message, parameters) {\n  if (parameters === undefined) parameters = {};\n\n  const fontface = parameters.hasOwnProperty('fontface') ? parameters['fontface'] : 'Arial';\n  const fontsize = parameters.hasOwnProperty('fontsize') ? parameters['fontsize'] : 18;\n  const borderThickness = parameters.hasOwnProperty('borderThickness') ? parameters['borderThickness'] : 4;\n  const borderColor = parameters.hasOwnProperty('borderColor') ? parameters['borderColor'] : {r: 0, g: 0, b: 0, a: 1.0};\n  const backgroundColor = parameters.hasOwnProperty('backgroundColor') ? parameters['backgroundColor'] : {\n    r: 255,\n    g: 255,\n    b: 255,\n    a: 1.0\n  };\n  const textColor = parameters.hasOwnProperty('textColor') ? parameters['textColor'] : {r: 0, g: 0, b: 0, a: 1.0};\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  context.font = 'Bold ' + fontsize + 'px ' + fontface;\n  const metrics = context.measureText(message);\n  const textWidth = metrics.width;\n\n  context.fillStyle = 'rgba(' + backgroundColor.r + ',' + backgroundColor.g + ',' + backgroundColor.b + ',' + backgroundColor.a + ')';\n  context.strokeStyle = 'rgba(' + borderColor.r + ',' + borderColor.g + ',' + borderColor.b + ',' + borderColor.a + ')';\n\n  context.lineWidth = borderThickness;\n  roundRect(context, borderThickness / 2, borderThickness / 2, (textWidth + borderThickness) * 1.1, fontsize * 1.4 + borderThickness, 8);\n\n  context.fillStyle = 'rgba(' + textColor.r + ', ' + textColor.g + ', ' + textColor.b + ', 1.0)';\n  context.fillText(message, borderThickness, fontsize + borderThickness);\n\n  const texture = new THREE.Texture(canvas);\n  texture.needsUpdate = true;\n\n  const spriteMaterial = new THREE.SpriteMaterial({map: texture, useScreenCoordinates: false});\n  const sprite = new THREE.Sprite(spriteMaterial);\n  sprite.scale.set(0.5 * fontsize, 0.25 * fontsize, 0.75 * fontsize);\n  return sprite;\n}\n\nfunction roundRect(ctx, x, y, w, h, r) {\n  ctx.beginPath();\n  ctx.moveTo(x + r, y);\n  ctx.lineTo(x + w - r, y);\n  ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n  ctx.lineTo(x + w, y + h - r);\n  ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n  ctx.lineTo(x + r, y + h);\n  ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n  ctx.lineTo(x, y + r);\n  ctx.quadraticCurveTo(x, y, x + r, y);\n  ctx.closePath();\n  ctx.fill();\n  ctx.stroke();\n}\n\nfunction onClick(event) {\n  // mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;\n  // mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n  raycaster.setFromCamera(mouse, camera);\n\n  const intersects = raycaster.intersectObject(globe, true);\n\n  for (let i = 0; i < intersects.length; i++) {\n    console.log(convertVector3ToLngLat(intersects[i].point));\n  }\n}\n\nfunction convertLngLatToVector3(lng, lat, radius) {\n  const phi = deg2rad(90 - lat);\n  const theta = deg2rad(lng + 180);\n\n  const x = -((radius) * Math.sin(phi) * Math.cos(theta));\n  const z = ((radius) * Math.sin(phi) * Math.sin(theta));\n  const y = ((radius) * Math.cos(phi));\n\n  return new THREE.Vector3(x, y, z);\n}\n\nfunction convertVector3ToLngLat(vector) {\n  vector.normalize();\n  let lng = (270 + rad2deg(Math.atan2(vector.x , vector.z))) % 360;\n\n  let p = new THREE.Vector3(vector.x, 0, vector.z);\n  p.normalize();\n\n  let lat = rad2deg(Math.acos(p.dot(vector)));\n\n  if (vector.y < 0) {\n    lat *= -1;\n  }\n\n  return [lng, lat];\n}\n\nfunction deg2rad(degree) {\n  return degree * (Math.PI / 180);\n}\n\nfunction rad2deg(radians) {\n  return radians * (180 / Math.PI);\n}\n"],"sourceRoot":""}