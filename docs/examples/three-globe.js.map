{"version":3,"sources":["webpack:///./three-globe.js"],"names":["const","renderer","scene","camera","width","height","container","globe","VIEW_ANGLE","NEAR","FAR","RADIUS","capitals","raycaster","THREE","Raycaster","mouse","Vector2","onWindowResize","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","getLineMesh","coordinates","material","LineBasicMaterial","color","geometry","Geometry","forEach","coordinate","position","convertLngLatToVector3","vertices","push","Line","onClick","event","x","clientX","window","innerWidth","y","clientY","innerHeight","setFromCamera","intersects","intersectObject","i","length","console","log","convertVector3ToLngLat","point","onDBClick","SphereGeometry","MeshBasicMaterial","sphere","Mesh","copy","add","lng","lat","radius","phi","deg2rad","theta","Math","sin","cos","z","Vector3","vector","normalize","let","rad2deg","atan2","p","acos","dot","degree","PI","radians","proj4","defs","document","getElementById","Scene","antialias","background","Color","fog","FogExp2","PerspectiveCamera","set","pointLight","PointLight","Group","TextureLoader","load","texture","map","overdraw","transparent","opacity","mesh","PointsMaterial","size","random","round","stars","Points","WebGLRenderer","alpha","setClearColor","setPixelRatio","devicePixelRatio","appendChild","domElement","controls","OrbitControls","screenSpacePanning","minDistance","maxDistance","addEventListener","fetch","then","response","json","geojson","features","feature","Object","assign","properties","turf","getCoord","filter","capital","city","ref","text","message","parameters","undefined","fontface","hasOwnProperty","fontsize","borderThickness","borderColor","r","g","b","a","backgroundColor","textColor","canvas","createElement","context","getContext","font","textWidth","measureText","fillStyle","strokeStyle","lineWidth","ctx","w","h","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","roundRect","fillText","Texture","needsUpdate","spriteMaterial","SpriteMaterial","sprite","Sprite","scale","makeTextSprite","countries","country","type","init","animate","requestAnimationFrame","render","distanceTo","visible"],"mappings":"2EACAA,IAOIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAbEC,EAAa,GACbC,EAAO,GACPC,EAAM,IAGNC,EAAS,IASXC,KAEEC,EAAY,IAAIC,MAAMC,UACtBC,EAAQ,IAAIF,MAAMG,QAqHxB,SAASC,IACPd,EAAQE,EAAUa,YAClBd,EAASC,EAAUc,aACnBjB,EAAOkB,OAASjB,EAAQC,EACxBF,EAAOmB,yBACPrB,EAASsB,QAAQnB,EAAOC,GAiF1B,SAASmB,EAAYC,GACnBzB,IAAM0B,EAAW,IAAIZ,MAAMa,mBAAmBC,MAAO,WAC/CC,EAAW,IAAIf,MAAMgB,SAO3B,OALAL,EAAYM,QAAO,SAACC,GACX,IACDC,EAAWC,EADVF,EAAA,GAAKA,EAAA,GACsCrB,GAClDkB,EAASM,SAASC,KAAKH,KAElB,IAAInB,MAAMuB,KAAKR,EAAUH,GA0DlC,SAASY,EAAQC,GAGfvB,EAAMwB,EAAKD,EAAME,QAAUC,OAAOC,WAAc,EAAI,EACpD3B,EAAM4B,GAAML,EAAMM,QAAUH,OAAOI,YAAe,EAAI,EAEtDjC,EAAUkC,cAAc/B,EAAOb,GAI/B,IAFAH,IAAMgD,EAAanC,EAAUoC,gBAAgB1C,GAAO,GAE3C2C,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,IACrCE,QAAQC,IAAIC,EAAuBN,EAAWE,GAAGK,QAIrD,SAASC,EAAUjB,GACjBvB,EAAMwB,EAAKD,EAAME,QAAUC,OAAOC,WAAc,EAAI,EACpD3B,EAAM4B,GAAML,EAAMM,QAAUH,OAAOI,YAAe,EAAI,EAEtDjC,EAAUkC,cAAc/B,EAAOb,GAI/B,IAFAH,IAAMgD,EAAanC,EAAUoC,gBAAgB1C,GAAO,GAE3C2C,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,IAAK,CAC1ClD,IAAM6B,EAAW,IAAIf,MAAM2C,eAAe,IACpC/B,EAAW,IAAIZ,MAAM4C,mBAAmB9B,MAAO,YAC/C+B,EAAS,IAAI7C,MAAM8C,KAAK/B,EAAUH,GACxCiC,EAAO1B,SAAS4B,KAAKb,EAAWE,GAAGK,OACnCrD,EAAM4D,IAAIH,IAId,SAASzB,EAAuB6B,EAAKC,EAAKC,GACxCjE,IAAMkE,EAAMC,EAAQ,GAAKH,GACnBI,EAAQD,EAAQJ,EAAM,KAEtBvB,GAAM,EAAW6B,KAAKC,IAAIJ,GAAOG,KAAKE,IAAIH,GAC1CI,EAAK,EAAWH,KAAKC,IAAIJ,GAAOG,KAAKC,IAAIF,GACzCxB,EAAK,EAAWyB,KAAKE,IAAIL,GAE/B,OAAO,IAAIpD,MAAM2D,QAAQjC,EAAGI,EAAG4B,GAGjC,SAASlB,EAAuBoB,GAC9BA,EAAOC,YACPC,IAAIb,GAAO,IAAMc,EAAQR,KAAKS,MAAMJ,EAAOlC,EAAGkC,EAAOF,KAAO,IAExDO,EAAI,IAAIjE,MAAM2D,QAAQC,EAAOlC,EAAG,EAAGkC,EAAOF,GAC9CO,EAAEJ,YAEFC,IAAIZ,EAAMa,EAAQR,KAAKW,KAAKD,EAAEE,IAAIP,KAMlC,OAJIA,EAAO9B,EAAI,IACboB,IAAQ,IAGFD,EAAKC,GAGf,SAASG,EAAQe,GACf,OAAOA,GAAUb,KAAKc,GAAK,KAG7B,SAASN,EAAQO,GACf,OAAOA,GAAW,IAAMf,KAAKc,IA3U/BE,MAAMC,OAEF,QACA,mFASJ,WACEhF,EAAYiF,SAASC,eAAe,aACpCpF,EAAQE,EAAUa,YAClBd,EAASC,EAAUc,cAKnBlB,EAAQ,IAAIY,MAAM2E,OAAOC,WAAW,KAC9BC,WAAa,IAAI7E,MAAM8E,MAAM,GACnC1F,EAAM2F,IAAM,IAAI/E,MAAMgF,QAAQ,EAAU,OAGxC3F,EAAS,IAAIW,MAAMiF,kBAAkBvF,EAAYJ,EAAQC,EAAQI,EAAMC,IAChEuB,SAAS+D,IAAI,EAAG,EAAG,KAI1BhG,IAAMiG,EAAa,IAAInF,MAAMoF,WAAW,UACxCD,EAAWhE,SAAS+D,IAAI,GAAI,GAAI,KAChC9F,EAAM4D,IAAImC,GAGVjG,IAAMiE,EAAStD,EAIfJ,EAAQ,IAAIO,MAAMqF,MAClBjG,EAAM4D,IAAIvD,IAEK,IAAIO,MAAMsF,eAClBC,KACL,0CACCC,GAECtG,IAAM2D,EAAS,IAAI7C,MAAM2C,eAAeQ,EAX3B,GACH,IAaJvC,EAAW,IAAIZ,MAAM4C,mBACzB6C,IAAKD,EACLE,SAAU,GACVC,aAAa,EACbC,QAAS,KAILC,EAAO,IAAI7F,MAAM8C,KAAKD,EAAQjC,GAGpCnB,EAAMuD,IAAI6C,KAiBd,IAZA3G,IACM6B,EAAW,IAAIf,MAAM2C,eAAe,IAAM,IAAK,IAO/C/B,EAAW,IAAIZ,MAAM8F,gBAJzBC,KAAM,EACNH,QAAS,KAOFxD,EAAI,EAAGA,EAZC,KAYaA,IAAK,CACjClD,IAAM0E,EAAS,IAAI5D,MAAM2D,QACzBC,EAAOlC,GAAqB,IAAhB6B,KAAKyC,SAAkB,MAASzC,KAAK0C,MAAM1C,KAAKyC,UAAY,GAAK,GAC7EpC,EAAO9B,GAAqB,IAAhByB,KAAKyC,SAAkB,MAASzC,KAAK0C,MAAM1C,KAAKyC,UAAY,GAAK,GAC7EpC,EAAOF,GAAqB,IAAhBH,KAAKyC,SAAkB,MAASzC,KAAK0C,MAAM1C,KAAKyC,UAAY,GAAK,GAE7EjF,EAASM,SAASC,KAAKsC,GAGzB1E,IAAMgH,EAAQ,IAAIlG,MAAMmG,OAAOpF,EAAUH,GACzCxB,EAAM4D,IAAIkD,IAGV/G,EAAW,IAAIa,MAAMoG,eACnBC,OAAO,EACPzB,WAAW,KAEJ0B,cAAc,UAAW,GAClCnH,EAASoH,cAAc3E,OAAO4E,kBAC9BrH,EAASsB,QAAQnB,EAAOC,GAExBC,EAAUiH,YAAYtH,EAASuH,YAG/BxH,IAAMyH,EAAW,IAAI3G,MAAM4G,cAAcvH,EAAQF,EAASuH,YAC1DC,EAASE,oBAAqB,EAC9BF,EAASG,YAAc,IACvBH,EAASI,YAAcnH,EAEvBgC,OAAOoF,iBAAiB,SAAU5G,GAAgB,GAClDwB,OAAOoF,iBAAiB,QAASxF,GACjCI,OAAOoF,iBAAiB,WAAYtE,GAkCpCuE,MAAM,iCACHC,KAAI,SAACC,GAAS,OAAGA,EAASC,SAC1BF,KAAI,SAACG,IACJvH,EAAWuH,EAAQC,SAChB7B,IAAG,SAAC8B,GACH,OAAOC,OAAOC,UAEZF,EAAQG,YAEN/G,YAAagH,KAAKC,SAASL,OAIhCM,OAAM,SAACC,GAAQ,OAAGA,EAAQC,QAEpB9G,QAAO,SAAC6G,GACf,IAAAE,EAAmBF,EAAQnH,YAApBsC,EAAA+E,EAAA,GAAK9E,EAAA8E,EAAA,GAONjH,EAAW,IAAIf,MAAM2C,eAAe,GACpC/B,EAAW,IAAIZ,MAAM4C,mBAAmB9B,MAAO,YAC/C+B,EAAS,IAAI7C,MAAM8C,KAAK/B,EAAUH,GAClCO,EAAWC,EAAuB6B,EAAKC,EAAKrD,GAElDgD,EAAO1B,SAAS4B,KAAK5B,GACrB/B,EAAM4D,IAAIH,GACViF,EAAQ3G,SAAWA,EACnB2G,EAAQjF,OAASA,EAEjB3D,IAAM+I,EAoCd,SAAwBC,EAASC,QACZC,IAAfD,IAA0BA,MAE9BjJ,IAAMmJ,EAAWF,EAAWG,eAAe,YAAcH,EAAqB,SAAI,QAC5EI,EAAWJ,EAAWG,eAAe,YAAcH,EAAqB,SAAI,GAC5EK,EAAkBL,EAAWG,eAAe,mBAAqBH,EAA4B,gBAAI,EACjGM,EAAcN,EAAWG,eAAe,eAAiBH,EAAwB,aAAKO,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC3GC,EAAkBX,EAAWG,eAAe,mBAAqBH,EAA4B,iBACjGO,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,GAECE,EAAYZ,EAAWG,eAAe,aAAeH,EAAsB,WAAKO,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAErGG,EAASvE,SAASwE,cAAc,UAChCC,EAAUF,EAAOG,WAAW,MAClCD,EAAQE,KAAO,QAAUb,EAAW,MAAQF,EAC5CnJ,IACMmK,EADUH,EAAQI,YAAYpB,GACV5I,MAE1B4J,EAAQK,UAAY,QAAUT,EAAgBJ,EAAI,IAAMI,EAAgBH,EAAI,IAAMG,EAAgBF,EAAI,IAAME,EAAgBD,EAAI,IAChIK,EAAQM,YAAc,QAAUf,EAAYC,EAAI,IAAMD,EAAYE,EAAI,IAAMF,EAAYG,EAAI,IAAMH,EAAYI,EAAI,IAElHK,EAAQO,UAAYjB,EAetB,SAAmBkB,EAAKhI,EAAGI,EAAG6H,EAAGC,EAAGlB,GAClCgB,EAAIG,YACJH,EAAII,OAAOpI,EAAIgH,EAAG5G,GAClB4H,EAAIK,OAAOrI,EAAIiI,EAAIjB,EAAG5G,GACtB4H,EAAIM,iBAAiBtI,EAAIiI,EAAG7H,EAAGJ,EAAIiI,EAAG7H,EAAI4G,GAC1CgB,EAAIK,OAAOrI,EAAIiI,EAAG7H,EAAI8H,EAAIlB,GAC1BgB,EAAIM,iBAAiBtI,EAAIiI,EAAG7H,EAAI8H,EAAGlI,EAAIiI,EAAIjB,EAAG5G,EAAI8H,GAClDF,EAAIK,OAAOrI,EAAIgH,EAAG5G,EAAI8H,GACtBF,EAAIM,iBAAiBtI,EAAGI,EAAI8H,EAAGlI,EAAGI,EAAI8H,EAAIlB,GAC1CgB,EAAIK,OAAOrI,EAAGI,EAAI4G,GAClBgB,EAAIM,iBAAiBtI,EAAGI,EAAGJ,EAAIgH,EAAG5G,GAClC4H,EAAIO,YACJP,EAAIQ,OACJR,EAAIS,SA3BJC,CAAUlB,EAASV,EAAkB,EAAGA,EAAkB,EAAmC,KAA/Ba,EAAYb,GAAmC,IAAXD,EAAiBC,EAAiB,GAEpIU,EAAQK,UAAY,QAAUR,EAAUL,EAAI,KAAOK,EAAUJ,EAAI,KAAOI,EAAUH,EAAI,SACtFM,EAAQmB,SAASnC,EAASM,EAAiBD,EAAWC,GAEtDtJ,IAAMsG,EAAU,IAAIxF,MAAMsK,QAAQtB,GAClCxD,EAAQ+E,aAAc,EAEtBrL,IAAMsL,EAAiB,IAAIxK,MAAMyK,gBAAgBhF,IAAKD,IAChDkF,EAAS,IAAI1K,MAAM2K,OAAOH,GAEhC,OADAE,EAAOE,MAAM1F,IAAI,GAAMqD,EAAU,IAAOA,EAAU,IAAOA,GAClDmC,EAxEYG,CAAe/C,EAAQC,MAAOQ,SAAU,KAErDN,EAAK9G,SAAS4B,KAAK3B,EAAuB6B,EAAKC,EAAKrD,EAAS,KAC7DT,EAAM4D,IAAIiF,GACVH,EAAQG,KAAOA,MAIrBhB,MAAM,kCACHC,KAAI,SAACC,GAAS,OAAGA,EAASC,SAC1BF,KAAI,SAACG,GACJnI,IAAM4L,EAAYzD,EAAQC,SAC1BwD,EAAU7J,QAAO,SAAC8J,GAChB7L,IAAM8L,EAAOD,EAAQhK,SAASiK,KACjB,YAATA,EACF5L,EAAM4D,IAAItC,EAAYqK,EAAQhK,SAASJ,YAAY,KACjC,iBAATqK,GACTD,EAAQhK,SAASJ,YAAYM,QAAO,SAACN,GAAY,OAAGvB,EAAM4D,IAAItC,EAAYC,EAAY,WAxLhGsK,GAiHA,SAASC,IACPC,sBAAsBD,GAKtB/L,EAASiM,OAAOhM,EAAOC,GACvBS,EAASmB,QAAO,SAAC6G,GAEbrI,EAAM0B,SAASkK,WAAWhM,EAAO8B,UAAY2G,EAAQ3G,SAASkK,WAAWhM,EAAO8B,WAEhF2G,EAAQjF,OAAOyI,SAAU,EACzBxD,EAAQG,KAAKqD,SAAU,IAEvBxD,EAAQjF,OAAOyI,SAAU,EACzBxD,EAAQG,KAAKqD,SAAU,KA/H7BJ","file":"three-globe.js","sourcesContent":["// three\nconst VIEW_ANGLE = 45;\nconst NEAR = 0.1;\nconst FAR = 2000;\n\n// Earth\nconst RADIUS = 200;\n\nlet renderer;\nlet scene;\nlet camera;\nlet width;\nlet height;\nlet container;\nlet globe;\nlet capitals = [];\n\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\n// Proj4\nproj4.defs([\n  [\n    'Globe',\n    '+proj=longlat +a=6367470 +b=6367470 +ellps=sphere +datum=WGS84 +units=degrees'\n  ]\n]);\n// console.log(proj4('Globe', 'EPSG:4326', [126.982512, 37.564174]));\n// console.log(proj4('EPSG:4326', 'EPSG:3857', [126.982512, 37.564174]));\n\ninit();\nanimate();\n\nfunction init() {\n  container = document.getElementById('container');\n  width = container.clientWidth;\n  height = container.clientHeight;\n\n  // initEvent(container);\n\n  // scene\n  scene = new THREE.Scene({antialias: true});\n  scene.background = new THREE.Color(0x000);\n  scene.fog = new THREE.FogExp2(0x000000, 0.0003);\n\n  // camera\n  camera = new THREE.PerspectiveCamera(VIEW_ANGLE, width / height, NEAR, FAR);\n  camera.position.set(0, 0, 1000);\n  // camera.lookAt(0, 0, 0);\n\n  // light\n  const pointLight = new THREE.PointLight(0xFFFFFF);\n  pointLight.position.set(10, 50, 400);\n  scene.add(pointLight);\n\n  // globe\n  const radius = RADIUS;\n  const segments = 50;\n  const rings = 50;\n\n  globe = new THREE.Group();\n  scene.add(globe);\n\n  const loader = new THREE.TextureLoader();\n  loader.load(\n    'http://i.imgur.com/puZgGjm.jpg',\n    (texture) => {\n      // Create the sphere\n      const sphere = new THREE.SphereGeometry(radius, segments, rings);\n\n      // Map the texture to the material.\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        overdraw: 0.5,\n        transparent: true,\n        opacity: 0.5\n      });\n\n      // Create a new mesh with sphere geometry.\n      const mesh = new THREE.Mesh(sphere, material);\n\n      // Add mesh to globe\n      globe.add(mesh);\n    }\n  );\n\n  // stars\n  const starSize = 45000;\n  const geometry = new THREE.SphereGeometry(1000, 100, 50);\n\n  const materialOptions = {\n    size: 1.0, //I know this is the default, it's for you.  Play with it if you want.\n    opacity: 0.7\n  };\n\n  const material = new THREE.PointsMaterial(materialOptions);\n\n  // The wizard gaze became stern, his jaw set, he creates the cosmos with a wave of his arms\n\n  for (let i = 0; i < starSize; i++) {\n    const vector = new THREE.Vector3();\n    vector.x = (Math.random() * 1000 + 1000) * (Math.round(Math.random()) ? 1 : -1);\n    vector.y = (Math.random() * 1000 + 1000) * (Math.round(Math.random()) ? 1 : -1);\n    vector.z = (Math.random() * 1000 + 1000) * (Math.round(Math.random()) ? 1 : -1);\n\n    geometry.vertices.push(vector);\n  }\n\n  const stars = new THREE.Points(geometry, material);\n  scene.add(stars);\n\n  // renderer\n  renderer = new THREE.WebGLRenderer({\n    alpha: true,\n    antialias: true\n  });\n  renderer.setClearColor(0xFFFFFFF, 0);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(width, height);\n\n  container.appendChild(renderer.domElement);\n\n  // controls\n  const controls = new THREE.OrbitControls(camera, renderer.domElement);\n  controls.screenSpacePanning = true;\n  controls.minDistance = 300;\n  controls.maxDistance = FAR;\n\n  window.addEventListener('resize', onWindowResize, false);\n  window.addEventListener('click', onClick);\n  window.addEventListener('dblclick', onDBClick);\n\n  loadGeojson();\n}\n\nfunction onWindowResize() {\n  width = container.clientWidth;\n  height = container.clientHeight;\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  renderer.setSize(width, height);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n  capitals.forEach(capital => {\n    if (\n      globe.position.distanceTo(camera.position) < capital.position.distanceTo(camera.position)\n    ) {\n      capital.sphere.visible = false;\n      capital.text.visible = false;\n    } else {\n      capital.sphere.visible = true;\n      capital.text.visible = true;\n    }\n  });\n}\n\nfunction loadGeojson() {\n  fetch('data/geojson/capitals.geojson')\n    .then(response => response.json())\n    .then(geojson => {\n      capitals = geojson.features\n        .map(feature => {\n          return Object.assign(\n            {},\n            feature.properties,\n            {\n              coordinates: turf.getCoord(feature)\n            }\n          );\n        })\n        .filter(capital => capital.city);\n\n      capitals.forEach(capital => {\n        const [lng, lat] = capital.coordinates;\n        // const [lng, lat] = [126.982512, 37.564174]; // Seoul\n        // const [lng, lat] = [126.529541, 33.364209]; // Jeju\n        // const [lng, lat] = [-73.959961, 40.725275]; // New York\n        // const [lng, lat] = [-74.132116, 20.215811];\n        // const [lng, lat] = proj4('Globe', 'EPSG:4326', [-74.132116, 20.215811]);\n\n        const geometry = new THREE.SphereGeometry(1);\n        const material = new THREE.MeshBasicMaterial({color: '#ff0000'});\n        const sphere = new THREE.Mesh(geometry, material);\n        const position = convertLngLatToVector3(lng, lat, RADIUS);\n\n        sphere.position.copy(position);\n        scene.add(sphere);\n        capital.position = position;\n        capital.sphere = sphere;\n\n        const text = makeTextSprite(capital.city, {fontsize: 50});\n\n        text.position.copy(convertLngLatToVector3(lng, lat, RADIUS + 10));\n        scene.add(text);\n        capital.text = text;\n      });\n    });\n\n  fetch('data/geojson/countries.geojson')\n    .then(response => response.json())\n    .then(geojson => {\n      const countries = geojson.features;\n      countries.forEach(country => {\n        const type = country.geometry.type;\n        if (type === 'Polygon') {\n          scene.add(getLineMesh(country.geometry.coordinates[0]));\n        } else if (type === 'MultiPolygon') {\n          country.geometry.coordinates.forEach(coordinates => scene.add(getLineMesh(coordinates[0])));\n        }\n      });\n\n    });\n}\n\nfunction getLineMesh(coordinates) {\n  const material = new THREE.LineBasicMaterial({color: 0xffffff});\n  const geometry = new THREE.Geometry();\n\n  coordinates.forEach(coordinate => {\n    const [lng, lat] = coordinate;\n    const position = convertLngLatToVector3(lng, lat, RADIUS);\n    geometry.vertices.push(position);\n  });\n  return new THREE.Line(geometry, material);\n}\n\nfunction makeTextSprite(message, parameters) {\n  if (parameters === undefined) parameters = {};\n\n  const fontface = parameters.hasOwnProperty('fontface') ? parameters['fontface'] : 'Arial';\n  const fontsize = parameters.hasOwnProperty('fontsize') ? parameters['fontsize'] : 18;\n  const borderThickness = parameters.hasOwnProperty('borderThickness') ? parameters['borderThickness'] : 4;\n  const borderColor = parameters.hasOwnProperty('borderColor') ? parameters['borderColor'] : {r: 0, g: 0, b: 0, a: 1.0};\n  const backgroundColor = parameters.hasOwnProperty('backgroundColor') ? parameters['backgroundColor'] : {\n    r: 255,\n    g: 255,\n    b: 255,\n    a: 1.0\n  };\n  const textColor = parameters.hasOwnProperty('textColor') ? parameters['textColor'] : {r: 0, g: 0, b: 0, a: 1.0};\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  context.font = 'Bold ' + fontsize + 'px ' + fontface;\n  const metrics = context.measureText(message);\n  const textWidth = metrics.width;\n\n  context.fillStyle = 'rgba(' + backgroundColor.r + ',' + backgroundColor.g + ',' + backgroundColor.b + ',' + backgroundColor.a + ')';\n  context.strokeStyle = 'rgba(' + borderColor.r + ',' + borderColor.g + ',' + borderColor.b + ',' + borderColor.a + ')';\n\n  context.lineWidth = borderThickness;\n  roundRect(context, borderThickness / 2, borderThickness / 2, (textWidth + borderThickness) * 1.1, fontsize * 1.4 + borderThickness, 8);\n\n  context.fillStyle = 'rgba(' + textColor.r + ', ' + textColor.g + ', ' + textColor.b + ', 1.0)';\n  context.fillText(message, borderThickness, fontsize + borderThickness);\n\n  const texture = new THREE.Texture(canvas);\n  texture.needsUpdate = true;\n\n  const spriteMaterial = new THREE.SpriteMaterial({map: texture});\n  const sprite = new THREE.Sprite(spriteMaterial);\n  sprite.scale.set(0.5 * fontsize, 0.25 * fontsize, 0.75 * fontsize);\n  return sprite;\n}\n\nfunction roundRect(ctx, x, y, w, h, r) {\n  ctx.beginPath();\n  ctx.moveTo(x + r, y);\n  ctx.lineTo(x + w - r, y);\n  ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n  ctx.lineTo(x + w, y + h - r);\n  ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n  ctx.lineTo(x + r, y + h);\n  ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n  ctx.lineTo(x, y + r);\n  ctx.quadraticCurveTo(x, y, x + r, y);\n  ctx.closePath();\n  ctx.fill();\n  ctx.stroke();\n}\n\nfunction onClick(event) {\n  // mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;\n  // mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n  raycaster.setFromCamera(mouse, camera);\n\n  const intersects = raycaster.intersectObject(globe, true);\n\n  for (let i = 0; i < intersects.length; i++) {\n    console.log(convertVector3ToLngLat(intersects[i].point));\n  }\n}\n\nfunction onDBClick(event) {\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n  raycaster.setFromCamera(mouse, camera);\n\n  const intersects = raycaster.intersectObject(globe, true);\n\n  for (let i = 0; i < intersects.length; i++) {\n    const geometry = new THREE.SphereGeometry(0.5);\n    const material = new THREE.MeshBasicMaterial({color: '#ff0000'});\n    const sphere = new THREE.Mesh(geometry, material);\n    sphere.position.copy(intersects[i].point);\n    scene.add(sphere);\n  }\n}\n\nfunction convertLngLatToVector3(lng, lat, radius) {\n  const phi = deg2rad(90 - lat);\n  const theta = deg2rad(lng + 180);\n\n  const x = -((radius) * Math.sin(phi) * Math.cos(theta));\n  const z = ((radius) * Math.sin(phi) * Math.sin(theta));\n  const y = ((radius) * Math.cos(phi));\n\n  return new THREE.Vector3(x, y, z);\n}\n\nfunction convertVector3ToLngLat(vector) {\n  vector.normalize();\n  let lng = (270 + rad2deg(Math.atan2(vector.x, vector.z))) % 360;\n\n  let p = new THREE.Vector3(vector.x, 0, vector.z);\n  p.normalize();\n\n  let lat = rad2deg(Math.acos(p.dot(vector)));\n\n  if (vector.y < 0) {\n    lat *= -1;\n  }\n\n  return [lng, lat];\n}\n\nfunction deg2rad(degree) {\n  return degree * (Math.PI / 180);\n}\n\nfunction rad2deg(radians) {\n  return radians * (180 / Math.PI);\n}\n"],"sourceRoot":""}