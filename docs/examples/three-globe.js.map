{"version":3,"sources":["webpack:///./three-globe.js"],"names":["const","renderer","scene","camera","width","height","container","globe","VIEW_ANGLE","NEAR","FAR","onWindowResize","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","document","getElementById","THREE","Scene","antialias","background","Color","fog","FogExp2","PerspectiveCamera","position","set","pointLight","PointLight","add","Group","TextureLoader","load","texture","sphere","SphereGeometry","material","MeshBasicMaterial","map","overdraw","mesh","Mesh","geometry","PointsMaterial","size","transparency","opacity","i","vector","Vector3","x","Math","random","y","z","vertices","push","stars","Points","WebGLRenderer","alpha","setClearColor","setPixelRatio","window","devicePixelRatio","appendChild","domElement","controls","OrbitControls","screenSpacePanning","minDistance","maxDistance","addEventListener","init","animate","requestAnimationFrame","render"],"mappings":"2EACAA,IAIIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAVEC,EAAa,GACbC,EAAO,GACPC,EAAM,IA4GZ,SAASC,IACPP,EAAQE,EAAUM,YAClBP,EAASC,EAAUO,aACnBV,EAAOW,OAASV,EAAQC,EACxBF,EAAOY,yBACPd,EAASe,QAAQZ,EAAOC,IApG1B,WACEC,EAAYW,SAASC,eAAe,aACpCd,EAAQE,EAAUM,YAClBP,EAASC,EAAUO,cAKnBX,EAAQ,IAAIiB,MAAMC,OAAOC,WAAW,KAC9BC,WAAa,IAAIH,MAAMI,MAAM,GACnCrB,EAAMsB,IAAM,IAAIL,MAAMM,QAAQ,EAAU,OAGxCtB,EAAS,IAAIgB,MAAMO,kBAAkBlB,EAAYJ,EAAQC,EAAQI,EAAMC,IAChEiB,SAASC,IAAI,EAAG,EAAG,KAI1B5B,IAAM6B,EAAa,IAAIV,MAAMW,WAAW,UACxCD,EAAWF,SAASC,IAAI,GAAI,GAAI,KAChC1B,EAAM6B,IAAIF,GAOVtB,EAAQ,IAAIY,MAAMa,MAClB9B,EAAM6B,IAAIxB,IAEK,IAAIY,MAAMc,eAClBC,KACL,kDACCC,GAECnC,IAAMoC,EAAS,IAAIjB,MAAMkB,eAZd,IACE,GACH,IAaJC,EAAW,IAAInB,MAAMoB,mBAAmBC,IAAKL,EAASM,SAAU,KAGhEC,EAAO,IAAIvB,MAAMwB,KAAKP,EAAQE,GAGpC/B,EAAMwB,IAAIW,KAGdnC,EAAMoB,SAASC,IAAI,EAAG,EAAG,GAgBzB,IAbA5B,IACM4C,EAAW,IAAIzB,MAAMkB,eAAe,IAAM,IAAK,IAQ/CC,EAAW,IAAInB,MAAM0B,gBALzBC,KAAM,EACNC,cAAc,EACdC,QAAS,KAOFC,EAAI,EAAGA,EAbC,KAaaA,IAAK,CACjCjD,IAAMkD,EAAS,IAAI/B,MAAMgC,QACzBD,EAAOE,EAAoB,IAAhBC,KAAKC,SAAkB,IAClCJ,EAAOK,EAAoB,IAAhBF,KAAKC,SAAkB,IAClCJ,EAAOM,EAAoB,IAAhBH,KAAKC,SAAkB,IAElCV,EAASa,SAASC,KAAKR,GAGzBlD,IAAM2D,EAAQ,IAAIxC,MAAMyC,OAAOhB,EAAUN,GACzCpC,EAAM6B,IAAI4B,IAGV1D,EAAW,IAAIkB,MAAM0C,eACnBC,OAAO,EACPzC,WAAW,KAEJ0C,cAAc,UAAW,GAClC9D,EAAS+D,cAAcC,OAAOC,kBAC9BjE,EAASe,QAAQZ,EAAOC,GAExBC,EAAU6D,YAAYlE,EAASmE,YAG/BpE,IAAMqE,EAAW,IAAIlD,MAAMmD,cAAcnE,EAAQF,EAASmE,YAC1DC,EAASE,oBAAqB,EAC9BF,EAASG,YAAc,IACvBH,EAASI,YAAc/D,EAEvBuD,OAAOS,iBAAiB,SAAU/D,GAAgB,GA/FpDgE,GA0GA,SAASC,IACPC,sBAAsBD,GAKtB3E,EAAS6E,OAAO5E,EAAOC,GA/GzByE","file":"three-globe.js","sourcesContent":["// three\nconst VIEW_ANGLE = 45;\nconst NEAR = 0.1;\nconst FAR = 2000;\n\nlet renderer;\nlet scene;\nlet camera;\nlet width;\nlet height;\nlet container;\nlet globe;\n\ninit();\nanimate();\n\nfunction init() {\n  container = document.getElementById('container');\n  width = container.clientWidth;\n  height = container.clientHeight;\n\n  // initEvent(container);\n\n  // scene\n  scene = new THREE.Scene({antialias: true});\n  scene.background = new THREE.Color(0x000);\n  scene.fog = new THREE.FogExp2(0x000000, 0.0003);\n\n  // camera\n  camera = new THREE.PerspectiveCamera(VIEW_ANGLE, width / height, NEAR, FAR);\n  camera.position.set(0, 0, 1000);\n  // camera.lookAt(0, 0, 0);\n\n  // light\n  const pointLight = new THREE.PointLight(0xFFFFFF);\n  pointLight.position.set(10, 50, 400);\n  scene.add(pointLight);\n\n  // globe\n  const radius = 200;\n  const segments = 50;\n  const rings = 50;\n\n  globe = new THREE.Group();\n  scene.add(globe);\n\n  const loader = new THREE.TextureLoader();\n  loader.load(\n    'data/img/land_ocean_ice_cloud_2048.jpg',\n    (texture) => {\n      // Create the sphere\n      const sphere = new THREE.SphereGeometry(radius, segments, rings);\n\n      // Map the texture to the material.\n      const material = new THREE.MeshBasicMaterial({map: texture, overdraw: 0.5});\n\n      // Create a new mesh with sphere geometry.\n      const mesh = new THREE.Mesh(sphere, material);\n\n      // Add mesh to globe\n      globe.add(mesh);\n    }\n  );\n  globe.position.set(0, 0, 0);\n\n  // stars\n  const starSize = 45000;\n  const geometry = new THREE.SphereGeometry(1000, 100, 50);\n\n  const materialOptions = {\n    size: 1.0, //I know this is the default, it's for you.  Play with it if you want.\n    transparency: true,\n    opacity: 0.7\n  };\n\n  const material = new THREE.PointsMaterial(materialOptions);\n\n  // The wizard gaze became stern, his jaw set, he creates the cosmos with a wave of his arms\n\n  for (let i = 0; i < starSize; i++) {\n    const vector = new THREE.Vector3();\n    vector.x = Math.random() * 2000 - 1000;\n    vector.y = Math.random() * 2000 - 1000;\n    vector.z = Math.random() * 2000 - 1000;\n\n    geometry.vertices.push(vector);\n  }\n\n  const stars = new THREE.Points(geometry, material);\n  scene.add(stars);\n\n  // renderer\n  renderer = new THREE.WebGLRenderer({\n    alpha: true,\n    antialias: true\n  });\n  renderer.setClearColor(0xFFFFFFF, 0);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(width, height);\n\n  container.appendChild(renderer.domElement);\n\n  // controls\n  const controls = new THREE.OrbitControls(camera, renderer.domElement);\n  controls.screenSpacePanning = true;\n  controls.minDistance = 500;\n  controls.maxDistance = FAR;\n\n  window.addEventListener('resize', onWindowResize, false);\n}\n\nfunction onWindowResize() {\n  width = container.clientWidth;\n  height = container.clientHeight;\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  renderer.setSize(width, height);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}\n"],"sourceRoot":""}