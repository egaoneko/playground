{"version":3,"sources":["webpack:///../src/pg/math/vector3.js","webpack:///./utils/graphics/webgl/mesh-utils.js","webpack:///./utils/graphics/webgl/object-utils.js","webpack:///./webgl-physics-projectile.js"],"names":["Vector3","x","y","z","this","prototype","divide","scala","Error","cross","vector","const","length","Math","sqrt","normalize","__webpack_require__","d","__webpack_exports__","setupPlaneMesh","setupSphereMesh","createGrid","createGridMidPoint","_src_pg_math_vector3__WEBPACK_IMPORTED_MODULE_0__","gl","buffers","n","options","vertexPositionData","indexData","textureData","size","Object","assign","color","translation","textured","normalData","colorData","trianglesNormalBuffers","trianglesColorBuffers","trianglesVerticeBuffers","trianglesTexCoordBuffers","vertexIndexBuffers","i","push","j","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","ELEMENT_ARRAY_BUFFER","Uint16Array","STREAM_DRAW","radius","division","smoothShading","latitudeBands","longitudeBands","latNumber","theta","PI","sinTheta","sin","cosTheta","cos","longNumber","phi","sinPhi","let","first","second","origVertices","indices","vertices","a","calculateFlattenedVertices","origNormals","normals","b","c","n1","n2","n3","nx","ny","nz","v3","calculatePerFaceNormals","divisions","segment_size","row","trianglesVerticesBuffer","vertexIndexBuffer","power","pow","segmentSize","midpointDisplacement","tl","tr","bl","br","iteration","midpoint","leftMp","rightMp","topMp","bottomMp","tlHeight","trHeight","blHeight","brHeight","topValue","bottomValue","leftValue","rightValue","random","SphereObject","WallObject","Particle","properties","position","velocity","acceleration","vboIndex","totalVelocity","startX","startY","endX","endY","slope","angle","atan2","abs","age","lifespan","update","r","_utils_graphics_webgl_mesh_utils__WEBPACK_IMPORTED_MODULE_0__","_utils_graphics_webgl_object_utils__WEBPACK_IMPORTED_MODULE_1__","_src_pg_math_vector3__WEBPACK_IMPORTED_MODULE_2__","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","vertexNormalAttribute","vertexColorAttribute","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","start","angleX","angleY","paused","SHADER","flat","sceneElements","zoom","fire","GROUND_Y","RECTANGLE_LENGTH","makeShader","source","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","setMatrixUniforms","uniformMatrix4fv","pMatrixUniform","mvMatrixUniform","uniformMatrix3fv","normalMatrixUniform","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","e","pageX","pageY","mouseMoveHandler","mouseUpHandler","removeEventListener","adjustZoom","delta","stopPropagation","preventDefault","wheelDelta","originalEvent","detail","initEvents","getContext","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","createProgram","useProgram","getUniformLocation","v1","v2","apply","calculateNormals","addBox","getAttribLocation","enableVertexAttribArray","setupMeshes","animLoop","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","viewport","perspective","identity","translate","rotate","scale","invertedMatrix","fromMat4","invert","transpose","disableVertexAttribArray","vertexAttrib4f","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","drawScene","requestAnimationFrame","evt","log","keyCode"],"mappings":"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","file":"webgl-physics-projectile.js","sourcesContent":["/**\n * @module pg/math/vector3\n */\n\n/**\n * @classdesc\n * Vector 3D\n *\n * @api\n */\n\nexport default class Vector3 {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Divide by number\n   * @param {number} scala number for dividing\n   * @return {Vector3} this\n   * @api\n   */\n  divide(scala) {\n    if (typeof scala !== 'number') {\n      throw new Error(`invalid input: ${scala}`);\n    }\n\n    this.x /= scala;\n    this.y /= scala;\n    this.z /= scala;\n\n    return this;\n  }\n\n  /**\n   * Get crossed vector.\n   * @param {Vector3} vector vector for cross\n   * @return {Vector3} this\n   * @api\n   */\n  cross(vector) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n\n    if (!(vector instanceof Vector3)) {\n      throw new Error(`invalid input: ${vector}`);\n    }\n\n    this.x = y * vector.z - z * vector.y;\n    this.y = z * vector.x - x * vector.z;\n    this.z = x * vector.y - y * vector.x;\n  }\n\n  /**\n   * Get length of vector.\n   * @return {number} length\n   * @api\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  /**\n   * Get normalized vector\n   * @return {Vector3} normalized vector\n   * @api\n   */\n  normalize() {\n    return this.divide(this.length());\n  }\n}\n","import Vector3 from \"../../../../src/pg/math/vector3\";\n\nexport function setupPlaneMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    size: 10.0,\n    color: [0.5, 0.5, 1.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    textured: false,\n  }, options);\n\n  const size = options.size;\n  const color = options.color;\n  const translation = options.translation;\n  const textured = options.textured;\n\n  let vertexPositionData;\n  let indexData;\n  let textureData;\n  const normalData = [];\n  const colorData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //plane\n  for (let i = 0; i < 5; ++i) {\n    normalData.push(0.0);\n    normalData.push(1.0);\n    normalData.push(0.0);\n    colorData.push(color[0]);\n    colorData.push(color[1]);\n    colorData.push(color[2]);\n    colorData.push(color[3]);\n  }\n\n  vertexPositionData = [\n    0.0, 0.0, 0.0,\n    -size, 0.0, -size,\n    size, 0.0, -size,\n    size, 0.0, size,\n    -size, 0.0, size\n  ];\n\n  textureData = [\n    0.0, 0.0,\n    -size, -size,\n    size, -size,\n    size, size,\n    -size, size\n  ];\n\n\n  for (var j = 0; j < vertexPositionData.length; j += 3) {\n    vertexPositionData[j] += translation[0];\n    vertexPositionData[j + 1] += translation[1];\n    vertexPositionData[j + 2] += translation[2];\n  }\n\n  indexData = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1];\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nexport function setupSphereMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    color: [1.0, 0.0, 0.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    radius: 1.0,\n    division: 30,\n    smoothShading: true,\n    textured: false,\n  }, options);\n\n  const color = options.color;\n  const translation = options.translation;\n  const radius = options.radius;\n  const division = options.division;\n  const smoothShading = options.smoothShading;\n  const textured = options.textured;\n\n  let latitudeBands = division;\n  let longitudeBands = division;\n\n  let vertexPositionData = [];\n  let colorData = [];\n  let normalData = [];\n  const indexData = [];\n  const textureData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //modified from http://learningwebgl.com/cookbook/index.php/How_to_draw_a_sphere\n  for (let latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n    const theta = latNumber * Math.PI / latitudeBands;\n    const sinTheta = Math.sin(theta);\n    const cosTheta = Math.cos(theta);\n\n    for (let longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n      const phi = longNumber * 2 * Math.PI / longitudeBands;\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n\n      const x = cosPhi * sinTheta;\n      const y = cosTheta;\n      const z = sinPhi * sinTheta;\n      // const u = 1 - (longNumber / longitudeBands);\n      // const v = latNumber / latitudeBands;\n\n      textureData.push((x + 1.0) * .5);\n      textureData.push((y + 1.0) * .5);\n\n      normalData.push(x);\n      normalData.push(y);\n      normalData.push(z);\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n      vertexPositionData.push(radius * x + translation[0]);\n      vertexPositionData.push(radius * y + translation[1]);\n      vertexPositionData.push(radius * z + translation[2]);\n    }\n  }\n\n  for (let latNumber = 0; latNumber < latitudeBands; latNumber++) {\n    for (let longNumber = 0; longNumber < longitudeBands; longNumber++) {\n      const first = (latNumber * (longitudeBands + 1)) + longNumber;\n      const second = first + longitudeBands + 1;\n      indexData.push(first);\n      indexData.push(second);\n      indexData.push(first + 1);\n\n      indexData.push(second);\n      indexData.push(second + 1);\n      indexData.push(first + 1);\n    }\n  }\n\n  if (!smoothShading) {\n    vertexPositionData = calculateFlattenedVertices(vertexPositionData, indexData);\n    colorData = [];\n    for (let i = 0; i < indexData.length; ++i) {\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n    }\n    normalData = calculatePerFaceNormals(normalData, indexData);\n  }\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nexport function createGrid(gl, buffers, size = 1.0, divisions = 10) {\n  const segment_size = size / divisions;\n  const vertexPositionData = [];\n\n  for (let i = 0; i <= divisions; ++i) {\n    for (let j = 0; j <= divisions; ++j) {\n      vertexPositionData.push(i * segment_size);\n      vertexPositionData.push(0.0);\n      vertexPositionData.push(j * segment_size);\n    }\n  }\n\n  const indexData = [0];\n\n  for (let row = 0; row < divisions; ++row) {\n    if (row % 2 === 0) {\n      for (let i = 0; i <= divisions; ++i) {\n        if (i !== 0) {\n          indexData.push(row * (divisions + 1) + i);\n        }\n        indexData.push((row + 1) * (divisions + 1) + i);\n      }\n    } else {\n      for (let i = 0; i <= divisions; ++i) {\n        if (i !== 0) {\n          indexData.push((row + 1) * (divisions + 1) - (i + 1));\n        }\n        indexData.push((row + 2) * (divisions + 1) - (i + 1));\n      }\n    }\n  }\n\n  //indexData = [0,4,1,5,2,6,3,7,11,6,10,5,9,4,8,12,9,13,10,14,11,15];\n  buffers.trianglesVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffers.trianglesVerticesBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  buffers.trianglesVerticesBuffer.itemSize = 3;\n  buffers.trianglesVerticesBuffer.numItems = vertexPositionData.length / 3;\n  buffers.vertexIndexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.vertexIndexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  buffers.vertexIndexBuffer.itemSize = 3;\n  buffers.vertexIndexBuffer.numItems = indexData.length;\n}\n\nexport function createGridMidPoint(gl, buffers, size = 1.0, power = 3) {\n  const divisions = Math.pow(2.0, power);\n  const segmentSize = size / divisions;\n  const vertexPositionData = [];\n\n  for (let i = 0; i <= divisions; ++i) {\n    for (let j = 0; j <= divisions; ++j) {\n      vertexPositionData.push(i * segmentSize - 0.5 * size);\n      vertexPositionData.push(0.0);\n      vertexPositionData.push(j * segmentSize - 0.5 * size);\n    }\n  }\n\n  //seed the corners\n  vertexPositionData[(0 + 0 * (divisions + 1)) * 3 + 1] = 1.5;\n  vertexPositionData[(divisions + 0 * (divisions + 1)) * 3 + 1] = 3.5;\n  vertexPositionData[(0 + divisions * (divisions + 1)) * 3 + 1] = 2.0;\n  vertexPositionData[(divisions + divisions * (divisions + 1)) * 3 + 1] = 1.0;\n  midpointDisplacement(\n    vertexPositionData,\n    [0, 0],\n    [divisions, 0],\n    [0, divisions],\n    [divisions, divisions],\n    divisions, 0\n  );\n\n  let indexData = [0];\n  for (let row = 0; row < divisions; ++row) {\n    if (row % 2 === 0) {\n      for (let i = 0; i <= divisions; ++i) {\n        if (i !== 0) {\n          indexData.push(i + row * (divisions + 1));\n        }\n        indexData.push(i + (row + 1) * (divisions + 1));\n      }\n    } else {\n      for (let i = 0; i <= divisions; ++i) {\n        if (i !== 0) {\n          indexData.push(-(i + 1) + (row + 1) * (divisions + 1));\n        }\n        indexData.push(-(i + 1) + (row + 2) * (divisions + 1));\n      }\n    }\n  }\n\n  buffers.trianglesVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffers.trianglesVerticesBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  buffers.trianglesVerticesBuffer.itemSize = 3;\n  buffers.trianglesVerticesBuffer.numItems = vertexPositionData.length / 3;\n  buffers.vertexIndexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.vertexIndexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  buffers.vertexIndexBuffer.itemSize = 3;\n  buffers.vertexIndexBuffer.numItems = indexData.length;\n}\n\nfunction midpointDisplacement(vertexPositionData, tl, tr, bl, br, divisions, iteration) {\n  if ((tl[0] + 1) === br[0] || (tl[1] + 1) === br[1]) {\n    return;\n  }\n\n  //array indices\n  const midpoint = [\n    (tl[0] + br[0]) / 2,\n    (tl[1] + br[1]) / 2\n  ];\n\n  const leftMp = [\n    tl[0],\n    (tl[1] + bl[1]) / 2\n  ];\n  const rightMp = [\n    tr[0],\n    (tr[1] + br[1]) / 2\n  ];\n  const topMp = [\n    (tl[0] + tr[0]) / 2,\n    tl[1]\n  ];\n  const bottomMp = [\n    (bl[0] + br[0]) / 2,\n    bl[1]\n  ];\n\n  //current height values\n  const tlHeight = vertexPositionData[(tl[0] + tl[1] * (divisions + 1)) * 3 + 1];\n  const trHeight = vertexPositionData[(tr[0] + tr[1] * (divisions + 1)) * 3 + 1];\n  const blHeight = vertexPositionData[(bl[0] + bl[1] * (divisions + 1)) * 3 + 1];\n  const brHeight = vertexPositionData[(br[0] + br[1] * (divisions + 1)) * 3 + 1];\n\n  //computer five new points\n  const topValue = (tlHeight + trHeight) / 2.0;\n  vertexPositionData[(topMp[0] + topMp[1] * (divisions + 1)) * 3 + 1] = topValue;\n  const bottomValue = (blHeight + brHeight) / 2.0;\n  vertexPositionData[(bottomMp[0] + bottomMp[1] * (divisions + 1)) * 3 + 1] = bottomValue;\n\n  const leftValue = (tlHeight + blHeight) / 2.0;\n  vertexPositionData[(leftMp[0] + leftMp[1] * (divisions + 1)) * 3 + 1] = leftValue;\n  const rightValue = (trHeight + brHeight) / 2.0;\n  vertexPositionData[(rightMp[0] + rightMp[1] * (divisions + 1)) * 3 + 1] = rightValue;\n  //midpoint has random term\n  vertexPositionData[(midpoint[0] + midpoint[1] * (divisions + 1)) * 3 + 1] = (tlHeight + trHeight + blHeight + brHeight) / 4.0\n    + (-0.5 + Math.random()) * Math.pow(0.65, iteration - 2.0);\n  //repeat with four quads\n  midpointDisplacement(vertexPositionData, tl, topMp, leftMp, midpoint, divisions, iteration + 1);\n  midpointDisplacement(vertexPositionData, topMp, tr, midpoint, rightMp, divisions, iteration + 1);\n  midpointDisplacement(vertexPositionData, leftMp, midpoint, bl, bottomMp, divisions, iteration + 1);\n  midpointDisplacement(vertexPositionData, midpoint, rightMp, bottomMp, br, divisions, iteration + 1);\n}\n\nfunction calculateFlattenedVertices(origVertices, indices) {\n  const vertices = [];\n  for (let i = 0; i < indices.length; ++i) {\n    const a = indices[i] * 3;\n    vertices.push(origVertices[a]);\n    vertices.push(origVertices[a + 1]);\n    vertices.push(origVertices[a + 2]);\n  }\n  return vertices;\n}\n\nfunction calculatePerFaceNormals(origNormals, indices) {\n  const normals = [];\n  for (let i = 0; i < indices.length; i += 3) {\n    const a = indices[i] * 3;\n    const b = indices[i + 1] * 3;\n    const c = indices[i + 2] * 3;\n\n    const n1 = new Vector3(origNormals[a], origNormals[a + 1], origNormals[a + 2]);\n    const n2 = new Vector3(origNormals[b], origNormals[b + 1], origNormals[b + 2]);\n    const n3 = new Vector3(origNormals[c], origNormals[c + 1], origNormals[c + 2]);\n\n    const nx = (n1.x + n2.x + n3.x) / 3;\n    const ny = (n1.y + n2.y + n3.y) / 3;\n    const nz = (n1.z + n2.z + n3.z) / 3;\n\n    const v3 = new Vector3(nx, ny, nz);\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n  }\n  return normals;\n}\n","import Vector3 from \"../../../../src/pg/math/vector3\";\n\nexport class SphereObject {\n  constructor(properties) {\n    properties = Object.assign({}, {\n      radius: 1.0,\n      position: new Vector3(0.0, 0.0, 0.0),\n      velocity: new Vector3(0.0, 0.0, 0.0),\n      acceleration: new Vector3(0.0, 0.0, 0.0),\n    }, properties);\n\n    this.radius = properties.radius;\n    this.position = properties.position;\n    this.velocity = properties.velocity;\n    this.acceleration = properties.acceleration;\n    this.vboIndex = properties.vboIndex;\n    this.totalVelocity = 0.0;\n  }\n}\n\nexport class WallObject {\n  constructor(properties) {\n    properties = Object.assign({}, {\n      startX: 0.0,\n      startY: 0.0,\n      endX: 0.0,\n      endY: 0.0,\n    }, properties);\n\n    this.slope = 0.0;\n    if (\n      (properties.endX - properties.startX) > 0.0001 ||\n      (properties.endX - properties.startX) < -0.001\n    ) {\n      this.slope = (properties.endY - properties.startY) / (properties.endX - properties.startX);\n    }\n    this.startX = properties.startX;\n    this.startY = properties.startY;\n    this.endX = properties.endX;\n    this.endY = properties.endY;\n\n    const a = [properties.startX - properties.endX, properties.startY - properties.endY];\n    this.angle = 0.0;\n    this.angle = Math.atan2(a[1], a[0]);\n  }\n}\n\nexport class Particle {\n  constructor(\n    position = [\n      ((Math.random() - .5) * .1),\n      ((Math.random() - .5) * .1),\n      ((Math.random() - .5) * .1),\n    ],\n    color = [1.0, 0.0, 0.0, 0.5]\n  ) {\n\n    this.position = position;\n    this.color = color;\n\n    this.velocity = [\n      ((Math.random() - .5) * .1),\n      ((Math.random() - .5) * .1),\n      ((Math.random() - .5) * .1),\n    ];\n    if (\n      (Math.abs(this.velocity[0]) < 0.01) &&\n      (Math.abs(this.velocity[1]) < 0.01) &&\n      (Math.abs(this.velocity[2]) < 0.01)\n    ) {\n      //ensure particle is not stagnant\n      this.velocity[0] = 0.1;\n    }\n    this.age = 0;\n    this.lifespan = 20;\n    this.size = 1.0;\n  }\n\n  update() {\n    this.position[0] += (0.1 * this.velocity[0]);\n    this.position[1] += (0.1 * this.velocity[1]);\n    this.position[2] += (0.1 * this.velocity[2]);\n\n    const x = Math.abs(this.position[0]);\n    const y = Math.abs(this.position[1]);\n    const z = Math.abs(this.position[2]);\n\n    const distance = x * x + y * y + z * z;\n\n    if (distance > 4) {\n      this.position = [\n        (Math.random() * 2.0) - 1.0,\n        (Math.random() * 2.0) - 1.0,\n        (Math.random() * 2.0) - 1.0\n      ];\n      this.velocity = [\n        (Math.random() * 2.0) - 1.0,\n        (Math.random() * 2.0) - 1.0,\n        (Math.random() * 2.0) - 1.0\n      ];\n      if (this.age < 10) {\n        this.color = [1.0, 1.0, 1.0, 0.75];\n      } else if (this.age < this.lifespan) {\n        this.color = [0.0, 0.0, 1.0, 0.75];\n      } else {\n        this.color = [1.0, 1.0, 1.0, 0.0];\n      }\n      this.age++;\n    }\n  }\n}\n","import {\n  setupPlaneMesh,\n  setupSphereMesh\n} from \"./utils/graphics/webgl/mesh-utils\";\nimport { SphereObject } from \"./utils/graphics/webgl/object-utils\";\nimport Vector3 from \"../src/pg/math/vector3\";\n\nlet gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet vertexNormalAttribute = null;\nlet vertexColorAttribute = null;\nlet trianglesVerticeBuffers = [];\nlet trianglesNormalBuffers = [];\nlet trianglesColorBuffers = [];\nlet vertexIndexBuffers = [];\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nlet start = [];\nlet angleX = 0;\nlet angleY = 0;\nlet paused = false;\n\nconst SHADER = {\n  flat: {\n    vertexShader: flatVertexShaderSource(),\n    fragmentShader: flatFragmentShaderSource()\n  }\n};\n\nconst sceneElements = [];\nlet zoom = 0.2;\n\nlet angle = 0.0;\nlet fire = false;\n\nconst GROUND_Y = -1.0;\nconst RECTANGLE_LENGTH = 4.0;\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  console.log(evt.keyCode);\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n    case 38: //'up'\n      ++angle;\n      break;\n    case 40: //'dwon'\n      --angle;\n      break;\n    case 70: // 'f'\n      fire = true;\n      console.log(\"fire!\");\n      sceneElements[0].position = new Vector3(0.0, 0.0, 0.0);\n      sceneElements[0].velocity = new Vector3(Math.cos(angle * .1), Math.sin(angle * .1), 0.0);\n      break;\n    default:\n      break;\n  }\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  initEvents();\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    setupMeshes();\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        drawScene();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction initEvents() {\n  canvas.addEventListener('mousedown', (e) => {\n    start = [e.pageX, e.pageY];\n\n    const mouseMoveHandler = (e) => {\n      const x = e.pageX - start[0];\n      const y = e.pageY - start[1];\n\n      // start update\n      start[0] = e.pageX;\n      start[1] = e.pageY;\n\n      angleX += x;\n      angleY += y;\n    };\n    const mouseUpHandler = () => {\n      document.removeEventListener('mousemove', mouseMoveHandler);\n      document.removeEventListener('mouseup', mouseUpHandler);\n    };\n\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n  });\n\n  const adjustZoom = (delta) => {\n    if (delta > 0) {\n      zoom += 1;\n    } else {\n      zoom -= 0.1;\n      if (zoom < 0.01) {\n        zoom = 0.1;\n      }\n    }\n  };\n  canvas.addEventListener('mousewheel', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    adjustZoom(e.wheelDelta);\n  });\n  canvas.addEventListener('DOMMouseScroll', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    adjustZoom(e.originalEvent.detail * -0.1);\n  });\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.7, 0.7, 0.7, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n}\n\nfunction initShaders() {\n  createProgram('flat');\n}\n\nfunction createProgram(type) {\n  // create program\n  glProgram = gl.createProgram();\n  attachShader(glProgram, type);\n  // use program\n  gl.useProgram(glProgram);\n  getMatrixUniforms();\n}\n\nfunction attachShader(glProgram, type) {\n  // get shader source\n  const vsSource = SHADER[type].vertexShader;\n  const fsSource = SHADER[type].fragmentShader;\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction setupMeshes() {\n\n  setupPlaneMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    0,\n    {\n      translation: [0.0, GROUND_Y, 0.0],\n    }\n  );\n  addBox(1);\n\n  const radius = 1;\n  setupSphereMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    2,\n    {\n      color: [1.0, 0.0, 0.0, 0.9],\n      radius: radius,\n    }\n  );\n\n  sceneElements.push(new SphereObject({\n    vboIndex: 2,\n    radius: radius,\n    position: new Vector3(0.0, 0.0, 0.0),\n    acceleration: new Vector3(0.0, -0.01, 0.0)\n  }));\n\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, \"aVertexPosition\");\n  vertexColorAttribute = gl.getAttribLocation(glProgram, \"aVertexColor\");\n  vertexNormalAttribute = gl.getAttribLocation(glProgram, \"aVertexNormal\");\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.enableVertexAttribArray(vertexColorAttribute);\n  gl.enableVertexAttribArray(vertexNormalAttribute);\n}\n\nfunction drawScene() {\n  for (let i = 0; i < vertexIndexBuffers.length; ++i) {\n    mat4.identity(mvMatrix);\n    mat4.translate(mvMatrix, mvMatrix, [-10.0, -1.0, -30.0]);\n    mat4.rotate(mvMatrix, mvMatrix, angleX * 2 * Math.PI / 180.0, [0.0, 1.0, 0.0]);\n    mat4.rotate(mvMatrix, mvMatrix, angleY * 2 * Math.PI / 180.0, [1.0, 0.0, 0.0]);\n    mat4.scale(mvMatrix, mvMatrix, [zoom, zoom, zoom]);\n\n    if (i === 1) {\n      mat4.translate(mvMatrix, mvMatrix, [-RECTANGLE_LENGTH * .1, 3.0, 0.0]);\n      mat4.rotate(mvMatrix, mvMatrix, angle * .1, [0.0, 0.0, 1.3]);\n    } else if (i === 0) {\n      mat4.rotate(mvMatrix, mvMatrix, -0.3, [-0.3, 0.0, 0.2]);\n      mat4.rotate(mvMatrix, mvMatrix, 90, [0.0, 1.0, 0.0]);\n    } else if (i === 2) {\n      mat4.translate(mvMatrix, mvMatrix, [\n        sceneElements[0].position.x + Math.cos(angle * .1),\n        sceneElements[0].position.y + 3.0 + sceneElements[0].radius + Math.sin(angle * .1),\n        sceneElements[0].position.z + 0.0 + sceneElements[0].radius]\n      );\n\n      if (fire) {\n        sceneElements[0].velocity.y += sceneElements[0].acceleration.y;\n        sceneElements[0].position.x += sceneElements[0].velocity.x;\n        sceneElements[0].position.y += sceneElements[0].velocity.y;\n        sceneElements[0].position.z += sceneElements[0].velocity.z;\n      }\n    }\n\n    const invertedMatrix = mat3.create();\n    mat3.fromMat4(invertedMatrix, mvMatrix);\n    mat3.invert(normalMatrix, invertedMatrix);\n    mat3.transpose(normalMatrix, normalMatrix);\n    setMatrixUniforms();\n\n    if (i === 1) {\n      gl.disableVertexAttribArray(vertexColorAttribute);\n      gl.vertexAttrib4f(vertexColorAttribute, 1.0, 0.9, 0.7, 1.0);\n    } else {\n      gl.enableVertexAttribArray(vertexColorAttribute);\n      gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[i]);\n      gl.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[i]);\n    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[i]);\n    gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[i]);\n    gl.drawElements(gl.TRIANGLES, vertexIndexBuffers[i].numItems, gl.UNSIGNED_SHORT, 0);\n  }\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.normalMatrixUniform = gl.getUniformLocation(glProgram, \"uNormalMatrix\");\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n  gl.uniformMatrix3fv(glProgram.normalMatrixUniform, false, normalMatrix);\n}\n\nfunction flatVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform mat4 uPMatrix;    \n    uniform mat4 uMVMatrix;\n    uniform mat3 uNormalMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 L;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vec3 pointLightPosition = vec3(1.0, 2.0, -1.0);\n      vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - aVertexPosition.xyz));\n      vec3 ambientColor = vec3(0.1, 0.1, 0.1);\n      \n      L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      N = uNormalMatrix * aVertexNormal;\n      \n      vColor = aVertexColor;\n    }\n  `;\n}\n\nfunction flatFragmentShaderSource() {\n  return `\n    varying highp vec3 vColor;\n    varying highp vec3 N;\n    varying highp vec3 L;\n    \n    void main(void) {\n      highp float lambert = max(dot(normalize(N), normalize(L)), 0.0);\n      gl_FragColor = vec4(vColor * lambert, 1.0);\n    }\n  `;\n}\n\nfunction addBox(n) {\n  //8 vertices\n  const vertexPositionData = [\n    //0-3\n    0, 0, 0,\n    RECTANGLE_LENGTH, 0, 0,\n    RECTANGLE_LENGTH, RECTANGLE_LENGTH * .5, 0,\n    0, RECTANGLE_LENGTH * .5, 0,\n\n    //4-7\n    0, 0, RECTANGLE_LENGTH * .5,\n    RECTANGLE_LENGTH, 0, RECTANGLE_LENGTH * .5,\n    RECTANGLE_LENGTH, RECTANGLE_LENGTH * .5, RECTANGLE_LENGTH * .5,\n    0, RECTANGLE_LENGTH * .5, RECTANGLE_LENGTH * .5,\n  ];\n  //10 triangles, 2 per face, 1 face not drawn\n  const indexData = [\n    0, 1, 2,\t//front\n    0, 2, 3,\n    0, 3, 7,\t//left\n    0, 7, 4,\n    2, 7, 3,\t//top\n    2, 6, 7,\n    4, 6, 5,\t//back\n    4, 7, 6,\n    1, 0, 4,\t//bottom\n    1, 4, 5,\n  ];\n  const normalData = calculateNormals(vertexPositionData, indexData);\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nfunction calculateNormals(vertices, indices) {\n  const normals = [];\n\n  for (let i = 0; i < indices.length; i += 3) {\n    const a = indices[i];\n    const b = indices[i + 1];\n    const c = indices[i + 2];\n    //normal is the cross product\n    const v1 = [\n      vertices[a * 3] - vertices[b * 3],\n      vertices[a * 3 + 1] - vertices[b * 3 + 1],\n      vertices[a * 3 + 2] - vertices[b * 3 + 2]\n    ];\n    const v2 = [\n      vertices[a * 3] - vertices[c * 3],\n      vertices[a * 3 + 1] - vertices[c * 3 + 1],\n      vertices[a * 3 + 2] - vertices[c * 3 + 2]\n    ];\n    const cross = [\n      v1[1] * v2[2] - v1[0] * v2[1],\n      v1[2] * v2[0] - v1[0] * v2[2],\n      v1[0] * v2[1] - v1[1] * v2[0]\n    ];\n    //same value for each of the three vertices\n    normals.push.apply(normals, cross);\n    normals.push.apply(normals, cross);\n    normals.push.apply(normals, cross);\n  }\n  return normals;\n}\n"],"sourceRoot":""}