{"version":3,"sources":["webpack:///./webgl-triangular-prism.js"],"names":["let","gl","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","trianglesVerticesBuffer","vertexColorAttribute","trianglesColorBuffer","triangleVerticesIndexBuffer","pMatrix","mat4","create","mvMatrix","angle","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","getContext","e","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","triangleVertexIndices","numberVertexPoints","length","ELEMENT_ARRAY_BUFFER","Uint16Array","setupBuffers","pMatrixUniform","getUniformLocation","mvMatrixUniform","animLoop","clearColor","clear","COLOR_BUFFER_BIT","enable","DEPTH_TEST","viewport","perspective","identity","translate","rotate","uniformMatrix4fv","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","requestAnimationFrame"],"mappings":"2EAAAA,IAAIC,EAAK,KACLC,EAAS,KACTC,EAAY,KACZC,EAAY,KACZC,EAAiB,KACjBC,EAAe,KAEfC,EAA0B,KAC1BC,EAA0B,KAC1BC,EAAuB,KACvBC,EAAuB,KACvBC,EAA8B,KAE9BC,EAAUC,KAAKC,SACfC,EAAWF,KAAKC,SAEhBE,EAAQ,EAoEZ,SAASC,EAAWC,EAAQC,GAE1BC,IAAMC,EAASpB,EAAGqB,aAAaH,GAQ/B,OAPAlB,EAAGsB,aAAaF,EAAQH,GACxBjB,EAAGuB,cAAcH,GAEZpB,EAAGwB,mBAAmBJ,EAAQpB,EAAGyB,iBACpCC,MAAM,2BAA2B1B,EAAG2B,iBAAiBP,IAGhDA,EA5ETQ,OAAOC,iBAAiB,OAExB,WACE5B,EAAS6B,SAASC,cAAc,WAChC7B,EAAY4B,SAASC,cAAc,cACnC9B,EAAO+B,MAAQ9B,EAAU+B,YACzBhC,EAAOiC,OAAShC,EAAUiC,aAE1B,IACEnC,EAAKC,EAAOmC,WAAW,UAAYnC,EAAOmC,WAAW,sBACrD,MAAOC,GACPC,QAAQC,MAAMF,GAGZrC,KA2BN,WAEEmB,IAAMqB,EAqCC,wUApCDC,EAqDC,yGAlDPpC,EAAeW,EAAWwB,EAAUxC,EAAG0C,eACvCtC,EAAiBY,EAAWyB,EAAUzC,EAAG2C,iBAGzCxC,EAAYH,EAAG4C,gBAGf5C,EAAG6C,aAAa1C,EAAWE,GAC3BL,EAAG6C,aAAa1C,EAAWC,GAC3BJ,EAAG8C,YAAY3C,GAEVH,EAAG+C,oBAAoB5C,EAAWH,EAAGgD,cACxCtB,MAAM,4CAIR1B,EAAGiD,WAAW9C,GAhDZ+C,GA2FJ,WAmBEzC,EAAuBT,EAAGmD,eAC1BnD,EAAGoD,WAAWpD,EAAGqD,aAAc5C,GAC/BT,EAAGsD,WAAWtD,EAAGqD,aAAc,IAAIE,cAlBjC,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EAGV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,IAK6DvD,EAAGwD,aAqB5EjD,EAA0BP,EAAGmD,eAC7BnD,EAAGoD,WAAWpD,EAAGqD,aAAc9C,GAC/BP,EAAGsD,WAAWtD,EAAGqD,aAAc,IAAIE,cAjBjC,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,GAAK,EAAK,EACV,IAAK,EAAK,EACV,EAAK,EAAK,EAGV,EAAK,GAAM,EACX,EAAK,GAAM,EACX,EAAK,GAAM,EACX,GAAK,GAAM,EACX,IAAK,GAAM,EACX,EAAK,GAAM,IAIsDvD,EAAGwD,aAItErC,IAAMsC,GAEJ,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EAGN,EAAG,EAAG,EACN,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,GAAI,GAGP,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAGN,EAAG,EAAG,EACN,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,GAAI,GAGP,EAAG,EAAG,EACN,EAAG,EAAG,IAER/C,EAA8BV,EAAGmD,gBACLO,mBAAqBD,EAAsBE,OACvE3D,EAAGoD,WAAWpD,EAAG4D,qBAAsBlD,GACvCV,EAAGsD,WAAWtD,EAAG4D,qBAAsB,IAAIC,YAAYJ,GAAwBzD,EAAGwD,aA1KhFM,GA6LF3D,EAAU4D,eAAiB/D,EAAGgE,mBAAmB7D,EAAW,YAC5DA,EAAU8D,gBAAkBjE,EAAGgE,mBAAmB7D,EAAW,aA5L3D,SAAU+D,IAWZlE,EAAGmE,WAAW,GAAK,GAAK,GAAK,GAC7BnE,EAAGoE,MAAMpE,EAAGqE,kBACZrE,EAAGsE,OAAOtE,EAAGuE,YAEbvE,EAAGwE,SAAS,EAAG,EAAGvE,EAAO+B,MAAO/B,EAAOiC,QACvCtB,KAAK6D,YAAY9D,EAAS,GAAIV,EAAO+B,MAAQ/B,EAAOiC,OAAQ,GAAK,KACjEtB,KAAK8D,SAAS5D,GACdF,KAAK+D,UAAU7D,EAAUA,IAAY,GAAM,GAAM,IACjDF,KAAKgE,OAAO9D,EAAUA,EAAUC,GAAQ,EAAK,EAAK,IAClDA,GAAS,IA4KTf,EAAG6E,iBAAiB1E,EAAU4D,gBAAgB,EAAOpD,GACrDX,EAAG6E,iBAAiB1E,EAAU8D,iBAAiB,EAAOnD,GArBtDR,EAA0BN,EAAG8E,kBAAkB3E,EAAW,mBAC1DH,EAAG+E,wBAAwBzE,GAC3BN,EAAGoD,WAAWpD,EAAGqD,aAAc9C,GAC/BP,EAAGgF,oBAAoB1E,EAAyB,EAAGN,EAAGiF,OAAO,EAAO,EAAG,GAEvEzE,EAAuBR,EAAG8E,kBAAkB3E,EAAW,gBACvDH,EAAG+E,wBAAwBvE,GAC3BR,EAAGoD,WAAWpD,EAAGqD,aAAc5C,GAC/BT,EAAGgF,oBAAoBxE,EAAsB,EAAGR,EAAGiF,OAAO,EAAO,EAAG,GAEpEjF,EAAGoD,WAAWpD,EAAG4D,qBAAsBlD,GACvCV,EAAGkF,aAAalF,EAAGmF,UAAWzE,EAA4BgD,mBAAoB1D,EAAGoF,eAAgB,GAnL7FC,sBAAsBnB,GAJxB","file":"webgl-triangular-prism.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet trianglesVerticesBuffer = null;\nlet vertexColorAttribute = null;\nlet trianglesColorBuffer = null;\nlet triangleVerticesIndexBuffer = null;\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\n\nlet angle = 0.0;\n\nwindow.addEventListener('load', initWebGL);\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    setupBuffers();\n    getMatrixUniforms();\n    (function animLoop() {\n      setupWebGL();\n      setMatrixUniforms();\n      drawScene();\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.5, 0.1, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n  mat4.identity(mvMatrix);\n  mat4.translate(mvMatrix, mvMatrix, [-1.0, -1.0, -7.0]);\n  mat4.rotate(mvMatrix, mvMatrix, angle, [0.0, 1.0, 0.0]);\n  angle += 0.01;\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n\n    uniform mat4 uPMatrix;    \n    uniform mat4 uMVMatrix;\n    \n    varying highp vec4 vColor;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      vColor = vec4(aVertexColor, 1.0);\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp vec4 vColor;\n    \n    void main(void) {\n      gl_FragColor = vColor;\n    }\n  `;\n}\n\nfunction setupBuffers() {\n  const triangleVerticesColors = [\n    // front face\n    0.0, 0.0, 1.0,\n    1.0, 1.0, 1.0,\n    0.0, 0.0, 1.0,\n    0.0, 0.0, 1.0,\n    0.0, 0.0, 1.0,\n    1.0, 1.0, 1.0,\n\n    // real face\n    0.0, 1.0, 1.0,\n    1.0, 1.0, 1.0,\n    0.0, 1.0, 1.0,\n    0.0, 1.0, 1.0,\n    0.0, 1.0, 1.0,\n    1.0, 1.0, 1.0,\n  ];\n\n  trianglesColorBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVerticesColors), gl.STATIC_DRAW);\n\n  // 12 vertices\n  const triangleVertices = [\n    // front face\n    // bottom left to right, to top\n    0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0,\n    2.0, 0.0, 0.0,\n    0.5, 1.0, 0.0,\n    1.5, 1.0, 0.0,\n    1.0, 2.0, 0.0,\n\n    // rear face\n    0.0, 0.0, -2.0,\n    1.0, 0.0, -2.0,\n    2.0, 0.0, -2.0,\n    0.5, 1.0, -2.0,\n    1.5, 1.0, -2.0,\n    1.0, 2.0, -2.0,\n  ];\n  trianglesVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVertices), gl.STATIC_DRAW);\n\n  // setup vertices buffer\n  // 18 triangles\n  const triangleVertexIndices = [\n    // front face\n    0, 1, 3,\n    1, 3, 4,\n    1, 2, 4,\n    3, 4, 5,\n\n    // rear face\n    6, 7, 9,\n    7, 9, 10,\n    7, 8, 10,\n    9, 10, 11,\n\n    // left face\n    0, 3, 6,\n    3, 6, 9,\n    3, 5, 9,\n    5, 9, 11,\n\n    // right face\n    2, 4, 8,\n    4, 8, 10,\n    4, 5, 10,\n    5, 10, 11,\n\n    // bottom face\n    0, 6, 8,\n    8, 2, 0,\n  ];\n  triangleVerticesIndexBuffer = gl.createBuffer();\n  triangleVerticesIndexBuffer.numberVertexPoints = triangleVertexIndices.length;\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, triangleVerticesIndexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(triangleVertexIndices), gl.STATIC_DRAW);\n}\n\nfunction drawScene() {\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  vertexColorAttribute = gl.getAttribLocation(glProgram, 'aVertexColor');\n  gl.enableVertexAttribArray(vertexColorAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffer);\n  gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, triangleVerticesIndexBuffer);\n  gl.drawElements(gl.TRIANGLES, triangleVerticesIndexBuffer.numberVertexPoints, gl.UNSIGNED_SHORT, 0);\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n}\n"],"sourceRoot":""}