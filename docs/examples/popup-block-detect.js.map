{"version":3,"sources":["webpack:///./popup-block-detect.js"],"names":["document","querySelector","addEventListener","const","popupWindow","window","open","setTimeout","poppedWindow","let","result","closed","test","err","hasPopupBlocker","alert"],"mappings":"2EAAYA,SAASC,cAAc,QAE/BC,iBAAiB,QAAS,WAC5BC,IAAMC,EAAcC,OAAOC,KAAK,yBAChCC,WAAU,YAQZ,SAAyBC,GACvBC,IAAIC,GAAS,EAEb,IAGIA,OAF0B,IAAjBF,KAIFA,IAAgBA,EAAaG,WAO7BH,IAAgBA,EAAaI,MAStC,MAAOC,IAKT,OAAOH,GApCAI,CAAgBV,IAGrBW,MAAM,sBACL","file":"popup-block-detect.js","sourcesContent":["const btn = document.querySelector('#btn');\n\nbtn.addEventListener('click', function () {\n  const popupWindow = window.open('https://www.naver.com');\n  setTimeout(() => {\n    if (!hasPopupBlocker(popupWindow)) {\n      return;\n    }\n    alert('Popup is blocked!');\n  }, 100);\n});\n\nfunction hasPopupBlocker(poppedWindow) {\n  let result = false;\n\n  try {\n    if (typeof poppedWindow === 'undefined') {\n      // Safari with popup blocker... leaves the popup window handle undefined\n      result = true;\n    }\n    else if (poppedWindow && poppedWindow.closed) {\n      // This happens if the user opens and closes the client window...\n      // Confusing because the handle is still available, but it's in a \"closed\" state.\n      // We're not saying that the window is not being blocked, we're just saying\n      // that the window has been closed before the test could be run.\n      result = false;\n    }\n    else if (poppedWindow && poppedWindow.test) {\n      // This is the actual test. The client window should be fine.\n      result = false;\n    }\n    else {\n      // Else we'll assume the window is not OK\n      result = true;\n    }\n\n  } catch (err) {\n    //if (console) {\n    //    console.warn(\"Could not access popup window\", err);\n    //}\n  }\n  return result;\n}\n"],"sourceRoot":""}