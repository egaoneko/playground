{"version":3,"sources":["webpack:///./canvas-circular-motion.js","webpack:///../src/pg/utils/math.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_pg_utils_math__WEBPACK_IMPORTED_MODULE_0__","canvas","document","querySelector","ctx","getContext","mouse","x","y","colorSet","bomb","bombDistance","addEventListener","event","Object","window","resize","Particle","velocity","radius","color","this","radians","Math","random","PI","opacity","const","distance","lastMouse","prototype","draw","lastPoint","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","update","cos","sin","let","particles","width","innerWidth","height","innerHeight","i","length","push","init","animate","fillStyle","fillRect","forEach","particle","requestAnimationFrame","randomInt","min","max","floor","rotate","angle","resolveCollision","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","d"],"mappings":"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","file":"canvas-circular-motion.js","sourcesContent":["import {randomInt} from '../src/pg/utils/math';\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\nconst mouse = {\n  x: 10,\n  y: 10\n};\nconst colorSet = [\n  '#8be9fd',\n  '#50fa7b',\n  '#ffb86c',\n  '#ff79c6',\n  '#bd93f9',\n  '#ff5555',\n  '#f1fa8c',\n];\nlet bomb = 0;\nlet bombDistance = 0;\n\ncanvas.addEventListener('mousemove', (event) => {\n  mouse.x = event.x;\n  mouse.y = event.y;\n});\n\ncanvas.addEventListener('click', () => {\n  bomb = randomInt(100, 500);\n});\n\nwindow.addEventListener('resize', () => {\n  resize();\n});\n\nclass Particle {\n  constructor(x, y, velocity, radius, color) {\n    this.x = x;\n    this.y = y;\n    this.velocity = velocity;\n    this.radius = radius;\n    this.color = color;\n    this.radians = Math.random() * Math.PI * 2;\n    this.opacity = 0;\n    const distance = randomInt(50, 120);\n    this.distance = {\n      x: distance,\n      y: distance\n    };\n    this.lastMouse = {\n      x,\n      y,\n    }\n  }\n\n  draw(lastPoint) {\n    ctx.beginPath();\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.radius;\n    ctx.moveTo(lastPoint.x, lastPoint.y);\n    ctx.lineTo(this.x, this.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  update() {\n    const lastPoint = {\n      x: this.x,\n      y: this.y\n    };\n\n    this.radians += this.velocity;\n\n    // Drag effect\n    this.lastMouse.x += (mouse.x - this.lastMouse.x) * 0.05;\n    this.lastMouse.y += (mouse.y - this.lastMouse.y) * 0.05;\n\n    // Circular motion\n    this.x = this.lastMouse.x + Math.cos(this.radians) * (this.distance.x + bombDistance);\n    this.y = this.lastMouse.y + Math.sin(this.radians) * (this.distance.y + bombDistance);\n\n    this.draw(lastPoint);\n  }\n}\n\nlet particles = [];\n\nfunction init() {\n  mouse.x = canvas.width * 0.5;\n  mouse.y = canvas.height * 0.5;\n\n  particles = [];\n\n  for (let i = 0; i < 100; i++) {\n    const radius = randomInt(1, 2);\n    const x = canvas.width * 0.5;\n    const y = canvas.height * 0.5;\n    const velocity = randomInt(3, 8) * 0.01;\n    const color = colorSet[randomInt(0, colorSet.length)];\n\n    particles.push(new Particle(x, y, velocity, radius, color));\n  }\n}\n\nfunction resize() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\nfunction animate() {\n  ctx.fillStyle = 'rgba(40, 42, 54, 0.1)';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  particles.forEach(particle => particle.update());\n\n  if (bomb !== 0 && bombDistance > bomb) {\n    bomb = 0;\n  } else if (bomb > 0) {\n    bombDistance += 2;\n  } else if (bombDistance > bomb) {\n    bombDistance -= 1;\n  } else if (bombDistance < 0) {\n    bombDistance = 0;\n  }\n\n  requestAnimationFrame(animate);\n}\n\nresize();\ninit();\nanimate();\n","/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {boolean} success\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return false;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n  return true;\n}\n"],"sourceRoot":""}