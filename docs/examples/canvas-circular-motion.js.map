{"version":3,"sources":["webpack:///../src/pg/utils/math.js","webpack:///./canvas-circular-motion.js"],"names":["randomInt","min","max","Math","floor","random","rotate","velocity","angle","x","cos","y","sin","resolveCollision","particle","otherParticle","const","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","__webpack_require__","d","__webpack_exports__","r","_src_pg_utils_math__WEBPACK_IMPORTED_MODULE_0__","canvas","document","querySelector","ctx","getContext","mouse","colorSet","bomb","bombDistance","addEventListener","event","Object","window","resize","Particle","radius","color","this","radians","PI","opacity","distance","lastMouse","prototype","draw","lastPoint","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","update","let","particles","width","innerWidth","height","innerHeight","i","length","push","init","animate","fillStyle","fillRect","forEach","requestAnimationFrame"],"mappings":"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","file":"canvas-circular-motion.js","sourcesContent":["/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {boolean} success\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return false;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n  return true;\n}\n","import {randomInt} from '../src/pg/utils/math';\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\nconst mouse = {\n  x: 10,\n  y: 10\n};\nconst colorSet = [\n  '#8be9fd',\n  '#50fa7b',\n  '#ffb86c',\n  '#ff79c6',\n  '#bd93f9',\n  '#ff5555',\n  '#f1fa8c',\n];\nlet bomb = 0;\nlet bombDistance = 0;\n\ncanvas.addEventListener('mousemove', (event) => {\n  mouse.x = event.x;\n  mouse.y = event.y;\n});\n\ncanvas.addEventListener('click', () => {\n  bomb = randomInt(100, 500);\n});\n\nwindow.addEventListener('resize', () => {\n  resize();\n});\n\nclass Particle {\n  constructor(x, y, velocity, radius, color) {\n    this.x = x;\n    this.y = y;\n    this.velocity = velocity;\n    this.radius = radius;\n    this.color = color;\n    this.radians = Math.random() * Math.PI * 2;\n    this.opacity = 0;\n    const distance = randomInt(50, 120);\n    this.distance = {\n      x: distance,\n      y: distance\n    };\n    this.lastMouse = {\n      x,\n      y,\n    }\n  }\n\n  draw(lastPoint) {\n    ctx.beginPath();\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.radius;\n    ctx.moveTo(lastPoint.x, lastPoint.y);\n    ctx.lineTo(this.x, this.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  update() {\n    const lastPoint = {\n      x: this.x,\n      y: this.y\n    };\n\n    this.radians += this.velocity;\n\n    // Drag effect\n    this.lastMouse.x += (mouse.x - this.lastMouse.x) * 0.05;\n    this.lastMouse.y += (mouse.y - this.lastMouse.y) * 0.05;\n\n    // Circular motion\n    this.x = this.lastMouse.x + Math.cos(this.radians) * (this.distance.x + bombDistance);\n    this.y = this.lastMouse.y + Math.sin(this.radians) * (this.distance.y + bombDistance);\n\n    this.draw(lastPoint);\n  }\n}\n\nlet particles = [];\n\nfunction init() {\n  mouse.x = canvas.width * 0.5;\n  mouse.y = canvas.height * 0.5;\n\n  particles = [];\n\n  for (let i = 0; i < 100; i++) {\n    const radius = randomInt(1, 2);\n    const x = canvas.width * 0.5;\n    const y = canvas.height * 0.5;\n    const velocity = randomInt(3, 8) * 0.01;\n    const color = colorSet[randomInt(0, colorSet.length)];\n\n    particles.push(new Particle(x, y, velocity, radius, color));\n  }\n}\n\nfunction resize() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\nfunction animate() {\n  ctx.fillStyle = 'rgba(40, 42, 54, 0.1)';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  particles.forEach(particle => particle.update());\n\n  if (bomb !== 0 && bombDistance > bomb) {\n    bomb = 0;\n  } else if (bomb > 0) {\n    bombDistance += 2;\n  } else if (bombDistance > bomb) {\n    bombDistance -= 1;\n  } else if (bombDistance < 0) {\n    bombDistance = 0;\n  }\n\n  requestAnimationFrame(animate);\n}\n\nresize();\ninit();\nanimate();\n"],"sourceRoot":""}