{"version":3,"sources":["webpack:///../src/pg/utils/math.js","webpack:///./utils/common.js","webpack:///./utils/queue.js","webpack:///./utils/task-runner.js","webpack:///./task-runner.js"],"names":["randomInt","min","max","Math","floor","random","rotate","velocity","angle","x","cos","y","sin","resolveCollision","particle","otherParticle","const","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","__webpack_require__","d","__webpack_exports__","sleep","delay","start","Date","getTime","defer","deferred","promise","Promise","resolve","reject","Queue","this","store","front","end","queue_prototypeAccessors","size","get","enqueue","data","prototype","dequeue","peek","TASK_PRIORITY","ESSENTIAL","key","priority","CRITICAL","NORMAL","IDLE","task_runner_TaskRunner","EventEmitter","TaskRunner","super","_taskPriorities","Object","values","sort","a","b","_taskQueueMap","Map","forEach","p","set","queue","_running","requestAnimationFrame","run","bind","prototypeAccessors","status","map","enroll","task","has","Error","emit","taskStartTime","taskFinishTime","nextTask","_getTask","_processTask","window","performance","now","some","process","EventEmitter3","task_runner_Task","action","common","_initAction","args","let","r","apply","e","chart","taskRunner","Task","WorkerTask","concat","container","document","getElementById","width","clientWidth","height","clientHeight","canvas","ctx","getContext","chartUpdate","_","throttle","datasets","s","update","on","Chart","type","labels","label","backgroundColor","borderColor","borderWidth","options","scales","xAxes","ticks","beginAtZero","button","toLowerCase","addEventListener","promises","math","i","push","all","then","console","log","init","DEBUG"],"mappings":"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","file":"task-runner.js","sourcesContent":["/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {boolean} success\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return false;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n  return true;\n}\n","export function sleep(delay) {\n  const start = new Date().getTime();\n  while (new Date().getTime() < start + delay);\n}\n\nexport function defer() {\n  const deferred = {};\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n","export default class Queue {\n  get size() {\n    return this.end - this.front;\n  }\n\n  constructor() {\n    this.store = {};\n    this.front = 0;\n    this.end = 0;\n  }\n\n  enqueue(data) {\n    this.store[this.end] = data;\n    this.end++;\n  }\n\n  dequeue() {\n    if (this.front === this.end) {\n      return null;\n    }\n\n    const data = this.store[this.front];\n    delete this.store[this.front];\n    this.front++;\n    return data;\n  }\n\n  peek() {\n    if (this.size() === 0) {\n      return null;\n    }\n\n    return this.store[this.front];\n  }\n}\n","import Queue from \"./queue\";\nimport {defer} from \"./common\";\n\nconst EventEmitter = EventEmitter3;\n\nexport const TASK_PRIORITY = {\n  ESSENTIAL: {key: 'ESSENTIAL', priority: 0},\n  CRITICAL: {key: 'CRITICAL', priority: 1},\n  NORMAL: {key: 'NORMAL', priority: 2},\n  IDLE: {key: 'IDLE', priority: 3},\n};\n\nexport class TaskRunner extends EventEmitter {\n\n  get status() {\n    return this._taskPriorities.map(p => {\n      return {\n        priority: p,\n        queue: this._taskQueueMap.get(p.key).size\n      }\n    });\n  }\n\n  constructor() {\n    super();\n    this._taskPriorities = Object.values(TASK_PRIORITY).sort((a, b) => a.priority - b.priority);\n    this._taskQueueMap = new Map();\n    this._taskPriorities.forEach(p => this._taskQueueMap.set(p.key, new Queue()));\n    this._running = false;\n    requestAnimationFrame(this.run.bind(this));\n  }\n\n  enroll(priority, task) {\n    if (!this._taskQueueMap.has(priority.key)) {\n      throw new Error(`This priority is not exist: ${priority.key}`);\n    }\n\n    this._taskQueueMap.get(priority.key).enqueue(task);\n    this.emit('task:enroll', task);\n\n    return task.promise;\n  }\n\n  run(taskStartTime) {\n    let taskFinishTime;\n\n    do {\n      const nextTask = this._getTask();\n\n      if (!nextTask) {\n        break;\n      }\n\n      this._processTask(nextTask);\n\n      taskFinishTime = window.performance.now();\n    } while (taskFinishTime - taskStartTime < 2);\n\n    requestAnimationFrame(this.run.bind(this));\n  }\n\n  _getTask() {\n    let task = null;\n\n    this._taskPriorities.some(p => {\n      task = this._taskQueueMap.get(p.key).dequeue();\n      return !!task;\n    });\n\n    return task;\n  }\n\n  _processTask(task) {\n    task.process();\n    this.emit('task:process');\n  }\n}\n\nexport class Task {\n  constructor(action, ...args) {\n    const deferred = defer();\n    this._initAction(deferred, action, args);\n    this.promise = deferred.promise;\n  }\n\n  process() {\n    this.action();\n  }\n\n  _initAction(deferred, action, args) {\n    this.action = () => {\n      let r;\n      try {\n        r = action.apply(null, args);\n      } catch (e) {\n        deferred.reject(e);\n      }\n      deferred.resolve(r);\n    };\n  }\n}\n\nexport class WorkerTask extends Task {\n  constructor(action, ...args) {\n    super(action, ...args);\n  }\n\n  process() {\n    this.action();\n  }\n\n  _initAction(deferred, action, args) {\n    this.action = () => {\n      let r;\n      try {\n        r = action.apply(null, args);\n      } catch (e) {\n        deferred.reject(e);\n      }\n      deferred.resolve(r);\n    };\n  }\n}\n","import {sleep} from \"./utils/common\";\nimport {randomInt} from \"../src/pg/utils/math\";\nimport {Task, TASK_PRIORITY, TaskRunner} from \"./utils/task-runner\";\n\nlet chart;\nlet taskRunner;\n\nfunction init() {\n  const container = document.getElementById('container');\n  const width = container.clientWidth;\n  const height = container.clientHeight;\n\n  const canvas = document.getElementById('chart');\n  const ctx = canvas.getContext('2d');\n\n  canvas.width = width;\n  canvas.height = height;\n\n  const chartUpdate = _.throttle(() => {\n    chart.data.datasets[0].data = taskRunner.status.map(s => s.queue);\n    chart.update();\n  }, 100);\n  taskRunner = new TaskRunner();\n  taskRunner.on('task:enroll', chartUpdate);\n  taskRunner.on('task:process', chartUpdate);\n\n  chart = new Chart(ctx, {\n    type: 'horizontalBar',\n    data: {\n      labels: [\"ESSENTIAL\", \"CRITICAL\", \"NORMAL\", \"IDLE\"],\n      datasets: [{\n        label: '# of tasks',\n        data: taskRunner.status.map(s => s.queue),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255,99,132,1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(75, 192, 192, 1)',\n        ],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      scales: {\n        xAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    }\n  });\n\n  Object.values(TASK_PRIORITY).forEach(p => {\n    const button = document.getElementById(p.key.toLowerCase());\n\n    if (!button) {\n      return;\n    }\n\n    button.addEventListener('click', () => {\n      const promises = [];\n      const size = randomInt(100, 1000);\n      for (let i = 0; i < size; i++) {\n        promises.push(taskRunner.enroll(p, getTask()));\n      }\n      Promise.all(promises).then(() => console.log(`${p.key} finished`))\n    });\n  });\n\n  function getTask() {\n    return new Task(() => {\n      sleep(randomInt(1, 4))\n    });\n  }\n}\n\ninit();\n\nwindow.DEBUG = {\n  taskRunner: taskRunner\n};\n"],"sourceRoot":""}