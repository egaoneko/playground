{"version":3,"sources":["webpack:///./send-beacon.js"],"names":["const","putsReqUrl","Date","toISOString","split","putsReqInspectUrl","sendBeacon","url","data","navigator","sendXMLHttpRequest","async","client","XMLHttpRequest","open","setRequestHeader","send","document","querySelector","addEventListener","e","preventDefault","stopPropagation","location","href","alert","window","Error","handler","ref","formData","FormData","append","message","filename","lineno","colno","error","removeEventListener","request","status","console","log","responseText","ReportingObserver","reports","observer","forEach","report","JSON","stringify","body","disconnect","types","buffered","observe"],"mappings":"2EAAAA,IACMC,EAAa,kCADP,oBAAmB,IAAIC,MAAOC,cAAcC,MAAM,KAAK,IAE7DC,EAAuBJ,EAAU,WA2HvC,SAASK,EAAWC,EAAKC,GACvBC,UAAUH,WAAWC,EAAKC,GAG5B,SAASE,EAAmBH,EAAKC,EAAMG,GACrCX,IAAMY,EAAS,IAAIC,eACnBD,EAAOE,KAAK,OAAQP,EAAKI,GACzBC,EAAOG,iBAAiB,eAAgB,4BACxCH,EAAOI,KAAKR,GAjIdS,SAASC,cAAc,iBACpBC,iBAAiB,QAAO,SAAGC,GAC1BA,EAAEC,iBACFD,EAAEE,kBAEFC,SAASC,KAAOnB,IAGpBY,SAASC,cAAc,kBACpBC,iBAAiB,QAAO,WACjB,eAAgBV,WACpBgB,MAAM,2CAGRnB,EAAWL,EAAY,+BAA+BC,QAG1De,SAASC,cAAc,kBACpBC,iBAAiB,QAAO,WACjB,eAAgBV,WACpBgB,MAAM,2CAGRC,OAAOP,iBAAiB,eAAgB,WACtCb,EAAWL,EAAY,4CAA4CC,QAClE,KAGPe,SAASC,cAAc,kBACpBC,iBAAiB,QAAO,WACjB,eAAgBV,WACpBgB,MAAM,2CAGRC,OAAOP,iBAAiB,SAAU,WAChCb,EAAWL,EAAY,sCAAsCC,QAC5D,KAGPe,SAASC,cAAc,kBACpBC,iBAAiB,QAAO,WACjB,eAAgBV,WACpBgB,MAAM,2CAGRC,OAAOP,iBAAiB,WAAY,WAClCb,EAAWL,EAAY,wCAAwCC,QAC9D,KAGPe,SAASC,cAAc,kBACpBC,iBAAiB,QAAO,WAKvB,KAJM,eAAgBV,WACpBgB,MAAM,2CAGF,IAAIE,MAAM,uBAGpBV,SAASC,cAAc,kBACpBC,iBAAiB,QAAO,WACjB,eAAgBV,WACpBgB,MAAM,2CAGRzB,IAAM4B,EAAU,SAAUC,+DAClBC,EAAW,IAAIC,SACrBD,EAASE,OAAO,UAAWC,GAC3BH,EAASE,OAAO,WAAYE,GAC5BJ,EAASE,OAAO,SAAUG,GAC1BL,EAASE,OAAO,QAASI,GACzBN,EAASE,OAAO,QAASK,GAEzB/B,EAAWL,EAAY6B,GACvBJ,OAAOY,oBAAoB,QAASV,GAAS,IAK/C,MAFAF,OAAOP,iBAAiB,QAASS,GAAS,GAEpC,4CAA4C1B,OAGtDe,SAASC,cAAc,kBACpBC,iBAAiB,QAAO,WACjB,eAAgBV,WACpBgB,MAAM,2CAGRzB,IAAMuC,EAAU,IAAI1B,eACpB0B,EAAQzB,KAAK,MAAO,4BAA4B,GAChDyB,EAAQvB,KAAK,MACU,MAAnBuB,EAAQC,QACVC,QAAQC,IAAIH,EAAQI,cAGL,IAAIC,kBAAiB,SAAEC,EAASC,GAC/CD,EAAQE,QAAO,SAAEC,GACf1C,EAAWL,EAAYgD,KAAKC,UAAUF,EAAOG,MAAO,KAAM,eAAgB,aAAc,UAAW,kBAErGL,EAASM,eACPC,OAAQ,eAAgB,eAAgBC,UAAU,IAE7CC,YAKbtC,SAASC,cAAc,yBACpBC,iBAAiB,QAAO,WACvBO,OAAOP,iBAAiB,eAAgB,WACtCT,EAAmBT,EAAY,0DAA0DC,MAAU,KAClG,KAGPe,SAASC,cAAc,wBACpBC,iBAAiB,QAAO,WACvBO,OAAOP,iBAAiB,eAAgB,WACtCT,EAAmBT,EAAY,yDAAyDC,MAAU,KACjG","file":"send-beacon.js","sourcesContent":["const key = `smilecat-beacon-${new Date().toISOString().split('T')[0]}`;\nconst putsReqUrl = `https://putsreq.herokuapp.com/${key}`;\nconst putsReqInspectUrl = `${putsReqUrl}/inspect`;\n\ndocument.querySelector('#inspect-link')\n  .addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    location.href = putsReqInspectUrl;\n  });\n\ndocument.querySelector('#send-beacon-1')\n  .addEventListener('click', () => {\n    if (!('sendBeacon' in navigator)) {\n      alert('Not support sendBeacon in this browser.');\n    }\n\n    sendBeacon(putsReqUrl, `Just sent by a beacon! @${new Date()}`);\n  });\n\ndocument.querySelector('#send-beacon-2')\n  .addEventListener('click', () => {\n    if (!('sendBeacon' in navigator)) {\n      alert('Not support sendBeacon in this browser.');\n    }\n\n    window.addEventListener('beforeunload', function () {\n      sendBeacon(putsReqUrl, `Sent by a beacon when beforeunload! @${new Date()}`);\n    }, false);\n  });\n\ndocument.querySelector('#send-beacon-3')\n  .addEventListener('click', () => {\n    if (!('sendBeacon' in navigator)) {\n      alert('Not support sendBeacon in this browser.');\n    }\n\n    window.addEventListener('unload', function () {\n      sendBeacon(putsReqUrl, `Sent by a beacon when unload! @${new Date()}`);\n    }, false);\n  });\n\ndocument.querySelector('#send-beacon-4')\n  .addEventListener('click', () => {\n    if (!('sendBeacon' in navigator)) {\n      alert('Not support sendBeacon in this browser.');\n    }\n\n    window.addEventListener('pagehide', function () {\n      sendBeacon(putsReqUrl, `Sent by a beacon when pagehide! @${new Date()}`);\n    }, false);\n  });\n\ndocument.querySelector('#send-beacon-5')\n  .addEventListener('click', () => {\n    if (!('sendBeacon' in navigator)) {\n      alert('Not support sendBeacon in this browser.');\n    }\n\n    throw new Error('Global Error Test');\n  });\n\ndocument.querySelector('#send-beacon-5')\n  .addEventListener('click', () => {\n    if (!('sendBeacon' in navigator)) {\n      alert('Not support sendBeacon in this browser.');\n    }\n\n    const handler = function ({message, filename, lineno, colno, error}) {\n      const formData = new FormData();\n      formData.append('message', message);\n      formData.append('filename', filename);\n      formData.append('lineno', lineno);\n      formData.append('colno', colno);\n      formData.append('error', error);\n\n      sendBeacon(putsReqUrl, formData);\n      window.removeEventListener('error', handler, false);\n    };\n\n    window.addEventListener('error', handler, false);\n\n    throw `Sent by a beacon when global error! @${new Date()}`;\n  });\n\ndocument.querySelector('#send-beacon-6')\n  .addEventListener('click', () => {\n    if (!('sendBeacon' in navigator)) {\n      alert('Not support sendBeacon in this browser.');\n    }\n\n    const request = new XMLHttpRequest();\n    request.open('GET', 'http://numbersapi.com/42', false);\n    request.send(null);\n    if (request.status === 200) {\n      console.log(request.responseText);\n    }\n\n    const observer = new ReportingObserver((reports, observer) => {\n      reports.forEach((report) => {\n        sendBeacon(putsReqUrl, JSON.stringify(report.body, ['id', 'columnNumber', 'lineNumber', 'message', 'sourceFile']));\n      });\n      observer.disconnect();\n    }, {types: ['intervention', 'deprecation'], buffered: true});\n\n    observer.observe();\n\n    // throw `Sent by a beacon when ReportObserver! @${new Date()}`;\n  });\n\ndocument.querySelector('#async-xmlhttprequest')\n  .addEventListener('click', () => {\n    window.addEventListener('beforeunload', function () {\n      sendXMLHttpRequest(putsReqUrl, `Sent by a async XMLHttpRequest when beforeunload! @${new Date()}`, true);\n    }, false);\n  });\n\ndocument.querySelector('#sync-xmlhttprequest')\n  .addEventListener('click', () => {\n    window.addEventListener('beforeunload', function () {\n      sendXMLHttpRequest(putsReqUrl, `Sent by a sync XMLHttpRequest when beforeunload! @${new Date()}`, false);\n    }, false);\n  });\n\nfunction sendBeacon(url, data) {\n  navigator.sendBeacon(url, data);\n}\n\nfunction sendXMLHttpRequest(url, data, async) {\n  const client = new XMLHttpRequest();\n  client.open(\"POST\", url, async);\n  client.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n  client.send(data);\n}\n"],"sourceRoot":""}