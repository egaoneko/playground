{"version":3,"sources":["webpack:///./openlayers-sprites-canvas.js"],"names":["const","map","ol","Map","layers","target","document","getElementById","view","View","center","zoom","spriteSheet","sprites","Promise","resolve","reject","loadedSprites","loadedSpriteSheet","Image","src","onload","Object","keys","forEach","name","push","spriteName","canvas","createElement","ctx","getContext","sprite","width","w","height","h","drawImage","x","y","getSprite","onerror","e","getSpritesFromCanvas","sprite01","sprite02","sprite03","sprite04","then","images","iconCount","length","icons","Array","i","image","style","Icon","scale","crossOrigin","imgSize","img","features","geometry","geom","Point","Math","random","feature","Feature","setStyle","Style","vectorSource","source","Vector","vector","layer","addLayer","on","evt","info","innerHTML","window","setTimeout","forEachFeatureAtPixel","pixel","dragging","getEventPixel","originalEvent","hit","hasFeatureAtPixel","getTarget","cursor"],"mappings":"2EAAAA,IAAMC,EAAM,IAAIC,GAAGC,KACjBC,UACAC,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIN,GAAGO,MACXC,QAAS,EAAG,GACZC,KAAM,OAwEV,SAA8BC,EAAaC,GACzC,OAAO,IAAIC,QAAO,SAAEC,EAASC,GAC3BhB,IAAMiB,KACAC,EAAoB,IAAIC,MAE9BD,EAAkBE,IAAMR,EACxBM,EAAkBG,OAAM,WACtBC,OACGC,KAAKV,GACLW,QAAO,SAACC,GACPR,EAAcS,KAUxB,SAAmBd,EAAaC,EAASc,GACvC3B,IAAM4B,EAAStB,SAASuB,cAAc,UAChCC,EAAMF,EAAOG,WAAW,MACxBC,EAASnB,EAAQc,GASvB,OAPAC,EAAOK,MAAQD,EAAOE,EACtBN,EAAOO,OAASH,EAAOI,EACvBN,EAAIO,UAAUzB,EACZoB,EAAOM,EAAGN,EAAOO,EAAGP,EAAOE,EAAGF,EAAOI,EACrC,EAAG,EAAGJ,EAAOE,EAAGF,EAAOI,GAGlBR,EAtBoBY,CAAUtB,EAAmBL,EAASY,MAE7DV,EAAQE,IAEVC,EAAkBuB,QAAO,SAAGC,GAC1B1B,EAAO0B,OAxDbC,CAAqB,0BA1BnBC,UACEN,EAAG,EACHC,EAAG,EACHL,EAAG,GACHE,EAAG,IAELS,UACEP,EAAG,IACHC,EAAG,GACHL,EAAG,GACHE,EAAG,IAELU,UACER,EAAG,GACHC,EAAG,EACHL,EAAG,GACHE,EAAG,IAELW,UACET,EAAG,IACHC,EAAG,EACHL,EAAG,GACHE,EAAG,MAKJY,KAAI,SAACC,GAIJ,IAFAjD,IAAMkD,EAAYD,EAAOE,OACnBC,EAAQ,IAAIC,MAAMH,GACfI,EAAI,EAAGA,EAAIJ,IAAaI,EAAG,CAClCtD,IAAMuD,EAAQN,EAAOK,GACrBF,EAAME,GAAK,IAAIpD,GAAGsD,MAAMC,MACtBC,MAAO,EACPC,YAAa,YACbC,SAAUL,EAAMtB,MAAOsB,EAAMpB,QAC7B0B,IAAKN,IAQT,IAJAvD,IACM8D,EAAW,IAAIT,MADA,KAEfX,EAAI,KAEDY,EAAI,EAAGA,EAJK,MAIeA,EAAG,CACrCtD,IAAM+D,EAAW,IAAI7D,GAAG8D,KAAKC,OAC1B,IAAQC,KAAKC,SAAWzB,EAAG,IAAQwB,KAAKC,SAAWzB,IAChD0B,EAAU,IAAIlE,GAAGmE,QAAQN,GAC/BK,EAAQE,SACN,IAAIpE,GAAGsD,MAAMe,OACXhB,MAAOH,EAAME,GAAKJ,EAAY,OAGlCY,EAASR,GAAKc,EAGhBpE,IAAMwE,EAAe,IAAItE,GAAGuE,OAAOC,QACjCZ,SAAUA,IAENa,EAAS,IAAIzE,GAAG0E,MAAMF,QAC1BD,OAAQD,IAGVvE,EAAI4E,SAASF,KAsCjB1E,EAAI6E,GAAG,QAAS,SAASC,GACvB/E,IAAMgF,EAAO1E,SAASC,eAAe,QACrCyE,EAAKC,UACH,gEAEFC,OAAOC,WAAW,WAChBnF,IAAM8D,KACN7D,EAAImF,sBAAsBL,EAAIM,MAAO,SAASjB,GAE5C,OADAN,EAASpC,KAAK0C,IACP,IAGe,IAApBN,EAASX,OACX6B,EAAKC,UAAY,oBACRnB,EAASX,OAAS,EAC3B6B,EAAKC,UAAY,OAASnB,EAASX,OAAS,eAE5C6B,EAAKC,UAAY,qCAElB,KAGLhF,EAAI6E,GAAG,cAAe,SAASC,GAC7B,IAAIA,EAAIO,SAAR,CAGAtF,IAAMqF,EAAQpF,EAAIsF,cAAcR,EAAIS,eAC9BC,EAAMxF,EAAIyF,kBAAkBL,GAClCpF,EAAI0F,YAAYnC,MAAMoC,OAASH,EAAM,UAAY","file":"openlayers-sprites-canvas.js","sourcesContent":["const map = new ol.Map({\n  layers: [],\n  target: document.getElementById('map'),\n  view: new ol.View({\n    center: [0, 0],\n    zoom: 5\n  })\n});\n\nconst sprites = {\n  'sprite01': {\n    x: 0,\n    y: 0,\n    w: 55,\n    h: 55\n  },\n  'sprite02': {\n    x: 110,\n    y: 86,\n    w: 55,\n    h: 55\n  },\n  'sprite03': {\n    x: 55,\n    y: 0,\n    w: 55,\n    h: 86\n  },\n  'sprite04': {\n    x: 212,\n    y: 0,\n    w: 44,\n    h: 44\n  }\n};\n\ngetSpritesFromCanvas('data/img/butterfly.png', sprites)\n  .then(images => {\n\n    const iconCount = images.length;\n    const icons = new Array(iconCount);\n    for (let i = 0; i < iconCount; ++i) {\n      const image = images[i];\n      icons[i] = new ol.style.Icon({\n        scale: 1.0,\n        crossOrigin: 'anonymous',\n        imgSize: [image.width, image.height],\n        img: image\n      });\n    }\n\n    const featureCount = 500;\n    const features = new Array(featureCount);\n    const e = 25000000;\n\n    for (let i = 0; i < featureCount; ++i) {\n      const geometry = new ol.geom.Point(\n        [2 * e * Math.random() - e, 2 * e * Math.random() - e]);\n      const feature = new ol.Feature(geometry);\n      feature.setStyle(\n        new ol.style.Style({\n          image: icons[i % (iconCount - 1)]\n        })\n      );\n      features[i] = feature;\n    }\n\n    const vectorSource = new ol.source.Vector({\n      features: features\n    });\n    const vector = new ol.layer.Vector({\n      source: vectorSource\n    });\n\n    map.addLayer(vector);\n  });\n\nfunction getSpritesFromCanvas(spriteSheet, sprites) {\n  return new Promise((resolve, reject) => {\n    const loadedSprites = [];\n    const loadedSpriteSheet = new Image();\n\n    loadedSpriteSheet.src = spriteSheet;\n    loadedSpriteSheet.onload = () => {\n      Object\n        .keys(sprites)\n        .forEach(name => {\n          loadedSprites.push(getSprite(loadedSpriteSheet, sprites, name));\n        });\n      resolve(loadedSprites);\n    };\n    loadedSpriteSheet.onerror = e => {\n      reject(e);\n    }\n  });\n}\n\nfunction getSprite(spriteSheet, sprites, spriteName) {\n  const canvas = document.createElement('CANVAS');\n  const ctx = canvas.getContext('2d');\n  const sprite = sprites[spriteName];\n\n  canvas.width = sprite.w;\n  canvas.height = sprite.h;\n  ctx.drawImage(spriteSheet,\n    sprite.x, sprite.y, sprite.w, sprite.h,\n    0, 0, sprite.w, sprite.h\n  );\n\n  return canvas;\n}\n\nmap.on('click', function(evt) {\n  const info = document.getElementById('info');\n  info.innerHTML =\n    'Hold on a second, while I catch those butterflies for you ...';\n\n  window.setTimeout(function() {\n    const features = [];\n    map.forEachFeatureAtPixel(evt.pixel, function(feature) {\n      features.push(feature);\n      return false;\n    });\n\n    if (features.length === 1) {\n      info.innerHTML = 'Got one butterfly';\n    } else if (features.length > 1) {\n      info.innerHTML = 'Got ' + features.length + ' butterflies';\n    } else {\n      info.innerHTML = 'Couldn\\'t catch a single butterfly';\n    }\n  }, 1);\n});\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  const hit = map.hasFeatureAtPixel(pixel);\n  map.getTarget().style.cursor = hit ? 'pointer' : '';\n});\n"],"sourceRoot":""}