{"version":3,"sources":["webpack:///../src/pg/utils/math.js","webpack:///./canvas-collision-detection-part2.js"],"names":["randomInt","min","max","Math","floor","random","rotate","velocity","angle","x","cos","y","sin","resolveCollision","particle","otherParticle","const","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","__webpack_require__","d","__webpack_exports__","r","_src_pg_utils_math__WEBPACK_IMPORTED_MODULE_0__","canvas","document","querySelector","ctx","getContext","mouse","colorSet","addEventListener","event","window","resize","Particle","dx","dy","radius","color","this","interactiveSize","opacity","prototype","draw","beginPath","arc","PI","globalAlpha","fillStyle","fill","strokeStyle","stroke","update","particles","forEach","isCollided","Object","innerWidth","innerHeight","pow","let","cnt","width","height","length","some","p","i","push","loop","init","animate","clearRect","fillRect","requestAnimationFrame"],"mappings":"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","file":"canvas-collision-detection-part2.js","sourcesContent":["/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {undefined} Does not return a value\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n}\n","import {randomInt, resolveCollision} from '../src/pg/utils/math';\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\nconst mouse = {\n  x: 10,\n  y: 10\n};\nconst colorSet = [\n  '#8be9fd',\n  '#50fa7b',\n  '#ffb86c',\n  '#ff79c6',\n  '#bd93f9',\n  '#ff5555',\n  '#f1fa8c',\n];\n\ncanvas.addEventListener('mousemove', (event) => {\n  mouse.x = event.x;\n  mouse.y = event.y;\n});\n\nwindow.addEventListener('resize', () => {\n  resize();\n});\n\nclass Particle {\n  constructor(x, y, dx, dy, radius, color, mass) {\n    this.interactiveSize = 80;\n\n    this.x = x;\n    this.y = y;\n    this.velocity = {\n      x: dx,\n      y: dy\n    };\n    this.radius = radius;\n    this.color = color;\n    this.mass = mass;\n    this.opacity = 0;\n  }\n\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.globalAlpha = this.opacity;\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n  }\n\n  update(particles) {\n    this.draw();\n\n    // check collided\n    particles.forEach(particle => {\n      if (this === particle) {\n        return;\n      }\n\n      if (!this.isCollided(particle)) {\n        return;\n      }\n\n      resolveCollision(this, particle);\n    });\n\n    if (this.x + this.radius >= window.innerWidth || this.x - this.radius <= 0) {\n      this.velocity.x *= -1;\n    }\n\n    if (this.y + this.radius >= window.innerHeight || this.y - this.radius <= 0) {\n      this.velocity.y *= -1;\n    }\n\n    if (this.x - this.radius < 0) {\n      this.x = this.radius\n    }\n\n    if (this.y - this.radius < 0) {\n      this.y = this.radius\n    }\n\n    if (this.x + this.radius > window.innerWidth) {\n      this.x = window.innerWidth - this.radius;\n    }\n\n    if (this.y + this.radius > window.innerHeight) {\n      this.y = window.innerHeight - this.radius;\n    }\n\n    this.x += this.velocity.x;\n    this.y += this.velocity.y;\n\n    // mouse collide\n    if (\n      mouse.x - this.x < this.interactiveSize &&\n      mouse.x - this.x > -this.interactiveSize &&\n      mouse.y - this.y < this.interactiveSize &&\n      mouse.y - this.y > -this.interactiveSize &&\n      this.opacity < 0.5\n    ) {\n      this.opacity += 0.02\n    } else if (this.opacity > 0) {\n      this.opacity -= 0.02;\n      this.opacity = Math.max(0, this.opacity);\n    }\n  }\n\n  isCollided(particle) {\n    const x = this.x - particle.x;\n    const y = this.y - particle.y;\n    return (Math.pow(x, 2) + Math.pow(y, 2)) <= Math.pow((this.radius + particle.radius), 2);\n  }\n}\n\nlet particles = [];\nlet cnt = 0;\n\nfunction init() {\n\n  particles = [];\n\n  for (let i = 0; i < 100; i++) {\n    const radius = randomInt(8, 50);\n    const x = randomInt(radius, canvas.width - radius);\n    const dx = randomInt(-0.5, 0.5) * 5;\n    const y = randomInt(radius, canvas.height - radius);\n    const dy = randomInt(-0.5, 0.5) * 5;\n    const color = colorSet[randomInt(0, colorSet.length)];\n    const mass = 1;\n    const particle = new Particle(x, y, dx, dy, radius, color, mass);\n\n    if (particles.some(p => particle.isCollided(p))) {\n      cnt += 1;\n\n      if (cnt > 100) {\n        continue;\n      }\n\n      i -= 1;\n    } else {\n      cnt = 0;\n      particles.push(particle);\n    }\n  }\n}\n\nfunction resize() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = '#282a36';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  particles.forEach(particle => particle.update(particles));\n  requestAnimationFrame(animate);\n}\n\nresize();\ninit();\nanimate();\n"],"sourceRoot":""}