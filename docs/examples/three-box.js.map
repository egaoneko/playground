{"version":3,"sources":["webpack:///./utils/box.js","webpack:///./three-box.js"],"names":["Box","container","option","Object","assign","width","height","ratio","images","this","init","animate","prototype","camera","THREE","PerspectiveCamera","position","x","y","z","lookAt","Vector3","scene","Scene","const","ambiLight","AmbientLight","add","light","DirectionalLight","set","cube","createMesh","BoxGeometry","console","log","geometry","faceVertexUvs","renderer","WebGLRenderer","canvas","alpha","setClearColor","Color","setPixelRatio","shadowMapEnabled","geom","mat","length","MeshFaceMaterial","map","image","createMaterial","Mesh","let","texture","TextureLoader","load","CanvasTexture","MeshPhongMaterial","requestAnimationFrame","bind","render","time","Date","now","rotation","resize","aspect","updateProjectionMatrix","setSize","__webpack_require__","r","__webpack_exports__","_utils_box__WEBPACK_IMPORTED_MODULE_0__","document","getElementById","clientWidth","clientHeight","windowCanvas","window","devicePixelRatio"],"mappings":"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","file":"three-box.js","sourcesContent":["export default class Box {\n  constructor(container, option) {\n    if (!container) {\n      return;\n    }\n\n    option = Object.assign({\n      width: 300,\n      height: 300,\n      ratio: 1,\n      images: []\n    }, option);\n\n    this.container = container;\n    this.width = option.width;\n    this.height = option.height;\n    this.ratio = option.ratio;\n    this.images = option.images;\n\n    this.init();\n    this.animate();\n  }\n\n  init() {\n    // Resize to the screen\n    if (this.container.width !== this.width || this.container.width !== this.height) {\n      this.container.width = this.width;\n      this.container.height = this.height;\n    }\n\n    this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 0.1, 1000);\n    this.camera.position.x = 0;\n    this.camera.position.y = 12;\n    this.camera.position.z = 28;\n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n    this.scene = new THREE.Scene();\n\n    const ambiLight = new THREE.AmbientLight(0x141414);\n    this.scene.add(ambiLight);\n\n    const light = new THREE.DirectionalLight();\n    light.position.set(0, 30, 20);\n    this.scene.add(light);\n\n    this.cube = this.createMesh(new THREE.BoxGeometry(10, 10, 10), this.images);\n    this.scene.add(this.cube);\n    console.log(this.cube.geometry.faceVertexUvs);\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.container,\n      alpha: true,\n    });\n    this.renderer.setClearColor(new THREE.Color(0xFFFFFFF, 0.0));\n    this.renderer.setPixelRatio(this.ratio);\n    this.renderer.shadowMapEnabled = true;\n  }\n\n  createMesh(geom, images) {\n    let mat;\n    if (images.length === 6) {\n      mat = new THREE.MeshFaceMaterial(images.map(image => this.createMaterial(image)));\n    } else {\n      mat = this.createMaterial(images[0]);\n    }\n    return new THREE.Mesh(geom, mat);\n  }\n\n  createMaterial(image) {\n    let texture;\n\n    if (typeof image === 'string') {\n      texture = new THREE.TextureLoader().load(image);\n    } else {\n      texture = new THREE.CanvasTexture(image);\n    }\n\n    const mat = new THREE.MeshPhongMaterial();\n    mat.map = texture;\n    return mat;\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render();\n  }\n\n  render() {\n    const time = Date.now() * 0.001;\n    this.cube.rotation.x = time * 0.25;\n    this.cube.rotation.y = time * 0.5;\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n\n    if (this.container.width !== this.width || this.container.width !== this.height) {\n      this.container.width = this.width;\n      this.container.height = this.height;\n    }\n\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.width, this.height);\n  }\n}\n\n\n","import Box from './utils/box';\n\nconst container = document.getElementById('container');\nconst width = container.clientWidth;\nconst height = container.clientHeight;\n\nconst windowCanvas = document.getElementById('canvas');\n\nnew Box(windowCanvas, {\n  width,\n  height,\n  ratio: window.devicePixelRatio,\n  images: [\n    'data/img/iu/iu01.jpg',\n    'data/img/iu/iu02.jpg',\n    'data/img/iu/iu03.jpg',\n    'data/img/iu/iu04.jpg',\n    'data/img/iu/iu05.jpg',\n    'data/img/iu/iu06.jpg',\n  ]\n});\n"],"sourceRoot":""}