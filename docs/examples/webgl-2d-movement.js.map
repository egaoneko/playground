{"version":3,"sources":["webpack:///./webgl-2d-movement.js"],"names":["let","gl","canvas","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","trianglesVerticesBuffer","vertexColorAttribute","trianglesColorBuffer","angle","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","window","addEventListener","document","querySelector","container","width","clientWidth","height","clientHeight","getContext","e","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","animLoop","clearColor","clear","COLOR_BUFFER_BIT","viewport","xTranslation","Math","sin","triangleVertices","DYNAMIC_DRAW","setupDynamicBuffers","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLES","requestAnimationFrame"],"mappings":"2EAAAA,IAAIC,EAAK,KACLC,EAAS,KACTC,EAAY,KACZC,EAAiB,KACjBC,EAAe,KAEfC,EAA0B,KAC1BC,EAA0B,KAC1BC,EAAuB,KACvBC,EAAuB,KAEvBC,EAAQ,EA4DZ,SAASC,EAAWC,EAAQC,GAE1BC,IAAMC,EAASd,EAAGe,aAAaH,GAQ/B,OAPAZ,EAAGgB,aAAaF,EAAQH,GACxBX,EAAGiB,cAAcH,GAEZd,EAAGkB,mBAAmBJ,EAAQd,EAAGmB,iBACpCC,MAAM,2BAA2BpB,EAAGqB,iBAAiBP,IAGhDA,EApETQ,OAAOC,iBAAiB,OAExB,WACEtB,EAASuB,SAASC,cAAc,WAChCC,UAAYF,SAASC,cAAc,cACnCxB,EAAO0B,MAAQD,UAAUE,YACzB3B,EAAO4B,OAASH,UAAUI,aAE1B,IACE9B,EAAKC,EAAO8B,WAAW,UAAY9B,EAAO8B,WAAW,sBACrD,MAAOC,IAGLhC,KAoBN,WAEEa,IAAMoB,EAqCC,kPApCDC,EAkDC,yGA/CP9B,EAAeM,EAAWuB,EAAUjC,EAAGmC,eACvChC,EAAiBO,EAAWwB,EAAUlC,EAAGoC,iBAGzClC,EAAYF,EAAGqC,gBAGfrC,EAAGsC,aAAapC,EAAWE,GAC3BJ,EAAGsC,aAAapC,EAAWC,GAC3BH,EAAGuC,YAAYrC,GAEVF,EAAGwC,oBAAoBtC,EAAWF,EAAGyC,cACxCrB,MAAM,4CAIRpB,EAAG0C,WAAWxC,GAzCZyC,GA8FFnC,EAAuBR,EAAG4C,eAC1B5C,EAAG6C,WAAW7C,EAAG8C,aAActC,GAC/BR,EAAG+C,WAAW/C,EAAG8C,aAAc,IAAIE,cAZjC,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,EAGV,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,IAK6DhD,EAAGiD,aA9F1E,SAAUC,IAWZlD,EAAGmD,WAAW,GAAK,GAAK,GAAK,GAC7BnD,EAAGoD,MAAMpD,EAAGqD,kBAEZrD,EAAGsD,SAAS,EAAG,EAAGrD,EAAO0B,MAAO1B,EAAO4B,QAmFzC,WAEEhB,IAAM0C,EAAeC,KAAKC,IAAIhD,GAAS,EAEjCiD,IAEH,GAAMH,EAAc,GAAK,EAC1B,EAAMA,EAAc,EAAK,GACxB,GAAMA,GAAe,GAAK,EAG3B,GAAMA,EAAc,GAAK,EACzB,EAAMA,EAAc,EAAK,EACzB,GAAMA,GAAe,GAAK,GAE5B9C,GAAS,IAETH,EAA0BN,EAAG4C,eAC7B5C,EAAG6C,WAAW7C,EAAG8C,aAAcxC,GAC/BN,EAAG+C,WAAW/C,EAAG8C,aAAc,IAAIE,aAAaU,GAAmB1D,EAAG2D,cAlHlEC,GAsHJvD,EAA0BL,EAAG6D,kBAAkB3D,EAAW,mBAC1DF,EAAG8D,wBAAwBzD,GAC3BL,EAAG6C,WAAW7C,EAAG8C,aAAcxC,GAC/BN,EAAG+D,oBAAoB1D,EAAyB,EAAGL,EAAGgE,OAAO,EAAO,EAAG,GAEvEzD,EAAuBP,EAAG6D,kBAAkB3D,EAAW,gBACvDF,EAAG8D,wBAAwBvD,GAC3BP,EAAG6C,WAAW7C,EAAG8C,aAActC,GAC/BR,EAAG+D,oBAAoBxD,EAAsB,EAAGP,EAAGgE,OAAO,EAAO,EAAG,GAEpEhE,EAAGiE,WAAWjE,EAAGkE,UAAW,EAAG,GA9H3BC,sBAAsBjB,GAJxB","file":"webgl-2d-movement.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet trianglesVerticesBuffer = null;\nlet vertexColorAttribute = null;\nlet trianglesColorBuffer = null;\n\nlet angle = 0.0;\n\nwindow.addEventListener('load', initWebGL);\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n  }\n\n  if (gl) {\n    initShaders();\n    setupBuffers();\n    (function animLoop() {\n      setupWebGL();\n      setupDynamicBuffers();\n      drawScene();\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.5, 0.1, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    \n    varying highp vec4 vColor;\n    \n    void main(void) {\n      gl_Position = vec4(aVertexPosition, 1.0);\n      vColor = vec4(aVertexColor, 1.0);\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp vec4 vColor;\n    \n    void main(void) {\n      gl_FragColor = vColor;\n    }\n  `;\n}\n\nfunction setupBuffers() {\n  const triangleVerticesColors = [\n    // left triangle\n    1.0, 0.0, 0.0,\n    1.0, 1.0, 1.0,\n    1.0, 0.0, 0.0,\n\n    // right triangle\n    0.0, 0.0, 1.0,\n    1.0, 1.0, 1.0,\n    0.0, 0.0, 1.0,\n  ];\n\n  trianglesColorBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVerticesColors), gl.STATIC_DRAW);\n}\n\nfunction setupDynamicBuffers() {\n  // limit translation amount to -0.5 to 0.5\n  const xTranslation = Math.sin(angle) / 2.0;\n\n  const triangleVertices = [\n    // left triangle\n    -0.5 + xTranslation, 0.5, 0.0,\n    0.0 + xTranslation, 0.0, 0.0,\n    -0.5 + xTranslation, -0.5, 0.0,\n\n    // right triangle\n    0.5 + xTranslation, 0.5, 0.0,\n    0.0 + xTranslation, 0.0, 0.0,\n    0.5 + xTranslation, -0.5, 0.0,\n  ];\n  angle += 0.01;\n\n  trianglesVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVertices), gl.DYNAMIC_DRAW);\n}\n\nfunction drawScene() {\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  vertexColorAttribute = gl.getAttribLocation(glProgram, 'aVertexColor');\n  gl.enableVertexAttribArray(vertexColorAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffer);\n  gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n"],"sourceRoot":""}