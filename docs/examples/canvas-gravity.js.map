{"version":3,"sources":["webpack:///../src/pg/utils/math.js","webpack:///./canvas-gravity.js"],"names":["randomInt","min","max","Math","floor","random","rotate","velocity","angle","x","cos","y","sin","resolveCollision","particle","otherParticle","const","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","__webpack_require__","d","__webpack_exports__","r","_src_pg_utils_math__WEBPACK_IMPORTED_MODULE_0__","canvas","document","querySelector","ctx","getContext","mouse","undefined","colorSet","addEventListener","event","init","window","resize","Ball","dx","dy","radius","color","this","prototype","draw","beginPath","arc","PI","fillStyle","fill","update","width","height","let","circles","i","Object","innerWidth","innerHeight","length","push","animate","clearRect","fillRect","forEach","circle","requestAnimationFrame"],"mappings":"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","file":"canvas-gravity.js","sourcesContent":["/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {undefined} Does not return a value\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n}\n","import {randomInt} from '../src/pg/utils/math';\n\nconst GRAVITY = 1;\nconst FRICTION = 0.79;\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\nconst mouse = {\n  x: undefined,\n  y: undefined\n};\nconst colorSet = [\n  '#8be9fd',\n  '#50fa7b',\n  '#ffb86c',\n  '#ff79c6',\n  '#bd93f9',\n  '#ff5555',\n  '#f1fa8c',\n];\n\ncanvas.addEventListener('mousemove', (event) => {\n  mouse.x = event.x;\n  mouse.y = event.y;\n});\n\ncanvas.addEventListener('click', () => {\n  init();\n});\n\nwindow.addEventListener('resize', () => {\n  resize();\n});\n\nclass Ball {\n  constructor(x, y, dx, dy, radius, color) {\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this.radius = radius;\n    this.color = color;\n  }\n\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n\n  update() {\n    if (this.x + this.radius + this.dx >= canvas.width || this.x - this.radius + this.dx < 0) {\n      this.dx *= -1 * FRICTION;\n    }\n\n    if (this.y + this.radius + this.dy >= canvas.height) {\n      this.dy *= -1 * FRICTION;\n      this.dx *= FRICTION;\n    } else {\n      this.dy += GRAVITY;\n    }\n\n    this.x += this.dx;\n    this.y += this.dy;\n    this.draw();\n  }\n}\n\nlet circles = [];\n\nfunction init() {\n\n  circles = [];\n\n  for (let i = 0; i < 500; i++) {\n    const radius = randomInt(8, 20);\n    const x = randomInt(radius, window.innerWidth - radius);\n    const dx = randomInt(-20, 20);\n    const y = randomInt(radius, window.innerHeight - radius);\n    const dy = randomInt(-2, 2);\n    const color = colorSet[randomInt(0, colorSet.length)];\n\n    circles.push(new Ball(x, y, dx, dy, radius, color));\n  }\n}\n\nfunction resize() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = '#282a36';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  circles.forEach(circle => circle.update());\n  requestAnimationFrame(animate);\n}\n\nresize();\ninit();\nanimate();\n"],"sourceRoot":""}