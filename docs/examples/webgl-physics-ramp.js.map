{"version":3,"sources":["webpack:///../src/pg/math/vector3.js","webpack:///./utils/webgl/mesh-utils.js","webpack:///./utils/webgl/object-utils.js","webpack:///./webgl-physics-ramp.js"],"names":["Vector3","x","y","z","this","prototype","divide","scala","Error","cross","vector","const","length","Math","sqrt","normalize","__webpack_require__","d","__webpack_exports__","setupPlaneMesh","setupSphereMesh","_src_pg_math_vector3__WEBPACK_IMPORTED_MODULE_0__","gl","buffers","n","options","vertexPositionData","indexData","textureData","size","Object","assign","color","translation","textured","normalData","colorData","trianglesNormalBuffers","trianglesColorBuffers","trianglesVerticeBuffers","trianglesTexCoordBuffers","vertexIndexBuffers","i","push","j","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","ELEMENT_ARRAY_BUFFER","Uint16Array","STREAM_DRAW","radius","division","smoothShading","latitudeBands","longitudeBands","latNumber","theta","PI","sinTheta","sin","cosTheta","cos","longNumber","phi","sinPhi","let","first","second","origVertices","indices","vertices","a","calculateFlattenedVertices","origNormals","normals","b","c","n1","n2","n3","nx","ny","nz","v3","calculatePerFaceNormals","SphereObject","WallObject","properties","position","velocity","acceleration","vboIndex","totalVelocity","startX","startY","endX","endY","slope","angle","atan2","r","_utils_webgl_mesh_utils__WEBPACK_IMPORTED_MODULE_0__","_utils_webgl_object_utils__WEBPACK_IMPORTED_MODULE_1__","_src_pg_math_vector3__WEBPACK_IMPORTED_MODULE_2__","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","vertexNormalAttribute","vertexColorAttribute","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","paused","SHADER","flat","sceneElements","zoom","GROUND_Y","PLANE_SIZE","HEIGHT_1","HEIGHT_2","HEIGHT_3","HEIGHT_4","LENGTH","LENGTH_2","LENGTH_3","LANDING_RAMP_START","LANDING_RAMP_END","DEPTH","SCALE","sphere","rampWalls","makeShader","source","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","setMatrixUniforms","uniformMatrix4fv","pMatrixUniform","mvMatrixUniform","uniformMatrix3fv","normalMatrixUniform","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","adjustZoom","delta","e","stopPropagation","preventDefault","wheelDelta","originalEvent","detail","initEvents","getContext","preserveDrawingBuffer","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","createProgram","useProgram","getUniformLocation","v1","v2","apply","calculateNormals","addRamp","w","p","setupRampWalls","getAttribLocation","enableVertexAttribArray","setupMeshes","animLoop","enable","DEPTH_TEST","viewport","perspective","identity","translate","rotate","tX","tY","scale","invertedMatrix","fromMat4","invert","transpose","vertexAttribPointer","FLOAT","disableVertexAttribArray","vertexAttrib4f","drawElements","TRIANGLES","UNSIGNED_SHORT","drawScene","found","checkForCollisions","requestAnimationFrame","evt","log","keyCode"],"mappings":"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","file":"webgl-physics-ramp.js","sourcesContent":["/**\n * @module pg/math/vector3\n */\n\n/**\n * @classdesc\n * Vector 3D\n *\n * @api\n */\n\nexport default class Vector3 {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Divide by number\n   * @param {number} scala number for dividing\n   * @return {Vector3} this\n   * @api\n   */\n  divide(scala) {\n    if (typeof scala !== 'number') {\n      throw new Error(`invalid input: ${scala}`);\n    }\n\n    this.x /= scala;\n    this.y /= scala;\n    this.z /= scala;\n\n    return this;\n  }\n\n  /**\n   * Get crossed vector.\n   * @param {Vector3} vector vector for cross\n   * @return {Vector3} this\n   * @api\n   */\n  cross(vector) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n\n    if (!(vector instanceof Vector3)) {\n      throw new Error(`invalid input: ${vector}`);\n    }\n\n    this.x = y * vector.z - z * vector.y;\n    this.y = z * vector.x - x * vector.z;\n    this.z = x * vector.y - y * vector.x;\n  }\n\n  /**\n   * Get length of vector.\n   * @return {number} length\n   * @api\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  /**\n   * Get normalized vector\n   * @return {Vector3} normalized vector\n   * @api\n   */\n  normalize() {\n    return this.divide(this.length());\n  }\n}\n","import Vector3 from \"../../../src/pg/math/vector3\";\n\nexport function setupPlaneMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    size: 10.0,\n    color: [0.5, 0.5, 1.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    textured: false,\n  }, options);\n\n  const size = options.size;\n  const color = options.color;\n  const translation = options.translation;\n  const textured = options.textured;\n\n  let vertexPositionData;\n  let indexData;\n  let textureData;\n  const normalData = [];\n  const colorData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //plane\n  for (let i = 0; i < 5; ++i) {\n    normalData.push(0.0);\n    normalData.push(1.0);\n    normalData.push(0.0);\n    colorData.push(color[0]);\n    colorData.push(color[1]);\n    colorData.push(color[2]);\n    colorData.push(color[3]);\n  }\n\n  vertexPositionData = [\n    0.0, 0.0, 0.0,\n    -size, 0.0, -size,\n    size, 0.0, -size,\n    size, 0.0, size,\n    -size, 0.0, size\n  ];\n\n  textureData = [\n    0.0, 0.0,\n    -size, -size,\n    size, -size,\n    size, size,\n    -size, size\n  ];\n\n\n  for (var j = 0; j < vertexPositionData.length; j += 3) {\n    vertexPositionData[j] += translation[0];\n    vertexPositionData[j + 1] += translation[1];\n    vertexPositionData[j + 2] += translation[2];\n  }\n\n  indexData = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1];\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nexport function setupSphereMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    color: [1.0, 0.0, 0.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    radius: 1.0,\n    division: 30,\n    smoothShading: true,\n    textured: false,\n  }, options);\n\n  const color = options.color;\n  const translation = options.translation;\n  const radius = options.radius;\n  const division = options.division;\n  const smoothShading = options.smoothShading;\n  const textured = options.textured;\n\n  let latitudeBands = division;\n  let longitudeBands = division;\n\n  let vertexPositionData = [];\n  let colorData = [];\n  let normalData = [];\n  const indexData = [];\n  const textureData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //modified from http://learningwebgl.com/cookbook/index.php/How_to_draw_a_sphere\n  for (let latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n    const theta = latNumber * Math.PI / latitudeBands;\n    const sinTheta = Math.sin(theta);\n    const cosTheta = Math.cos(theta);\n\n    for (let longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n      const phi = longNumber * 2 * Math.PI / longitudeBands;\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n\n      const x = cosPhi * sinTheta;\n      const y = cosTheta;\n      const z = sinPhi * sinTheta;\n      // const u = 1 - (longNumber / longitudeBands);\n      // const v = latNumber / latitudeBands;\n\n      textureData.push((x + 1.0) * .5);\n      textureData.push((y + 1.0) * .5);\n\n      normalData.push(x);\n      normalData.push(y);\n      normalData.push(z);\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n      vertexPositionData.push(radius * x + translation[0]);\n      vertexPositionData.push(radius * y + translation[1]);\n      vertexPositionData.push(radius * z + translation[2]);\n    }\n  }\n\n  for (let latNumber = 0; latNumber < latitudeBands; latNumber++) {\n    for (let longNumber = 0; longNumber < longitudeBands; longNumber++) {\n      const first = (latNumber * (longitudeBands + 1)) + longNumber;\n      const second = first + longitudeBands + 1;\n      indexData.push(first);\n      indexData.push(second);\n      indexData.push(first + 1);\n\n      indexData.push(second);\n      indexData.push(second + 1);\n      indexData.push(first + 1);\n    }\n  }\n\n  if (!smoothShading) {\n    vertexPositionData = calculateFlattenedVertices(vertexPositionData, indexData);\n    colorData = [];\n    for (let i = 0; i < indexData.length; ++i) {\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n    }\n    normalData = calculatePerFaceNormals(normalData, indexData);\n  }\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nfunction calculateFlattenedVertices(origVertices, indices) {\n  const vertices = [];\n  for (let i = 0; i < indices.length; ++i) {\n    const a = indices[i] * 3;\n    vertices.push(origVertices[a]);\n    vertices.push(origVertices[a + 1]);\n    vertices.push(origVertices[a + 2]);\n  }\n  return vertices;\n}\n\nfunction calculatePerFaceNormals(origNormals, indices) {\n  const normals = [];\n  for (let i = 0; i < indices.length; i += 3) {\n    const a = indices[i] * 3;\n    const b = indices[i + 1] * 3;\n    const c = indices[i + 2] * 3;\n\n    const n1 = new Vector3(origNormals[a], origNormals[a + 1], origNormals[a + 2]);\n    const n2 = new Vector3(origNormals[b], origNormals[b + 1], origNormals[b + 2]);\n    const n3 = new Vector3(origNormals[c], origNormals[c + 1], origNormals[c + 2]);\n\n    const nx = (n1.x + n2.x + n3.x) / 3;\n    const ny = (n1.y + n2.y + n3.y) / 3;\n    const nz = (n1.z + n2.z + n3.z) / 3;\n\n    const v3 = new Vector3(nx, ny, nz);\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n  }\n  return normals;\n}\n","import Vector3 from \"../../../src/pg/math/vector3\";\n\nexport class SphereObject {\n  constructor(properties) {\n    properties = Object.assign({}, {\n      radius: 1.0,\n      position: new Vector3(0.0, 0.0, 0.0),\n      velocity: new Vector3(0.0, 0.0, 0.0),\n      acceleration: new Vector3(0.0, 0.0, 0.0),\n    }, properties);\n\n    this.radius = properties.radius;\n    this.position = properties.position;\n    this.velocity = properties.velocity;\n    this.acceleration = properties.acceleration;\n    this.vboIndex = properties.vboIndex;\n    this.totalVelocity = 0.0;\n  }\n}\n\nexport class WallObject {\n  constructor(properties) {\n    properties = Object.assign({}, {\n      startX: 0.0,\n      startY: 0.0,\n      endX: 0.0,\n      endY: 0.0,\n    }, properties);\n\n    this.slope = 0.0;\n    if (\n      (properties.endX - properties.startX) > 0.0001 ||\n      (properties.endX - properties.startX) < -0.001\n    ) {\n      this.slope = (properties.endY - properties.startY) / (properties.endX - properties.startX);\n    }\n    this.startX = properties.startX;\n    this.startY = properties.startY;\n    this.endX = properties.endX;\n    this.endY = properties.endY;\n\n    const a = [properties.startX - properties.endX, properties.startY - properties.endY];\n    this.angle = 0.0;\n    this.angle = Math.atan2(a[1], a[0]);\n  }\n}\n","import {\n  setupPlaneMesh,\n  setupSphereMesh\n} from \"./utils/webgl/mesh-utils\";\nimport {\n  SphereObject,\n  WallObject\n} from \"./utils/webgl/object-utils\";\nimport Vector3 from \"../src/pg/math/vector3\";\n\nlet gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet vertexNormalAttribute = null;\nlet vertexColorAttribute = null;\nlet trianglesVerticeBuffers = [];\nlet trianglesNormalBuffers = [];\nlet trianglesColorBuffers = [];\nlet vertexIndexBuffers = [];\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nlet paused = false;\n\nconst SHADER = {\n  flat: {\n    vertexShader: flatVertexShaderSource(),\n    fragmentShader: flatFragmentShaderSource()\n  }\n};\n\nconst sceneElements = [];\nlet zoom = 0.5;\n\nconst GROUND_Y = -1.0;\nconst PLANE_SIZE = 100.0;\n\n//ramp dimensions\nconst HEIGHT_1 = 65.0;\nconst HEIGHT_2 = 15.0;\nconst HEIGHT_3 = 20.0;\nconst HEIGHT_4 = 15.0;\nconst LENGTH = 60.0;\nconst LENGTH_2 = 60.0 * 0.5;\nconst LENGTH_3 = 60.0 * 0.75;\nconst LANDING_RAMP_START = LENGTH * 2.0;\nconst LANDING_RAMP_END = LENGTH * 3.0;\nconst DEPTH = 25.0;\n\nconst SCALE = 0.15;\n\nlet sphere = null;\nconst rampWalls = [];\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  console.log(evt.keyCode);\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n    default:\n      break;\n  }\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  initEvents();\n\n  try {\n    gl = canvas.getContext('webgl', {preserveDrawingBuffer: true}) ||\n      canvas.getContext('experimental-webgl', {preserveDrawingBuffer: true});\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    setupMeshes();\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        drawScene();\n        checkForCollisions();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction initEvents() {\n  const adjustZoom = (delta) => {\n    if (delta > 0) {\n      zoom += 1;\n    } else {\n      zoom -= 0.1;\n      if (zoom < 0.01) {\n        zoom = 0.1;\n      }\n    }\n  };\n  canvas.addEventListener('mousewheel', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    adjustZoom(e.wheelDelta);\n  });\n  canvas.addEventListener('DOMMouseScroll', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    adjustZoom(e.originalEvent.detail * -0.1);\n  });\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  // gl.clearColor(0.7, 0.7, 0.7, 1.0);\n  // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n}\n\nfunction initShaders() {\n  createProgram('flat');\n}\n\nfunction createProgram(type) {\n  // create program\n  glProgram = gl.createProgram();\n  attachShader(glProgram, type);\n  // use program\n  gl.useProgram(glProgram);\n  getMatrixUniforms();\n}\n\nfunction attachShader(glProgram, type) {\n  // get shader source\n  const vsSource = SHADER[type].vertexShader;\n  const fsSource = SHADER[type].fragmentShader;\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction setupMeshes() {\n\n  setupPlaneMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    0,\n    {\n      translation: [0.0, GROUND_Y, 0.0],\n      size: PLANE_SIZE,\n    }\n  );\n  addRamp(1);\n  setupRampWalls();\n\n  const radius = 2.0;\n  setupSphereMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    2,\n    {\n      color: [1.0, 0.0, 0.0, 0.9],\n      radius: radius,\n    }\n  );\n  sphere = new SphereObject({\n    vboIndex: 2,\n    radius: radius,\n    position: new Vector3(0.0, HEIGHT_1 * SCALE, 0.0),\n    acceleration: new Vector3(0.0, -0.001, 0.0)\n  });\n\n  sceneElements.push(sphere);\n\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, \"aVertexPosition\");\n  vertexColorAttribute = gl.getAttribLocation(glProgram, \"aVertexColor\");\n  vertexNormalAttribute = gl.getAttribLocation(glProgram, \"aVertexNormal\");\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.enableVertexAttribArray(vertexColorAttribute);\n  gl.enableVertexAttribArray(vertexNormalAttribute);\n}\n\nfunction drawScene() {\n  const tX = -20;//angleX;\n  const tY = 7;//angleY;\n\n  for (let i = 0; i < vertexIndexBuffers.length; ++i) {\n    mat4.identity(mvMatrix);\n    mat4.translate(mvMatrix, mvMatrix, [0.0, -1.0, -20.0]);\n    mat4.rotate(mvMatrix, mvMatrix, tX * 2 * Math.PI / 180.0, [0.0, 1.0, 0.0]);\n    mat4.rotate(mvMatrix, mvMatrix, tY * 2 * Math.PI / 180.0, [1.0, 0.0, 0.0]);\n    mat4.scale(mvMatrix, mvMatrix, [zoom, zoom, zoom]);\n\n    //coordinate space translations\n    if (i === 1) { //ramp\n      mat4.translate(\n        mvMatrix,\n        mvMatrix,\n        [-LANDING_RAMP_END * 0.5 * SCALE, GROUND_Y, -DEPTH * 0.5 * SCALE]\n      );\n      mat4.scale(mvMatrix, mvMatrix, [SCALE, SCALE, SCALE]);\n    } else if (i === 2) { //sphere\n      mat4.translate(\n        mvMatrix,\n        mvMatrix,\n        [(sphere.radius - LANDING_RAMP_END * 0.5) * SCALE + sphere.position.x,\n          (GROUND_Y - sphere.radius) * SCALE + sphere.position.y,\n          sphere.position.z\n        ]\n      );\n      mat4.scale(mvMatrix, mvMatrix, [SCALE, SCALE, SCALE]);\n    }\n\n    const invertedMatrix = mat3.create();\n    mat3.fromMat4(invertedMatrix, mvMatrix);\n    mat3.invert(normalMatrix, invertedMatrix);\n    mat3.transpose(normalMatrix, normalMatrix);\n    setMatrixUniforms();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[i]);\n    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n\n    if (i === 1) { //ramp\n      gl.disableVertexAttribArray(vertexColorAttribute);\n      gl.vertexAttrib4f(vertexColorAttribute, 1.0, 0.9, 0.7, 1.0);\n    } else {\n      gl.enableVertexAttribArray(vertexColorAttribute);\n      gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[i]);\n      gl.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[i]);\n    gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[i]);\n    gl.drawElements(gl.TRIANGLES, vertexIndexBuffers[i].numItems, gl.UNSIGNED_SHORT, 0);\n  }\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.normalMatrixUniform = gl.getUniformLocation(glProgram, \"uNormalMatrix\");\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n  gl.uniformMatrix3fv(glProgram.normalMatrixUniform, false, normalMatrix);\n}\n\nfunction flatVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform mat4 uPMatrix;    \n    uniform mat4 uMVMatrix;\n    uniform mat3 uNormalMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 L;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vec3 pointLightPosition = vec3(1.0, 2.0, -1.0);\n      vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - aVertexPosition.xyz));\n      vec3 ambientColor = vec3(0.1, 0.1, 0.1);\n      \n      L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      N = uNormalMatrix * aVertexNormal;\n      \n      vColor = aVertexColor;\n    }\n  `;\n}\n\nfunction flatFragmentShaderSource() {\n  return `\n    varying highp vec3 vColor;\n    varying highp vec3 N;\n    varying highp vec3 L;\n    \n    void main(void) {\n      highp float lambert = max(dot(normalize(N), normalize(L)), 0.0);\n      gl_FragColor = vec4(vColor * lambert, 1.0);\n    }\n  `;\n}\n\nfunction checkForCollisions() {\n  const x = sphere.position.x / SCALE;\n\n  if (sphere.position.y < 0.0) {\n    return;\n  }\n\n  let found = false;\n\n  for (let i = 0; i < rampWalls.length; i++) {\n    if (x >= rampWalls[i].startX && x <= rampWalls[i].endX) {\n      found = true;\n\n      if (rampWalls[i].slope < -0.001 || rampWalls[i].slope > 0.001) {\n        if (rampWalls[i].slope > 0.001) {\n          sphere.totalVelocity -= sphere.acceleration.y;\n        } else if (rampWalls[i].slope < -0.001) {\n          sphere.totalVelocity += sphere.acceleration.y;\n        }\n        //console.log(sphere.totalVelocity);\n        sphere.velocity.x = (sphere.totalVelocity * Math.cos(rampWalls[i].angle));\n        sphere.velocity.y = sphere.totalVelocity * Math.sin(rampWalls[i].angle);\n\n        sphere.position.y += sphere.velocity.y;\n      }\n      sphere.position.x += sphere.velocity.x;\n    }\n  }\n\n  if (!found) {\n    sphere.velocity.y += sphere.acceleration.y;\n    sphere.position.x += sphere.velocity.x;\n    sphere.position.y += sphere.velocity.y;\n  }\n}\n\nfunction setupRampWalls() {\n  const w = {\n    startX: 0.0,\n    startY: HEIGHT_1,\n    endX: LENGTH_2,\n    endY: HEIGHT_2\n  };\n  rampWalls.push(new WallObject(w));\n\n  let p = {\n    startX: LENGTH_2,\n    startY: HEIGHT_2,\n    endX: LENGTH_3,\n    endY: HEIGHT_2\n  };\n  rampWalls.push(new WallObject(p));\n\n  p = {\n    startX: LENGTH_3,\n    startY: HEIGHT_2,\n    endX: LENGTH,\n    endY: HEIGHT_3\n  };\n  rampWalls.push(new WallObject(p));\n\n  p = {\n    startX: LANDING_RAMP_START,\n    startY: HEIGHT_4,\n    endX: LANDING_RAMP_END,\n    endY: 0.0\n  };\n  rampWalls.push(new WallObject(p));\n}\n\nfunction addRamp(n) {\n  //26 vertices\n  const vertexPositionData = [\n    //0-3\n    0, 0, 0,\n    LENGTH_2, 0, 0,\n    LENGTH_3, 0, 0,\n    LENGTH, 0, 0,\n\n    //4-7\n    0, HEIGHT_2, 0,\n    LENGTH_2, HEIGHT_2, 0,\n    LENGTH_3, HEIGHT_2, 0,\n    LENGTH, HEIGHT_2, 0,\n    //8-9\n    0, HEIGHT_1, 0,\n    LENGTH, HEIGHT_3, 0,\n    //just z-values change\n    //10-13\n    0, 0, DEPTH,\n    LENGTH_2, 0, DEPTH,\n    LENGTH_3, 0, DEPTH,\n    LENGTH, 0, DEPTH,\n\n    //14-17\n    0, HEIGHT_2, DEPTH,\n    LENGTH_2, HEIGHT_2, DEPTH,\n    LENGTH_3, HEIGHT_2, DEPTH,\n    LENGTH, HEIGHT_2, DEPTH,\n    //18-19\n    0, HEIGHT_1, DEPTH,\n    LENGTH, HEIGHT_3, DEPTH,\n    //down ramp\n    //20-22\n    LANDING_RAMP_START, 0, 0,\n    LANDING_RAMP_END, 0, 0,\n    LANDING_RAMP_START, HEIGHT_4, 0,\n    //23-25\n    LANDING_RAMP_START, 0, DEPTH,\n    LANDING_RAMP_END, 0, DEPTH,\n    LANDING_RAMP_START, HEIGHT_4, DEPTH\n  ];\n  //28 faces = 84 indices\n  const indexData = [\n    0, 1, 5,\n    0, 5, 4,\n    1, 6, 5,\n    1, 2, 6,\t//front side\n    2, 3, 7,\n    2, 7, 6,\n    6, 7, 9,\n    4, 5, 8,\n    10, 15, 11,\n    10, 14, 15,\n    11, 15, 16,\n    11, 16, 12,\t//back side\n    12, 17, 13,\n    12, 16, 17,\n    16, 19, 17,\n    14, 18, 15,\n    0, 13, 3,\t\t//bottom\n    0, 10, 13,\n    0, 8, 10,\t\t//left\n    8, 18, 10,\n    3, 13, 9,\t\t//right\n    9, 13, 19,\n    8, 5, 15,\t\t\t//top\n    8, 15, 18,\n    5, 6, 16,\n    5, 16, 15,\n    6, 9, 19,\n    6, 19, 16,\n    //down ramp\n    20, 21, 22,\n    23, 25, 24,\t//sides\n    20, 22, 23,\n    23, 22, 25,\t//back\n    20, 23, 21,\n    21, 23, 24,\t//bottom\n    21, 24, 22,\t//top\n    22, 24, 25\n  ];\n  const normalData = calculateNormals(vertexPositionData, indexData);\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nfunction calculateNormals(vertices, indices) {\n  const normals = [];\n\n  for (let i = 0; i < indices.length; i += 3) {\n    const a = indices[i];\n    const b = indices[i + 1];\n    const c = indices[i + 2];\n    //normal is the cross product\n    const v1 = [\n      vertices[a * 3] - vertices[b * 3],\n      vertices[a * 3 + 1] - vertices[b * 3 + 1],\n      vertices[a * 3 + 2] - vertices[b * 3 + 2]\n    ];\n    const v2 = [\n      vertices[a * 3] - vertices[c * 3],\n      vertices[a * 3 + 1] - vertices[c * 3 + 1],\n      vertices[a * 3 + 2] - vertices[c * 3 + 2]\n    ];\n    const cross = [\n      v1[1] * v2[2] - v1[2] * v2[1],\n      v1[2] * v2[0] - v1[0] * v2[2],\n      v1[0] * v2[1] - v1[1] * v2[0]\n    ];\n    //same value for each of the three vertices\n    normals.push.apply(normals, cross);\n    normals.push.apply(normals, cross);\n    normals.push.apply(normals, cross);\n  }\n  return normals;\n}\n"],"sourceRoot":""}