{"version":3,"sources":["webpack:///./canvas-becoming-pro-ep3.js"],"names":["const","canvas","document","querySelector","width","window","innerWidth","height","innerHeight","ctx","getContext","Circle","x","y","dx","dy","radius","this","prototype","draw","beginPath","arc","Math","PI","strokeStyle","stroke","update","circles","i","let","random","push","animate","clearRect","forEach","circle","requestAnimationFrame"],"mappings":"0EAAAA,IAAMC,EAASC,SAASC,cAAc,UAEtCF,EAAOG,MAAQC,OAAOC,WACtBL,EAAOM,OAASF,OAAOG,YAEvBR,IAAMS,EAAMR,EAAOS,WAAW,MAExBC,EACJ,SAAYC,EAAGC,EAAGC,EAAIC,EAAIC,GACxBC,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACTI,KAAKH,GAAKA,EACVG,KAAKF,GAAKA,EACVE,KAAKD,OAASA,GAGlBL,EAAAO,UAAEC,KAAA,WACEV,EAAIW,YACJX,EAAIY,IAAIJ,KAAKL,EAAGK,KAAKJ,EAAGI,KAAKD,OAAQ,EAAa,EAAVM,KAAKC,IAAQ,GACrDd,EAAIe,YAAc,OAClBf,EAAIgB,UAGRd,EAAAO,UAAEQ,OAAA,YACMT,KAAKL,EAAIK,KAAKD,OAASX,OAAOC,YAAcW,KAAKL,EAAIK,KAAKD,OAAS,KACrEC,KAAKH,KAAO,IAGVG,KAAKJ,EAAII,KAAKD,OAASX,OAAOG,aAAeS,KAAKJ,EAAII,KAAKD,OAAS,KACtEC,KAAKF,KAAO,GAGdE,KAAKL,GAAKK,KAAKH,GACfG,KAAKJ,GAAKI,KAAKF,GACfE,KAAKE,QAKT,IADAnB,IAAM2B,KACGC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5BC,IACIjB,EAAIU,KAAKQ,UAAYzB,OAAOC,WAAaU,IADhC,GAETF,EAA6B,IAAvBQ,KAAKQ,SAAW,IACtBjB,EAAIS,KAAKQ,UAAYzB,OAAOG,YAAcQ,IAHjC,GAITD,EAA6B,IAAvBO,KAAKQ,SAAW,IAE1BH,EAAQI,KAAK,IAAIpB,EAAOC,EAAGC,EAAGC,EAAIC,EANrB,MASf,SAASiB,IACPvB,EAAIwB,UAAU,EAAG,EAAG5B,OAAOC,WAAYD,OAAOG,aAC9CmB,EAAQO,QAAO,SAACC,GAAO,OAAGA,EAAOT,WACjCU,sBAAsBJ,GAGxBA","file":"canvas-becoming-pro-ep3.js","sourcesContent":["const canvas = document.querySelector('canvas');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst ctx = canvas.getContext('2d');\n\nclass Circle {\n  constructor(x, y, dx, dy, radius) {\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this.radius = radius;\n  }\n\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = 'blue';\n    ctx.stroke();\n  }\n\n  update() {\n    if (this.x + this.radius > window.innerWidth || this.x - this.radius < 0) {\n      this.dx *= -1;\n    }\n\n    if (this.y + this.radius > window.innerHeight || this.y - this.radius < 0) {\n      this.dy *= -1;\n    }\n\n    this.x += this.dx;\n    this.y += this.dy;\n    this.draw();\n  }\n}\n\nconst circles = [];\nfor (let i = 0; i < 100; i++) {\n  let radius = 30;\n  let x = Math.random() * (window.innerWidth - radius * 2) + radius;\n  let dx = (Math.random() - 0.5) * 10; // for if random 0\n  let y = Math.random() * (window.innerHeight - radius * 2) + radius;\n  let dy = (Math.random() - 0.5) * 10;\n\n  circles.push(new Circle(x, y, dx, dy, radius));\n}\n\nfunction animate() {\n  ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n  circles.forEach(circle => circle.update());\n  requestAnimationFrame(animate);\n}\n\nanimate();\n"],"sourceRoot":""}