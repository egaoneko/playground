{"version":3,"sources":["webpack:///./arjs-aframe-geo.js"],"names":["const","loadPlaces","coords","position","params","radius","clientId","clientSecret","version","endpoint","fetch","then","res","json","resp","response","venues","catch","err","console","error","loadPlaceFromAPIs","window","onload","scene","document","querySelector","navigator","geolocation","getCurrentPosition","places","forEach","place","latitude","location","lat","longitude","lng","icon","createElement","setAttribute","name","addEventListener","dispatchEvent","CustomEvent","ev","stopPropagation","preventDefault","target","getAttribute","el","detail","intersection","object","label","container","innerText","appendChild","body","setTimeout","parentElement","removeChild","enableHighAccuracy","maximumAge","timeout"],"mappings":"0EAAAA,IAAMC,EAAa,SAASC,GAgBtB,OAON,SAA2BC,GACzBH,IAAMI,GACFC,OAAQ,IACRC,SAAU,mDACVC,aAAc,mDACdC,QAAS,YAMPC,EAAW,yEACPN,EAAS,SAAQ,IAAIA,EAAS,UAAS,mBACnCC,EAAO,OAAM,sBACVA,EAAO,SAAQ,0BACXA,EAAO,aAAY,+BAE/BA,EAAc,QACvB,OAAOM,MAAMD,GACRE,KAAI,SAAEC,GACH,OAAOA,EAAIC,OACNF,KAAI,SAAEG,GACH,OAAOA,EAAKC,SAASC,WAGhCC,MAAK,SAAEC,GACJC,QAAQC,MAAM,wBAAyBF,KAjCpCG,CAAkBnB,IAsC/BoB,OAAOC,OAAM,WACXvB,IAAMwB,EAAQC,SAASC,cAAc,WAGrC,OAAOC,UAAUC,YAAYC,mBAAmB,SAAU1B,GAGtDF,EAAWE,EAASD,QACfS,KAAI,SAAEmB,GACHA,EAAOC,QAAO,SAAEC,GACZhC,IAAMiC,EAAWD,EAAME,SAASC,IAC1BC,EAAYJ,EAAME,SAASG,IAG3BC,EAAOb,SAASc,cAAc,WACpCD,EAAKE,aAAa,mBAAoB,aAAaP,EAAQ,gBAAgBG,GAC3EE,EAAKE,aAAa,OAAQR,EAAMS,MAChCH,EAAKE,aAAa,MAAO,2BAGzBF,EAAKE,aAAa,QAAS,UAE3BF,EAAKI,iBAAiB,SAAQ,WAAK,OAAGpB,OAAOqB,cAAc,IAAIC,YAAY,8BAwB3EN,EAAKI,iBAAiB,QAtBA,SAASG,GAC3BA,EAAGC,kBACHD,EAAGE,iBAEH/C,IAAMyC,EAAOI,EAAGG,OAAOC,aAAa,QAE9BC,EAAKL,EAAGM,OAAOC,cAAgBP,EAAGM,OAAOC,aAAaC,OAAOH,GAEnE,GAAIA,GAAMA,IAAOL,EAAGG,OAAQ,CACxBhD,IAAMsD,EAAQ7B,SAASc,cAAc,QAC/BgB,EAAY9B,SAASc,cAAc,OACzCgB,EAAUf,aAAa,KAAM,eAC7Bc,EAAME,UAAYf,EAClBc,EAAUE,YAAYH,GACtB7B,SAASiC,KAAKD,YAAYF,GAE1BI,WAAU,WACNJ,EAAUK,cAAcC,YAAYN,IACrC,SAMX/B,EAAMiC,YAAYnB,iBAI7BpB,GAAK,OAAGC,QAAQC,MAAM,+BAAgCF,KAEnD4C,oBAAoB,EACpBC,WAAY,EACZC,QAAS","file":"arjs-aframe-geo.js","sourcesContent":["const loadPlaces = function(coords) {\n  // COMMENT FOLLOWING LINE IF YOU WANT TO USE STATIC DATA AND ADD COORDINATES IN THE FOLLOWING 'PLACES' ARRAY\n  const method = 'api';\n\n  const PLACES = [\n      {\n          name: \"Your place name\",\n          location: {\n              lat: 0, // add here latitude if using static data\n              lng: 0, // add here longitude if using static data\n\n          }\n      },\n  ];\n\n  if (method === 'api') {\n      return loadPlaceFromAPIs(coords);\n  }\n\n  return Promise.resolve(PLACES);\n};\n\n// getting places from REST APIs\nfunction loadPlaceFromAPIs(position) {\n  const params = {\n      radius: 300,    // search places not farther than this value (in meters)\n      clientId: 'HGI5G33JBRJH551FXSKFDN44R4ATNMCLHIN5GFUAB1JMSTRL',\n      clientSecret: 'UQF1XXFG3IBLJA4ZU5NK5SUMAO3KFBXR1BFPXFI5ORRU0KVJ',\n      version: '20300101',    // foursquare versioning, required but unuseful for this demo\n  };\n\n  // CORS Proxy to avoid CORS problems\n\n  // Foursquare API\n  const endpoint = `https://api.foursquare.com/v2/venues/search?intent=checkin\n      &ll=${position.latitude},${position.longitude}\n      &radius=${params.radius}\n      &client_id=${params.clientId}\n      &client_secret=${params.clientSecret}\n      &limit=15\n      &v=${params.version}`;\n  return fetch(endpoint)\n      .then((res) => {\n          return res.json()\n              .then((resp) => {\n                  return resp.response.venues;\n              })\n      })\n      .catch((err) => {\n          console.error('Error with places API', err);\n      })\n};\n\n\nwindow.onload = () => {\n  const scene = document.querySelector('a-scene');\n\n  // first get current user location\n  return navigator.geolocation.getCurrentPosition(function (position) {\n\n      // then use it to load from remote APIs some places nearby\n      loadPlaces(position.coords)\n          .then((places) => {\n              places.forEach((place) => {\n                  const latitude = place.location.lat;\n                  const longitude = place.location.lng;\n\n                  // add place icon\n                  const icon = document.createElement('a-image');\n                  icon.setAttribute('gps-entity-place', `latitude: ${latitude}; longitude: ${longitude}`);\n                  icon.setAttribute('name', place.name);\n                  icon.setAttribute('src', 'data/img/map-marker.png');\n\n                  // for debug purposes, just show in a bigger scale, otherwise I have to personally go on places...\n                  icon.setAttribute('scale', '20, 20');\n\n                  icon.addEventListener('loaded', () => window.dispatchEvent(new CustomEvent('gps-entity-place-loaded')));\n\n                  const clickListener = function(ev) {\n                      ev.stopPropagation();\n                      ev.preventDefault();\n\n                      const name = ev.target.getAttribute('name');\n\n                      const el = ev.detail.intersection && ev.detail.intersection.object.el;\n\n                      if (el && el === ev.target) {\n                          const label = document.createElement('span');\n                          const container = document.createElement('div');\n                          container.setAttribute('id', 'place-label');\n                          label.innerText = name;\n                          container.appendChild(label);\n                          document.body.appendChild(container);\n\n                          setTimeout(() => {\n                              container.parentElement.removeChild(container);\n                          }, 1500);\n                      }\n                  };\n\n                  icon.addEventListener('click', clickListener);\n                  \n                  scene.appendChild(icon);\n              });\n          })\n  },\n      (err) => console.error('Error in retrieving position', err),\n      {\n          enableHighAccuracy: true,\n          maximumAge: 0,\n          timeout: 27000,\n      }\n  );\n};"],"sourceRoot":""}