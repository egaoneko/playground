{"version":3,"sources":["webpack:///./utils/bouncing-balls.js","webpack:///./offscreen-canvas-ex01.js"],"names":["BouncingBalls","canvas","option","Object","assign","width","height","gravity","radius","size","dampeningFactor","this","ctx","getContext","circles","initializeCircles","executeFrame","prototype","requestAnimationFrame","bind","iterateSimulation","fillStyle","fillRect","drawCircles","let","i","const","circle","x","Math","random","y","velocity","color","push","lineWidth","strokeRect","forEach","beginPath","arc","PI","fill","abs","j","circle2","dx","dy","d","sqrt","forceX","forceY","windowCanvas","document","getElementById","offscreen","transferControlToOffscreen","bouncing_balls","key","worker","Worker","postMessage","type","addEventListener","e","target","checked","clearInterval","setInterval","delay","start","Date","getTime","console","log","sleep","busy","count","countSpan","innerHTML","toString"],"mappings":"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","file":"offscreen-canvas-ex01.js","sourcesContent":["// http://curran.github.io/HTML5Examples/\nexport default class BouncingBalls {\n\n  constructor(canvas, option) {\n    if (!canvas) {\n      return;\n    }\n\n    option = Object.assign({\n      width: 300,\n      height: 300,\n      gravity: 0.1,\n      radius: 5,\n      size: 10,\n      dampeningFactor: 0.99,\n    }, option);\n\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = option.width;\n    this.height = option.height;\n    this.gravity = option.gravity;\n    this.radius = option.radius;\n    this.size = option.size;\n    this.dampeningFactor = option.dampeningFactor;\n    this.circles = [];\n\n    this.initializeCircles();\n\n    // Draw the first frame to start animation\n    this.executeFrame()\n  }\n\n  executeFrame() {\n    requestAnimationFrame(this.executeFrame.bind(this));\n    this.iterateSimulation();\n\n    this.ctx.fillStyle = 'rgba(255,255,255,0.3)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.drawCircles();\n  }\n\n  initializeCircles() {\n    for (let i = 0; i < this.size; i++) {\n      const circle = {\n        x: Math.random() * this.canvas.width,\n        y: Math.random() * this.canvas.height,\n        velocity: {x: 0, y: 0},\n        color: [Math.random() * 255, Math.random() * 255, Math.random() * 255]\n      };\n      this.circles.push(circle);\n    }\n  }\n\n  drawCircles() {\n    // Resize to the screen\n    if (this.canvas.width !== this.width || this.canvas.width !== this.height) {\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      this.initializeCircles();\n      this.iterateSimulation();\n    }\n\n    // draw rectangle border\n    this.ctx.lineWidth = '3';\n    this.ctx.strokeRect(0, 0, this.canvas.width, this.canvas.height);\n    // draw circles\n    this.circles.forEach(circle => {\n      this.ctx.beginPath();\n      this.ctx.arc(circle.x, circle.y, this.radius, 0, 2 * Math.PI);\n      this.ctx.fillStyle = 'rgb(' + circle.color[0] + ', ' + circle.color[1] + ', ' + circle.color[2] + ')';\n      this.ctx.fill();\n    });\n  }\n\n  iterateSimulation() {\n    for (let i = 0; i < this.size; i++) {\n      const circle = this.circles[i];\n\n      // Add gravity\n      circle.velocity.y += this.gravity;\n\n      // slows things down\n      circle.velocity.x *= this.dampeningFactor;\n      circle.velocity.y *= this.dampeningFactor;\n\n      // Add velocity to position\n      circle.x += circle.velocity.x;\n      circle.y += circle.velocity.y;\n\n      // Make them bounce off the floor\n      if (circle.y > this.canvas.height - this.radius) {\n        circle.y = this.canvas.height - this.radius;\n        circle.velocity.y = -Math.abs(circle.velocity.y);\n      } // bounce off ceiling\n      if (circle.y < this.radius) {\n        circle.y = this.radius;\n        circle.velocity.y = Math.abs(circle.velocity.y);\n      } // bounce off right wall\n      if (circle.x > this.canvas.width - this.radius) {\n        circle.x = this.canvas.width - this.radius;\n        circle.velocity.x = -Math.abs(circle.velocity.x);\n      } // bounce off left wall\n      if (circle.x < this.radius) {\n        circle.x = this.radius;\n        circle.velocity.x = Math.abs(circle.velocity.x);\n      }\n\n      // REPULSION between circles\n      for (let j = i + 1; j < this.size; j++) {\n        const circle2 = this.circles[j];\n        const dx = circle2.x - circle.x;\n        const dy = circle2.y - circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy);\n\n        if (d < 2 * this.radius) {\n          if (d === 0) {\n            d = 0.1;\n          }\n          const unitX = dx / d;\n          const unitY = dy / d;\n\n          const force = -2;\n\n          const forceX = unitX * force;\n          const forceY = unitY * force;\n\n          circle.velocity.x += forceX;\n          circle.velocity.y += forceY;\n\n          circle2.velocity.x -= forceX;\n          circle2.velocity.y -= forceY;\n        }\n      }\n    }\n  }\n}\n","import BouncingBalls from './utils/bouncing-balls';\n\nconst windowCanvas = document.getElementById('canvas-window');\nconst workerCanvas = document.getElementById('canvas-worker');\nconst offscreen = workerCanvas.transferControlToOffscreen();\n\nnew BouncingBalls(windowCanvas, {radius: 2, size: 50});\n\nconst worker = new Worker('data/worker/offscreen-canvas-ex01.js');\nworker.postMessage({canvas: offscreen, type: 'canvas'}, [offscreen]);\n\nfunction sleep(delay) {\n  const start = new Date().getTime();\n  console.log('Sleeping!');\n  while (new Date().getTime() < start + delay) ;\n}\n\nlet key;\n\ndocument.getElementById('canvas-window-check').addEventListener('change', (e) => {\n  if (key || !e.target.checked) {\n    clearInterval(key);\n  }\n\n  if (e.target.checked) {\n    key = setInterval(() => {\n      sleep(1000);\n    }, 3000);\n  }\n});\n\ndocument.getElementById('canvas-worker-check').addEventListener('change', (e) => {\n  worker.postMessage({busy: e.target.checked, type: 'busy'});\n});\n\nlet count = 0;\nlet countSpan = document.getElementById('interaction-count');\ndocument.getElementById('interaction-btn').addEventListener('click', () => {\n  countSpan.innerHTML = (++count).toString();\n});\n"],"sourceRoot":""}