{"version":3,"sources":["webpack:///./utils/box.js","webpack:///./create-image-bitmap.js"],"names":["Box","container","option","Object","assign","width","height","ratio","images","this","init","animate","prototype","camera","THREE","PerspectiveCamera","position","x","y","z","lookAt","Vector3","scene","Scene","const","ambiLight","AmbientLight","add","light","DirectionalLight","set","cube","createMesh","BoxGeometry","console","log","geometry","faceVertexUvs","renderer","WebGLRenderer","canvas","alpha","setClearColor","Color","setPixelRatio","shadowMapEnabled","geom","mat","length","MeshFaceMaterial","map","image","createMaterial","Mesh","let","texture","TextureLoader","load","CanvasTexture","MeshPhongMaterial","requestAnimationFrame","bind","render","time","Date","now","rotation","resize","aspect","updateProjectionMatrix","setSize","__webpack_require__","r","__webpack_exports__","imageBox","_utils_box__WEBPACK_IMPORTED_MODULE_0__","sprites","sprite01","w","h","sprite02","sprite03","sprite04","sprite05","sprite06","imageCanvas","document","getElementById","spriteSheet","Promise","resolve","reject","loadedSprites","loadedSpriteSheet","Image","src","onload","keys","forEach","name","push","spriteName","createElement","ctx","getContext","sprite","drawImage","getSprite","onerror","e","getSpritesFromCanvas","then","window","devicePixelRatio","imageBitmapBox","createImageBitmapCanvas","bitmaps","createImageBitmap","all","loadedBitmap","getSpritesFromImageBitmap","addEventListener","clientWidth","clientHeight"],"mappings":"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","file":"create-image-bitmap.js","sourcesContent":["export default class Box {\n  constructor(container, option) {\n    if (!container) {\n      return;\n    }\n\n    option = Object.assign({\n      width: 300,\n      height: 300,\n      ratio: 1,\n      images: []\n    }, option);\n\n    this.container = container;\n    this.width = option.width;\n    this.height = option.height;\n    this.ratio = option.ratio;\n    this.images = option.images;\n\n    this.init();\n    this.animate();\n  }\n\n  init() {\n    // Resize to the screen\n    if (this.container.width !== this.width || this.container.width !== this.height) {\n      this.container.width = this.width;\n      this.container.height = this.height;\n    }\n\n    this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 0.1, 1000);\n    this.camera.position.x = 0;\n    this.camera.position.y = 12;\n    this.camera.position.z = 28;\n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n    this.scene = new THREE.Scene();\n\n    const ambiLight = new THREE.AmbientLight(0x141414);\n    this.scene.add(ambiLight);\n\n    const light = new THREE.DirectionalLight();\n    light.position.set(0, 30, 20);\n    this.scene.add(light);\n\n    this.cube = this.createMesh(new THREE.BoxGeometry(10, 10, 10), this.images);\n    this.scene.add(this.cube);\n    console.log(this.cube.geometry.faceVertexUvs);\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.container,\n      alpha: true,\n    });\n    this.renderer.setClearColor(new THREE.Color(0xFFFFFFF, 0.0));\n    this.renderer.setPixelRatio(this.ratio);\n    this.renderer.shadowMapEnabled = true;\n  }\n\n  createMesh(geom, images) {\n    let mat;\n    if (images.length === 6) {\n      mat = new THREE.MeshFaceMaterial(images.map(image => this.createMaterial(image)));\n    } else {\n      mat = this.createMaterial(images[0]);\n    }\n    return new THREE.Mesh(geom, mat);\n  }\n\n  createMaterial(image) {\n    let texture;\n\n    if (typeof image === 'string') {\n      texture = new THREE.TextureLoader().load(image);\n    } else {\n      texture = new THREE.CanvasTexture(image);\n    }\n\n    const mat = new THREE.MeshPhongMaterial();\n    mat.map = texture;\n    return mat;\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render();\n  }\n\n  render() {\n    const time = Date.now() * 0.001;\n    this.cube.rotation.x = time * 0.25;\n    this.cube.rotation.y = time * 0.5;\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n\n    if (this.container.width !== this.width || this.container.width !== this.height) {\n      this.container.width = this.width;\n      this.container.height = this.height;\n    }\n\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.width, this.height);\n  }\n}\n\n\n","import Box from './utils/box';\n\nconst sprites = {\n  'sprite01': {\n    x: 557 * 0,\n    y: 0,\n    w: 557,\n    h: 557\n  },\n  'sprite02': {\n    x: 557 * 1,\n    y: 0,\n    w: 557,\n    h: 557\n  },\n  'sprite03': {\n    x: 557 * 2,\n    y: 0,\n    w: 557,\n    h: 557\n  },\n  'sprite04': {\n    x: 557 * 3,\n    y: 0,\n    w: 557,\n    h: 557\n  },\n  'sprite05': {\n    x: 557 * 4,\n    y: 0,\n    w: 557,\n    h: 557\n  },\n  'sprite06': {\n    x: 557 * 5,\n    y: 0,\n    w: 557,\n    h: 557\n  },\n};\n\nconst imageCanvas = document.getElementById('canvas-image');\nlet imageBox;\n\ngetSpritesFromCanvas('data/img/dice.png', sprites)\n  .then(images => {\n    imageBox = new Box(imageCanvas, {\n      images,\n      ratio: window.devicePixelRatio\n    });\n  });\n\nfunction getSpritesFromCanvas(spriteSheet, sprites) {\n  return new Promise((resolve, reject) => {\n    const loadedSprites = [];\n    const loadedSpriteSheet = new Image();\n\n    loadedSpriteSheet.src = spriteSheet;\n    loadedSpriteSheet.onload = () => {\n      Object\n        .keys(sprites)\n        .forEach(name => {\n          loadedSprites.push(getSprite(loadedSpriteSheet, sprites, name));\n        });\n      resolve(loadedSprites);\n    };\n    loadedSpriteSheet.onerror = e => {\n      reject(e);\n    }\n  });\n}\n\nfunction getSprite(spriteSheet, sprites, spriteName) {\n  const canvas = document.createElement('CANVAS');\n  const ctx = canvas.getContext('2d');\n  const sprite = sprites[spriteName];\n\n  canvas.width = sprite.w;\n  canvas.height = sprite.h;\n  ctx.drawImage(spriteSheet,\n    sprite.x, sprite.y, sprite.w, sprite.h,\n    0, 0, sprite.w, sprite.h\n  );\n\n  return canvas;\n}\n\nconst createImageBitmapCanvas = document.getElementById('canvas-image-bitmap');\nlet imageBitmapBox;\n\ngetSpritesFromImageBitmap('data/img/dice.png', sprites)\n  .then(images => {\n    imageBitmapBox = new Box(createImageBitmapCanvas, {\n      images,\n      ratio: window.devicePixelRatio,\n    });\n  });\n\nfunction getSpritesFromImageBitmap(spriteSheet, sprites) {\n  return new Promise((resolve, reject) => {\n    const bitmaps = [];\n    const loadedSpriteSheet = new Image();\n\n    loadedSpriteSheet.src = spriteSheet;\n    loadedSpriteSheet.onload = () => {\n      Object\n        .keys(sprites)\n        .forEach(name => {\n          const sprite = sprites[name];\n          bitmaps.push(\n            createImageBitmap(loadedSpriteSheet, sprite.x, sprite.y, sprite.w, sprite.h)\n          );\n        });\n      Promise\n        .all(bitmaps)\n        .then(loadedBitmap => {\n          resolve(loadedBitmap);\n        });\n    };\n    loadedSpriteSheet.onerror = e => {\n      reject(e);\n    }\n  });\n}\n\nwindow.addEventListener('resize', onWindowResize, false);\n\nfunction onWindowResize() {\n  const container = document.getElementById('container');\n  const width = container.clientWidth;\n  const height = container.clientHeight;\n\n  imageBox.resize(width, height);\n  imageBitmapBox.resize(width, height);\n}\n"],"sourceRoot":""}