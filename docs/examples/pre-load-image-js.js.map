{"version":3,"sources":["webpack:///./pre-load-image-js.js","webpack:///../src/pg/utils/image.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_pg_utils_image__WEBPACK_IMPORTED_MODULE_0__","imageBox","document","getElementById","imageBoxIndex","imageSet1","Object","style","backgroundImage","getBackgroundImage","addClickEvent","length","const","preloadImageBox","preloadImageBoxIndex","imageSet2","src","id","callback","addEventListener","images","forEach","setTimeout","let","img","Image","onload","preloadImages","getRandomHexColor","color","i","Math","floor","random","getRandomDummyImages","width","height","size","TypeError","baseUrl","push","slice","d"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAEMI,EAAWC,SAASC,eAAe,aACrCC,EAAgB,EACdC,EAAYC,OAAAN,EAAA,EAAAM,CAAqB,IAAK,IAAK,IAEjDL,EAASM,MAAMC,gBAAkBC,EAAmBJ,EAAUD,IAE9DM,EAAc,qBAAsB,WAC9BN,EAAgB,IAGpBA,GAAiB,EACjBH,EAASM,MAAMC,gBAAkBC,EAAmBJ,EAAUD,OAGhEM,EAAc,qBAAsB,WAC9BN,GAAiBC,EAAUM,OAAS,IAGxCP,GAAiB,EACjBH,EAASM,MAAMC,gBAAkBC,EAAmBJ,EAAUD,OAGhEQ,IAAMC,EAAkBX,SAASC,eAAe,qBAC5CW,EAAuB,EACrBC,EAAYT,OAAAN,EAAA,EAAAM,CAAqB,IAAK,IAAK,IAiCjD,SAASG,EAAmBO,GAC1B,MAAO,OAASA,EAAM,IAGxB,SAASN,EAAcO,EAAIC,GACzBhB,SAASC,eAAec,GAAIE,iBAAiB,QAASD,GApCxDL,EAAgBN,MAAMC,gBAAkBC,EAAmBM,EAAUD,IAmBrE,SAAuBM,GACrBA,EAAOC,QAAQ,SAAUL,GACvBM,WAAU,WACRC,IAAIC,EAAM,IAAIC,MACdD,EAAIR,IAAMA,EACVQ,EAAIE,OAAM,WACRF,EAAM,UAxBdG,CAAcZ,GAEdL,EAAc,6BAA8B,WACtCI,EAAuB,IAG3BA,GAAwB,EACxBD,EAAgBN,MAAMC,gBAAkBC,EAAmBM,EAAUD,OAGvEJ,EAAc,6BAA8B,WACtCI,GAAwBC,EAAUJ,OAAS,IAG/CG,GAAwB,EACxBD,EAAgBN,MAAMC,gBAAkBC,EAAmBM,EAAUD,uCClChE,SAASc,IAGd,IAFAhB,IACIiB,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHc,mBAGGE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,EAYF,SAASK,EAAqBC,EAAOC,EAAQC,GAClD,GACmB,iBAAVF,GACW,iBAAXC,GACS,iBAATC,EAEP,MAAM,IAAIC,UAAU,yBAMtB,IAHA1B,IAAM2B,EAAU,0BAA0BJ,EAAK,IAAIC,EAAM,IACnDhB,KAEGU,EAAI,EAAGA,EAAIO,EAAMP,IACxBV,EAAOoB,KAAKD,EAAUX,IAAoBa,MAAM,IAGlD,OAAOrB,EA5CTvB,EAAA6C,EAAA3C,EAAA,sBAAAmC","file":"pre-load-image-js.js","sourcesContent":["import { getRandomDummyImages } from \"../src/pg/utils/image\";\n\nconst imageBox = document.getElementById('image-box');\nlet imageBoxIndex = 0;\nconst imageSet1 = getRandomDummyImages(400, 200, 10);\n\nimageBox.style.backgroundImage = getBackgroundImage(imageSet1[imageBoxIndex]);\n\naddClickEvent('image-box-prev-btn', function () {\n  if (imageBoxIndex < 1) {\n    return;\n  }\n  imageBoxIndex -= 1;\n  imageBox.style.backgroundImage = getBackgroundImage(imageSet1[imageBoxIndex]);\n});\n\naddClickEvent('image-box-next-btn', function () {\n  if (imageBoxIndex >= imageSet1.length - 1) {\n    return;\n  }\n  imageBoxIndex += 1;\n  imageBox.style.backgroundImage = getBackgroundImage(imageSet1[imageBoxIndex]);\n});\n\nconst preloadImageBox = document.getElementById('preload-image-box');\nlet preloadImageBoxIndex = 0;\nconst imageSet2 = getRandomDummyImages(400, 200, 10);\n\npreloadImageBox.style.backgroundImage = getBackgroundImage(imageSet2[preloadImageBoxIndex]);\npreloadImages(imageSet2);\n\naddClickEvent('preload-image-box-prev-btn', function () {\n  if (preloadImageBoxIndex < 1) {\n    return;\n  }\n  preloadImageBoxIndex -= 1;\n  preloadImageBox.style.backgroundImage = getBackgroundImage(imageSet2[preloadImageBoxIndex]);\n});\n\naddClickEvent('preload-image-box-next-btn', function () {\n  if (preloadImageBoxIndex >= imageSet2.length - 1) {\n    return;\n  }\n  preloadImageBoxIndex += 1;\n  preloadImageBox.style.backgroundImage = getBackgroundImage(imageSet2[preloadImageBoxIndex]);\n});\n\nfunction preloadImages(images) {\n  images.forEach(function (src) {\n    setTimeout(() => {\n      let img = new Image();\n      img.src = src;\n      img.onload = () => {\n        img = null;\n      };\n    });\n  });\n}\n\nfunction getBackgroundImage(src) {\n  return 'url(' + src + ')';\n}\n\nfunction addClickEvent(id, callback) {\n  document.getElementById(id).addEventListener('click', callback);\n}\n","/**\n * @module pg/utils/image\n */\n\n/**\n * Gets a random hex color\n *\n * @return {string} The random hex color.\n * @api\n */\nexport function getRandomHexColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n * Gets a random dummy images\n *\n * @param {number} width The image width.\n * @param {number} height The image height.\n * @param {number} size The images size.\n * @return {Array<string>} The random dummy images.\n * @api\n */\nexport function getRandomDummyImages(width, height, size) {\n  if (\n    typeof width !== 'number' ||\n    typeof height !== 'number' ||\n    typeof size !== 'number'\n  ) {\n    throw new TypeError('Must be params number');\n  }\n\n  const baseUrl = `https://dummyimage.com/${width}x${height}/`;\n  const images = [];\n\n  for (let i = 0; i < size; i++) {\n    images.push(baseUrl + getRandomHexColor().slice(1));\n  }\n\n  return images;\n}\n"],"sourceRoot":""}