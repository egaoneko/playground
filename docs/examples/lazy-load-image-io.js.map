{"version":3,"sources":["webpack:///../src/pg/utils/image.js","webpack:///./lazy-load-image-io.js"],"names":["getRandomHexColor","const","color","i","Math","floor","random","getRandomDummyImages","width","height","size","TypeError","baseUrl","images","push","slice","__webpack_require__","d","__webpack_exports__","r","_src_pg_utils_image__WEBPACK_IMPORTED_MODULE_0__","scrollBox","document","getElementById","imageBox","imageSet","Object","io","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","target","image","src","getAttribute","loadImage","unobserve","frag","createDocumentFragment","appendChild","Image","setAttribute","div","createElement","className","getImages","loadImagesBlock","scrollTop","scrollLeft","Array","from","querySelectorAll","el","observe"],"mappings":"wFAUO,SAASA,IAGd,IAFAC,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHc,mBAGGE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,EAYF,SAASK,EAAqBC,EAAOC,EAAQC,GAClD,GACmB,iBAAVF,GACW,iBAAXC,GACS,iBAATC,EAEP,MAAM,IAAIC,UAAU,yBAMtB,IAHAV,IAAMW,EAAU,0BAA0BJ,EAAK,IAAIC,EAAM,IACnDI,KAEGV,EAAI,EAAGA,EAAIO,EAAMP,IACxBU,EAAOC,KAAKF,EAAUZ,IAAoBe,MAAM,IAGlD,OAAOF,EA5CTG,EAAAC,EAAAC,EAAA,sBAAAX,oCCAAS,EAAAG,EAAAD,GAAA,IAAAE,EAAAJ,EAAA,GAEMK,EAAYC,SAASC,eAAe,cACpCC,EAAWF,SAASC,eAAe,aACnCE,EAAWC,OAAAN,EAAA,EAAAM,CAAqB,IAAK,IAAK,KAC1CC,EAAK,IAAIC,qBAAoB,SAAEC,EAASC,GAC5CD,EAAQE,QAAO,SAACC,GACd,GAAKA,EAAMC,eAAX,CAIAhC,IAAMiC,EAASF,EAAME,QAyBzB,SAAmBC,GACjBA,EAAMC,IAAMD,EAAME,aAAa,YAxB7BC,CAAUJ,GACVJ,EAASS,UAAUL,SAcvB,SAAyBrB,GACvBZ,IAAMuC,EAAOlB,SAASmB,yBACtB5B,EAAOkB,QAAQ,SAAUK,GACvBI,EAAKE,YAST,SAAmBN,GACjBnC,IAAMkC,EAAQ,IAAIQ,MAClBR,EAAMS,aAAa,WAAYR,GAE/BnC,IAAM4C,EAAMvB,SAASwB,cAAc,OAGnC,OAFAD,EAAIE,UAAY,cAChBF,EAAIH,YAAYP,GACTU,EAhBYG,CAAUZ,MAE7BZ,EAASkB,YAAYF,GAfvBS,CAAgBxB,GAChBJ,EAAU6B,UAAY,IACtB7B,EAAU8B,WAAa,KAEEC,MAAMC,KAAK/B,SAASgC,iBAAiB,uBAE7CvB,QAAO,SAACwB,GACvB5B,EAAG6B,QAAQD","file":"lazy-load-image-io.js","sourcesContent":["/**\n * @module pg/utils/image\n */\n\n/**\n * Gets a random hex color\n *\n * @return {string} The random hex color.\n * @api\n */\nexport function getRandomHexColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n * Gets a random dummy images\n *\n * @param {number} width The image width.\n * @param {number} height The image height.\n * @param {number} size The images size.\n * @return {Array<string>} The random dummy images.\n * @api\n */\nexport function getRandomDummyImages(width, height, size) {\n  if (\n    typeof width !== 'number' ||\n    typeof height !== 'number' ||\n    typeof size !== 'number'\n  ) {\n    throw new TypeError('Must be params number');\n  }\n\n  const baseUrl = `https://dummyimage.com/${width}x${height}/`;\n  const images = [];\n\n  for (let i = 0; i < size; i++) {\n    images.push(baseUrl + getRandomHexColor().slice(1));\n  }\n\n  return images;\n}\n","import { getRandomDummyImages } from \"../src/pg/utils/image\";\n\nconst scrollBox = document.getElementById('scroll-box');\nconst imageBox = document.getElementById('image-box');\nconst imageSet = getRandomDummyImages(200, 100, 300);\nconst io = new IntersectionObserver((entries, observer) => {\n  entries.forEach(entry => {\n    if (!entry.isIntersecting) {\n      return;\n    }\n\n    const target = entry.target;\n\n    loadImage(target);\n    observer.unobserve(target);\n  });\n});\n\nloadImagesBlock(imageSet);\nscrollBox.scrollTop = 1000;\nscrollBox.scrollLeft = 1500;\n\nconst lazyLoadImageSet = Array.from(document.querySelectorAll('.image-block > img'));\n\nlazyLoadImageSet.forEach(el => {\n  io.observe(el);\n});\n\nfunction loadImagesBlock(images) {\n  const frag = document.createDocumentFragment();\n  images.forEach(function (src) {\n    frag.appendChild(getImages(src));\n  });\n  imageBox.appendChild(frag);\n}\n\nfunction loadImage(image) {\n  image.src = image.getAttribute('data-src');\n}\n\nfunction getImages(src) {\n  const image = new Image();\n  image.setAttribute('data-src', src);\n\n  const div = document.createElement('div');\n  div.className = 'image-block';\n  div.appendChild(image);\n  return div;\n}\n"],"sourceRoot":""}