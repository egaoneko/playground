{"version":3,"sources":["webpack:///../src/pg/math/vector3.js","webpack:///./utils/webgl/mesh-utils.js","webpack:///./utils/webgl/object-utils.js","webpack:///./webgl-physics-collision-detection.js"],"names":["Vector3","x","y","z","this","prototype","divide","scala","Error","cross","vector","const","length","Math","sqrt","normalize","__webpack_require__","d","__webpack_exports__","setupPlaneMesh","setupSphereMesh","_src_pg_math_vector3__WEBPACK_IMPORTED_MODULE_0__","gl","buffers","n","options","vertexPositionData","indexData","textureData","size","Object","assign","color","translation","textured","normalData","colorData","trianglesNormalBuffers","trianglesColorBuffers","trianglesVerticeBuffers","trianglesTexCoordBuffers","vertexIndexBuffers","i","push","j","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","ELEMENT_ARRAY_BUFFER","Uint16Array","STREAM_DRAW","radius","division","smoothShading","latitudeBands","longitudeBands","latNumber","theta","PI","sinTheta","sin","cosTheta","cos","longNumber","phi","sinPhi","let","first","second","origVertices","indices","vertices","a","calculateFlattenedVertices","origNormals","normals","b","c","n1","n2","n3","nx","ny","nz","v3","calculatePerFaceNormals","SphereObject","properties","position","velocity","acceleration","vboIndex","r","_utils_webgl_mesh_utils__WEBPACK_IMPORTED_MODULE_0__","_utils_webgl_object_utils__WEBPACK_IMPORTED_MODULE_1__","_src_pg_math_vector3__WEBPACK_IMPORTED_MODULE_2__","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","vertexNormalAttribute","vertexColorAttribute","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","paused","SHADER","flat","sceneElements","start","zoom","INITIAL_HEIGHT_TRANSLATION_OF_SPHERES","GROUND_Y","ELASTICITY","PLANE_SIZE","NUM_SPHERES","makeShader","source","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","searchForObject","arr","index","isAboveGround","sphere","setMatrixUniforms","uniformMatrix4fv","pMatrixUniform","mvMatrixUniform","uniformMatrix3fv","normalMatrixUniform","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","e","pageX","pageY","mouseMoveHandler","mouseUpHandler","removeEventListener","adjustZoom","delta","stopPropagation","preventDefault","wheelDelta","originalEvent","detail","initEvents","getContext","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","createProgram","useProgram","getUniformLocation","random","getAttribLocation","enableVertexAttribArray","setupMeshes","animLoop","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","viewport","perspective","identity","translate","scale","invertedMatrix","fromMat4","invert","transpose","vertexAttribPointer","FLOAT","disable","BLEND","blendFunc","SRC_ALPHA","ONE","blendEquation","FUNC_ADD","drawElements","TRIANGLES","UNSIGNED_SHORT","drawScene","requestAnimationFrame","evt","keyCode"],"mappings":"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","file":"webgl-physics-collision-detection.js","sourcesContent":["/**\n * @module pg/math/vector3\n */\n\n/**\n * @classdesc\n * Vector 3D\n *\n * @api\n */\n\nexport default class Vector3 {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Divide by number\n   * @param {number} scala number for dividing\n   * @return {Vector3} this\n   * @api\n   */\n  divide(scala) {\n    if (typeof scala !== 'number') {\n      throw new Error(`invalid input: ${scala}`);\n    }\n\n    this.x /= scala;\n    this.y /= scala;\n    this.z /= scala;\n\n    return this;\n  }\n\n  /**\n   * Get crossed vector.\n   * @param {Vector3} vector vector for cross\n   * @return {Vector3} this\n   * @api\n   */\n  cross(vector) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n\n    if (!(vector instanceof Vector3)) {\n      throw new Error(`invalid input: ${vector}`);\n    }\n\n    this.x = y * vector.z - z * vector.y;\n    this.y = z * vector.x - x * vector.z;\n    this.z = x * vector.y - y * vector.x;\n  }\n\n  /**\n   * Get length of vector.\n   * @return {number} length\n   * @api\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  /**\n   * Get normalized vector\n   * @return {Vector3} normalized vector\n   * @api\n   */\n  normalize() {\n    return this.divide(this.length());\n  }\n}\n","import Vector3 from \"../../../src/pg/math/vector3\";\n\nexport function setupPlaneMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    size: 10.0,\n    color: [0.5, 0.5, 1.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    textured: false,\n  }, options);\n\n  const size = options.size;\n  const color = options.color;\n  const translation = options.translation;\n  const textured = options.textured;\n\n  let vertexPositionData;\n  let indexData;\n  let textureData;\n  const normalData = [];\n  const colorData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //plane\n  for (let i = 0; i < 5; ++i) {\n    normalData.push(0.0);\n    normalData.push(1.0);\n    normalData.push(0.0);\n    colorData.push(color[0]);\n    colorData.push(color[1]);\n    colorData.push(color[2]);\n    colorData.push(color[3]);\n  }\n\n  vertexPositionData = [\n    0.0, 0.0, 0.0,\n    -size, 0.0, -size,\n    size, 0.0, -size,\n    size, 0.0, size,\n    -size, 0.0, size\n  ];\n\n  textureData = [\n    0.0, 0.0,\n    -size, -size,\n    size, -size,\n    size, size,\n    -size, size\n  ];\n\n\n  for (var j = 0; j < vertexPositionData.length; j += 3) {\n    vertexPositionData[j] += translation[0];\n    vertexPositionData[j + 1] += translation[1];\n    vertexPositionData[j + 2] += translation[2];\n  }\n\n  indexData = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1];\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nexport function setupSphereMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    color: [1.0, 0.0, 0.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    radius: 1.0,\n    division: 30,\n    smoothShading: true,\n    textured: false,\n  }, options);\n\n  const color = options.color;\n  const translation = options.translation;\n  const radius = options.radius;\n  const division = options.division;\n  const smoothShading = options.smoothShading;\n  const textured = options.textured;\n\n  let latitudeBands = division;\n  let longitudeBands = division;\n\n  let vertexPositionData = [];\n  let colorData = [];\n  let normalData = [];\n  const indexData = [];\n  const textureData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //modified from http://learningwebgl.com/cookbook/index.php/How_to_draw_a_sphere\n  for (let latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n    const theta = latNumber * Math.PI / latitudeBands;\n    const sinTheta = Math.sin(theta);\n    const cosTheta = Math.cos(theta);\n\n    for (let longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n      const phi = longNumber * 2 * Math.PI / longitudeBands;\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n\n      const x = cosPhi * sinTheta;\n      const y = cosTheta;\n      const z = sinPhi * sinTheta;\n      // const u = 1 - (longNumber / longitudeBands);\n      // const v = latNumber / latitudeBands;\n\n      textureData.push((x + 1.0) * .5);\n      textureData.push((y + 1.0) * .5);\n\n      normalData.push(x);\n      normalData.push(y);\n      normalData.push(z);\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n      vertexPositionData.push(radius * x + translation[0]);\n      vertexPositionData.push(radius * y + translation[1]);\n      vertexPositionData.push(radius * z + translation[2]);\n    }\n  }\n\n  for (let latNumber = 0; latNumber < latitudeBands; latNumber++) {\n    for (let longNumber = 0; longNumber < longitudeBands; longNumber++) {\n      const first = (latNumber * (longitudeBands + 1)) + longNumber;\n      const second = first + longitudeBands + 1;\n      indexData.push(first);\n      indexData.push(second);\n      indexData.push(first + 1);\n\n      indexData.push(second);\n      indexData.push(second + 1);\n      indexData.push(first + 1);\n    }\n  }\n\n  if (!smoothShading) {\n    vertexPositionData = calculateFlattenedVertices(vertexPositionData, indexData);\n    colorData = [];\n    for (let i = 0; i < indexData.length; ++i) {\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n    }\n    normalData = calculatePerFaceNormals(normalData, indexData);\n  }\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nfunction calculateFlattenedVertices(origVertices, indices) {\n  const vertices = [];\n  for (let i = 0; i < indices.length; ++i) {\n    const a = indices[i] * 3;\n    vertices.push(origVertices[a]);\n    vertices.push(origVertices[a + 1]);\n    vertices.push(origVertices[a + 2]);\n  }\n  return vertices;\n}\n\nfunction calculatePerFaceNormals(origNormals, indices) {\n  const normals = [];\n  for (let i = 0; i < indices.length; i += 3) {\n    const a = indices[i] * 3;\n    const b = indices[i + 1] * 3;\n    const c = indices[i + 2] * 3;\n\n    const n1 = new Vector3(origNormals[a], origNormals[a + 1], origNormals[a + 2]);\n    const n2 = new Vector3(origNormals[b], origNormals[b + 1], origNormals[b + 2]);\n    const n3 = new Vector3(origNormals[c], origNormals[c + 1], origNormals[c + 2]);\n\n    const nx = (n1.x + n2.x + n3.x) / 3;\n    const ny = (n1.y + n2.y + n3.y) / 3;\n    const nz = (n1.z + n2.z + n3.z) / 3;\n\n    const v3 = new Vector3(nx, ny, nz);\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n  }\n  return normals;\n}\n","import Vector3 from \"../../../src/pg/math/vector3\";\n\nexport class SphereObject {\n  constructor(properties) {\n    properties = Object.assign({}, {\n      radius: 1.0,\n      position: new Vector3(0.0, 0.0, 0.0),\n      velocity: new Vector3(0.0, 0.0, 0.0),\n      acceleration: new Vector3(0.0, 0.0, 0.0),\n    }, properties);\n\n    this.radius = properties.radius;\n    this.position = properties.position;\n    this.velocity = properties.velocity;\n    this.acceleration = properties.acceleration;\n    this.vboIndex = properties.vboIndex;\n  }\n}\n","import {setupPlaneMesh, setupSphereMesh} from \"./utils/webgl/mesh-utils\";\nimport {SphereObject} from \"./utils/webgl/object-utils\";\nimport Vector3 from \"../src/pg/math/vector3\";\n\nlet gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet vertexNormalAttribute = null;\nlet vertexColorAttribute = null;\nlet trianglesVerticeBuffers = [];\nlet trianglesNormalBuffers = [];\nlet trianglesColorBuffers = [];\nlet vertexIndexBuffers = [];\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nlet paused = false;\n\nconst SHADER = {\n  flat: {\n    vertexShader: flatVertexShaderSource(),\n    fragmentShader: flatFragmentShaderSource()\n  }\n};\n\nconst sceneElements = [];\nlet capture = false;\nlet start = [];\nlet angleX = 0;\nlet angleY = 0;\nlet zoom = 1.0;\n\nconst INITIAL_HEIGHT_TRANSLATION_OF_SPHERES = 5.0;\nconst GROUND_Y = -1.0;\nconst ELASTICITY =  -0.8;\nconst PLANE_SIZE = 10.0;\nconst NUM_SPHERES = 50;\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n    default:\n      break;\n  }\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  initEvents();\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    setupMeshes();\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        drawScene();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction initEvents() {\n  canvas.addEventListener('mousedown', (e) => {\n    capture = true;\n    start = [e.pageX, e.pageY];\n\n    const mouseMoveHandler = (e) => {\n      const x = e.pageX - start[0];\n      const y = e.pageY - start[1];\n\n      // start update\n      start[0] = e.pageX;\n      start[1] = e.pageY;\n\n      angleX += x;\n      angleY += y;\n    };\n    const mouseUpHandler = () => {\n      document.removeEventListener('mousemove', mouseMoveHandler);\n      document.removeEventListener('mouseup', mouseUpHandler);\n      capture = false;\n    };\n\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n  });\n\n  const adjustZoom = (delta) => {\n    if (delta > 0) {\n      zoom += 1;\n    } else {\n      zoom -= 0.1;\n      if (zoom < 0.01) {\n        zoom = 0.1;\n      }\n    }\n  };\n  canvas.addEventListener('mousewheel', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    adjustZoom(e.wheelDelta);\n  });\n  canvas.addEventListener('DOMMouseScroll', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    adjustZoom(e.originalEvent.detail * -0.1);\n  });\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.7, 0.7, 0.7, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n}\n\nfunction initShaders() {\n  createProgram('flat');\n}\n\nfunction createProgram(type) {\n  // create program\n  glProgram = gl.createProgram();\n  attachShader(glProgram, type);\n  // use program\n  gl.useProgram(glProgram);\n  getMatrixUniforms();\n}\n\nfunction attachShader(glProgram, type) {\n  // get shader source\n  const vsSource = SHADER[type].vertexShader;\n  const fsSource = SHADER[type].fragmentShader;\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction setupMeshes() {\n\n  setupPlaneMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    0,\n    {\n      translation: [0.0, GROUND_Y, 0.0],\n    }\n  );\n\n  for (let i = 1; i <= NUM_SPHERES; ++i) {\n    const radius = 0.5 * Math.random() + 0.25\n    setupSphereMesh(\n      gl,\n      {\n        trianglesNormalBuffers,\n        trianglesColorBuffers,\n        trianglesVerticeBuffers,\n        vertexIndexBuffers,\n      },\n      i,\n      {\n        color: [Math.random(), Math.random(), Math.random(), 1.0],\n        radius: radius,\n      }\n    );\n\n    sceneElements.push(new SphereObject({\n      vboIndex: i,\n      radius: radius,\n      position: new Vector3(10.0 * Math.random() - 5.0, -5.0 * Math.random(), 10.0 * Math.random() - 5.0),\n      acceleration: new Vector3(0.0, 0.01, 0.0)\n    }));\n  }\n\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, \"aVertexPosition\");\n  vertexColorAttribute = gl.getAttribLocation(glProgram, \"aVertexColor\");\n  vertexNormalAttribute = gl.getAttribLocation(glProgram, \"aVertexNormal\");\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.enableVertexAttribArray(vertexColorAttribute);\n  gl.enableVertexAttribArray(vertexNormalAttribute);\n}\n\nfunction searchForObject(arr, index) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].vboIndex === index) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction isAboveGround(n) {\n  const sphere = sceneElements[n];\n  return INITIAL_HEIGHT_TRANSLATION_OF_SPHERES - (sphere.position.y + sphere.radius) > GROUND_Y;\n}\n\nfunction drawScene() {\n  for (let i = 0; i < vertexIndexBuffers.length; ++i) {\n    mat4.identity(mvMatrix);\n    mat4.translate(mvMatrix, mvMatrix, [0.0, -1.0, -15.5]);\n\n    const n = searchForObject(sceneElements, i);\n    if (n !== -1) {\n      const sphere = sceneElements[n];\n      if (isAboveGround(n)) {\n        sphere.velocity.y += sphere.acceleration.y;\n        sphere.position.y += sphere.velocity.y;\n      } else {\n        sphere.position.y -= sphere.velocity.y;\n        sphere.velocity.y *= ELASTICITY;\n      }\n\n      if (sphere.position.x > PLANE_SIZE || sphere.position.x < -PLANE_SIZE) {\n        sphere.position.x += (-1.0 * sphere.velocity.x);\n        sphere.position.x *= -1.0;\n      } else {\n        sphere.position.x += sphere.velocity.x;\n      }\n\n      if (sphere.position.z > PLANE_SIZE || sphere.position.z < -PLANE_SIZE) {\n        sphere.position.z += (-1.0 * sphere.velocity.z);\n        sphere.position.z *= -1.0;\n      } else {\n        sphere.position.z += sphere.velocity.z;\n      }\n\n      mat4.translate(mvMatrix, mvMatrix, [\n        sphere.position.x,\n        INITIAL_HEIGHT_TRANSLATION_OF_SPHERES - sphere.position.y,\n        sphere.position.z\n      ]);\n    }\n\n    // mat4.rotate(mvMatrix, mvMatrix, angleX * 2 * Math.PI / 180.0, [0.0, 1.0, 0.0]);\n    // mat4.rotate(mvMatrix, mvMatrix, angleY * 2 * Math.PI / 180.0, [1.0, 0.0, 0.0]);\n    mat4.scale(mvMatrix, mvMatrix, [zoom, zoom, zoom]);\n\n    const invertedMatrix = mat3.create();\n    mat3.fromMat4(invertedMatrix, mvMatrix);\n    mat3.invert(normalMatrix, invertedMatrix);\n    mat3.transpose(normalMatrix, normalMatrix);\n    setMatrixUniforms();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[i]);\n    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[i]);\n    gl.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[i]);\n    gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);\n\n    if (i !== 0 && i % 2 === 0) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n      gl.blendEquation(gl.FUNC_ADD);\n    } else {\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[i]);\n    gl.drawElements(gl.TRIANGLES, vertexIndexBuffers[i].numItems, gl.UNSIGNED_SHORT, 0);\n  }\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.normalMatrixUniform = gl.getUniformLocation(glProgram, \"uNormalMatrix\");\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n  gl.uniformMatrix3fv(glProgram.normalMatrixUniform, false, normalMatrix);\n}\n\nfunction flatVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform mat4 uPMatrix;    \n    uniform mat4 uMVMatrix;\n    uniform mat3 uNormalMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 L;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vec3 pointLightPosition = vec3(1.0, 2.0, -1.0);\n      vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - aVertexPosition.xyz));\n      vec3 ambientColor = vec3(0.1, 0.1, 0.1);\n      \n      L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      N = uNormalMatrix * aVertexNormal;\n      \n      vColor = aVertexColor;\n    }\n  `;\n}\n\nfunction flatFragmentShaderSource() {\n  return `\n    varying highp vec3 vColor;\n    varying highp vec3 N;\n    varying highp vec3 L;\n    \n    void main(void) {\n      highp float lambert = max(dot(normalize(N), normalize(L)), 0.0);\n      gl_FragColor = vec4(vColor * lambert, 1.0);\n    }\n  `;\n}\n"],"sourceRoot":""}