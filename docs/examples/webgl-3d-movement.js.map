{"version":3,"sources":["webpack:///./webgl-3d-movement.js"],"names":["let","gl","canvas","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","trianglesVerticesBuffer","vertexColorAttribute","trianglesColorBuffer","pMatrix","mat4","create","mvMatrix","angle","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","window","addEventListener","document","querySelector","container","width","clientWidth","height","clientHeight","getContext","e","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","pMatrixUniform","getUniformLocation","mvMatrixUniform","animLoop","clearColor","clear","COLOR_BUFFER_BIT","viewport","perspective","identity","translate","zTranslation","Math","sin","triangleVertices","DYNAMIC_DRAW","setupDynamicBuffers","uniformMatrix4fv","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLES","requestAnimationFrame"],"mappings":"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","file":"webgl-3d-movement.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet trianglesVerticesBuffer = null;\nlet vertexColorAttribute = null;\nlet trianglesColorBuffer = null;\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\n\nlet angle = 0.0;\n\nwindow.addEventListener('load', initWebGL);\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n  }\n\n  if (gl) {\n    initShaders();\n    setupBuffers();\n    getMatrixUniforms();\n    (function animLoop() {\n      setupWebGL();\n      setupDynamicBuffers();\n      setMatrixUniforms();\n      drawScene();\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.5, 0.1, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n  mat4.identity(mvMatrix);\n  mat4.translate(mvMatrix, mvMatrix, [0.0, 0.0, -2.0]);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n\n    uniform mat4 uPMatrix;    \n    uniform mat4 uMVMatrix;\n    \n    varying highp vec4 vColor;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      vColor = vec4(aVertexColor, 1.0);\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp vec4 vColor;\n    \n    void main(void) {\n      gl_FragColor = vColor;\n    }\n  `;\n}\n\nfunction setupBuffers() {\n  const triangleVerticesColors = [\n    // left triangle\n    1.0, 0.0, 0.0,\n    1.0, 1.0, 1.0,\n    1.0, 0.0, 0.0,\n\n    // right triangle\n    0.0, 0.0, 1.0,\n    1.0, 1.0, 1.0,\n    0.0, 0.0, 1.0,\n  ];\n\n  trianglesColorBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVerticesColors), gl.STATIC_DRAW);\n}\n\nfunction setupDynamicBuffers() {\n  // limit translation amount to -1.0 to 1.0\n  const zTranslation = Math.sin(angle);\n\n  const triangleVertices = [\n    // left triangle\n    -1.0, 0.5, 0.0 + zTranslation,\n    -0.5, 0.0, 0.0 + zTranslation,\n    -1.0, -0.5, 0.0 + zTranslation,\n\n    // right triangle\n    1.0, 0.5, 0.0 - zTranslation,\n    0.5, 0.0, 0.0 - zTranslation,\n    1.0, -0.5, 0.0 - zTranslation,\n  ];\n  angle += 0.01;\n\n  trianglesVerticesBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVertices), gl.DYNAMIC_DRAW);\n}\n\nfunction drawScene() {\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticesBuffer);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  vertexColorAttribute = gl.getAttribLocation(glProgram, 'aVertexColor');\n  gl.enableVertexAttribArray(vertexColorAttribute);\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffer);\n  gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 0, 0);\n\n  gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n}\n"],"sourceRoot":""}