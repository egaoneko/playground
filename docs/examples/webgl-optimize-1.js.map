{"version":3,"sources":["webpack:///./webgl-optimize-1.js"],"names":["let","gl","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","vertexNormalAttribute","vertexTexCoordAttribute","trianglesVerticeBuffers","trianglesNormalBuffers","trianglesTexCoordBuffers","vertexIndexBuffers","spherePositions","textures","textureImages","textureFilenames","topHalf","i","length","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","num_spheres","paused","SpherePosition","this","x_offset_orig","Math","random","y_offset_orig","z_offset_orig","x_offset","y_offset","z_offset","x_angle","y_angle","z_angle","angle","radius","push","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","setMvMatrix","sp","identity","translate","rotate","invertedMatrix","fromMat4","invert","transpose","cos","sin","setMatrixUniforms","uniformMatrix4fv","mvMatrixUniform","uniformMatrix3fv","normalMatrixUniform","loadTexture","Image","onload","activeTexture","TEXTURE0","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","isTexture","console","error","setupTexture","src","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","getContext","e","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","tex_scale_y","tex_start_y","active_num","indexOf","vertexPositionData","normalData","textureCoordData","indexData","latNumber","theta","PI","sinTheta","cosTheta","longNumber","phi","sinPhi","cosPhi","x","y","z","u","v","first","second","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","ELEMENT_ARRAY_BUFFER","Uint16Array","STREAM_DRAW","setupSphereData","pMatrixUniform","getUniformLocation","samplerUniform","uniform1i","loadTextures","viewport","perspective","getAttribLocation","enableVertexAttribArray","animLoop","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","drawScene","requestAnimationFrame","evt","keyCode"],"mappings":"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","file":"webgl-optimize-1.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet vertexNormalAttribute = null;\nlet vertexTexCoordAttribute = null;\nconst trianglesVerticeBuffers = [];\nconst trianglesNormalBuffers = [];\nconst trianglesTexCoordBuffers = [];\nconst vertexIndexBuffers = [];\n\nconst spherePositions = [];\nconst textures = [];\nconst textureImages = [];\nconst textureFilenames = [\n  'sun.png',\n  'earth.jpg',\n  'mars.jpg',\n  'moon.jpg',\n  'jupiter.jpg',\n  'saturn.jpg',\n];\nconst topHalf = [1, 2, 4, 5];\nconst texture_directory = 'data/img/';\n\nfor (let i = 0; i < textureFilenames.length; ++i) {\n  textureFilenames[i] = texture_directory + textureFilenames[i];\n}\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nconst num_spheres = 1000;\nlet paused = false;\n\nclass SpherePosition {\n  constructor() {\n    this.x_offset_orig = 10.0 - Math.random() * 20.0;\n    this.y_offset_orig = 10.0 - Math.random() * 20.0;\n    this.z_offset_orig = -25.0 + Math.random() * 12.0;\n\n    this.x_offset = this.x_offset_orig;\n    this.y_offset = this.y_offset_orig;\n    this.z_offset = this.z_offset_orig;\n\n    this.x_angle = Math.random() * 360;\n    this.y_angle = Math.random() * 360;\n    this.z_angle = Math.random() * 360;\n    this.angle = 0.005;\n    this.radius = 0.1 + Math.random() * .2;\n  }\n}\n\nfor (let i = 0; i < num_spheres; ++i) {\n  spherePositions.push(new SpherePosition());\n}\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n  }\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    setupSphereData();\n\n    getMatrixUniforms();\n    loadTextures();\n\n    gl.viewport(0, 0, canvas.width, canvas.height);\n    mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n    gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n    vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n    vertexNormalAttribute = gl.getAttribLocation(glProgram, 'aVertexNormal');\n    vertexTexCoordAttribute = gl.getAttribLocation(glProgram, 'aVertexTexCoord');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    gl.enableVertexAttribArray(vertexNormalAttribute);\n    gl.enableVertexAttribArray(vertexTexCoordAttribute);\n\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        drawScene();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.5, 0.1, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexNormal;\n    attribute vec2 aVertexTexCoord;\n    \n    uniform mat3 uNormalMatrix;\n    uniform mat4 uMVMatrix;\n    uniform mat4 uPMatrix;\n    \n    varying highp float vLight;\n    varying highp vec2 vTextureCoord;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      vTextureCoord = aVertexTexCoord;\n      \n      vec3 pointLightPosition = vec3(1.0,2.0,-1.0);\n      vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - aVertexPosition.xyz));\n       \n      vec3 L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      vec3 N = uNormalMatrix * aVertexNormal;\n      float lambert = max(dot(normalize(N), normalize(L)), 0.0);\n      vLight = 0.1 + lambert;\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp float vLight;\n    varying highp vec2 vTextureCoord;\n    \n    uniform sampler2D uSampler;\n    \n    void main(void) {\n      highp vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.st));\n      gl_FragColor = vec4(textureColor.xyz * vLight, textureColor.a);\n    }\n  `;\n}\n\nfunction setMvMatrix(sp) {\n  mat4.identity(mvMatrix);\n  mat4.identity(normalMatrix);\n  mat4.translate(mvMatrix, mvMatrix, [sp.x_offset, sp.y_offset, sp.z_offset]);\n  mat4.rotate(mvMatrix, mvMatrix, sp.angle, [sp.x_angle, sp.y_angle, sp.z_angle]);\n\n  const invertedMatrix = mat3.create();\n  mat3.fromMat4(invertedMatrix, mvMatrix);\n  mat3.invert(normalMatrix, invertedMatrix);\n  mat3.transpose(normalMatrix, normalMatrix);\n\n  sp.x_angle += Math.random();\n  sp.y_angle += Math.random();\n  sp.z_angle += Math.random();\n  sp.x_offset = (Math.cos(sp.angle) * sp.x_offset_orig);\n  sp.y_offset = (Math.sin(sp.angle) * sp.y_offset_orig);\n  sp.z_offset = -25.0 + 12.0 * Math.sin(sp.angle);\n  sp.angle += 0.005;\n}\n\nfunction drawScene() {\n  for (let i = 0; i < num_spheres; ++i) {\n    setMvMatrix(spherePositions[i]);\n    setMatrixUniforms();\n\n    const active_num = i % textures.length;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[i]);\n    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[i]);\n    gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);\n\n    gl.activeTexture(gl.TEXTURE0 + active_num);\n    gl.uniform1i(glProgram.samplerUniform, active_num);//textures[active_num]);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[i]);\n    gl.vertexAttribPointer(vertexTexCoordAttribute, 2, gl.FLOAT, false, 0, 0);\n    gl.drawElements(gl.TRIANGLES, vertexIndexBuffers[i].numItems, gl.UNSIGNED_SHORT, 0);\n  }\n}\n\n//modified from http://learningwebgl.com/cookbook/index.php/How_to_draw_a_sphere\nfunction setupSphereData() {\n  for (let i = 0; i < num_spheres; ++i) {\n    let tex_scale_x = 1;\n    let tex_scale_y = 1;\n    let tex_start_x = 0;\n    let tex_start_y = 0;\n\n    const active_num = i % textureFilenames.length;\n    if (topHalf.indexOf(active_num) !== -1) {\n      tex_start_y = 0.5;\n      tex_scale_y = 0.5;\n    }\n\n    const latitudeBands = 30;\n    const longitudeBands = 30;\n    const radius = spherePositions[i].radius;\n\n    const vertexPositionData = [];\n    const normalData = [];\n    const textureCoordData = [];\n    const indexData = [];\n\n    for (let latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n      const theta = latNumber * Math.PI / latitudeBands;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      for (let longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n        const phi = longNumber * 2 * Math.PI / longitudeBands;\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n\n        const x = cosPhi * sinTheta;\n        const y = cosTheta;\n        const z = sinPhi * sinTheta;\n        const u = 1 - (longNumber / longitudeBands);\n        const v = latNumber / latitudeBands;\n\n        normalData.push(x);\n        normalData.push(y);\n        normalData.push(z);\n        textureCoordData.push(u * tex_scale_x + tex_start_x);\n        textureCoordData.push(v * tex_scale_y + tex_start_y);\n        vertexPositionData.push(radius * x);\n        vertexPositionData.push(radius * y);\n        vertexPositionData.push(radius * z);\n      }\n    }\n\n    for (let latNumber = 0; latNumber < latitudeBands; latNumber++) {\n      for (let longNumber = 0; longNumber < longitudeBands; longNumber++) {\n        const first = (latNumber * (longitudeBands + 1)) + longNumber;\n        const second = first + longitudeBands + 1;\n        indexData.push(first);\n        indexData.push(second);\n        indexData.push(first + 1);\n\n        indexData.push(second);\n        indexData.push(second + 1);\n        indexData.push(first + 1);\n      }\n    }\n    trianglesNormalBuffers[i] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[i]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n    trianglesNormalBuffers[i].itemSize = 3;\n    trianglesNormalBuffers[i].numItems = normalData.length / 3;\n\n    trianglesTexCoordBuffers[i] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[i]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[i].itemSize = 2;\n    trianglesTexCoordBuffers[i].numItems = textureCoordData.length / 2;\n\n    trianglesVerticeBuffers[i] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[i]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n    trianglesVerticeBuffers[i].itemSize = 3;\n    trianglesVerticeBuffers[i].numItems = vertexPositionData.length / 3;\n\n    vertexIndexBuffers[i] = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[i]);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n    vertexIndexBuffers[i].itemSize = 3;\n    vertexIndexBuffers[i].numItems = indexData.length;\n  }\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.normalMatrixUniform = gl.getUniformLocation(glProgram, 'uNormalMatrix');\n  glProgram.samplerUniform = gl.getUniformLocation(glProgram, 'uSampler');\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n  gl.uniformMatrix3fv(glProgram.normalMatrixUniform, false, normalMatrix);\n}\n\nfunction loadTextures() {\n  for (let i = 0; i < textureFilenames.length; ++i) {\n    loadTexture(i);\n  }\n  gl.uniform1i(glProgram.samplerUniform, textures[0]);\n}\n\nfunction loadTexture(i) {\n  textureImages[i] = new Image();\n  textureImages[i].onload = function () {\n    setupTexture(i);\n  };\n  textureImages[i].src = textureFilenames[i];\n}\n\nfunction setupTexture(i) {\n  gl.activeTexture(gl.TEXTURE0 + i);\n  textures[i] = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, textures[i]);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImages[i]);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n  if (!gl.isTexture(textures[i])) {\n    console.error('Error: Texture is invalid');\n  }\n}\n"],"sourceRoot":""}