{"version":3,"sources":["webpack:///./webgl-convolution-kernel.js"],"names":["let","gl","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","trianglesVerticeBuffer","vertexIndexBuffer","texture","textureImage","kernelUniform","kernelWeightUniform","embossUniform","kernels","no_effect","sharpen1","sharpen2","sobel_edges_y","sobel_edges_x","sobel_both","blur","gaussian_blur","edge_detect","emboss1","emboss2","emboss3","emboss4","current_kernel","emboss","radios","document","querySelectorAll","changeHandler","this","value","indexOf","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","drawScene","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","drawElements","TRIANGLES","numItems","UNSIGNED_SHORT","sumArray","a","sum","key","hasOwnProperty","window","addEventListener","querySelector","width","clientWidth","height","clientHeight","getContext","e","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","size","vertexPositionData","indexData","createBuffer","bufferData","Float32Array","STATIC_DRAW","itemSize","length","Uint16Array","STREAM_DRAW","createSquare","Image","src","getAttribLocation","enableVertexAttribArray","getUniformLocation","onload","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","uniform1i","samplerUniform","isTexture","generateMipmap","uniform2f","setupTexture","animLoop","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","uniform1fv","uniform1f","viewport","currentKernel","slice","currentKernelWeight","requestAnimationFrame","Array","prototype","forEach","call","radio"],"mappings":"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","file":"webgl-convolution-kernel.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet trianglesVerticeBuffer = null;\nlet vertexIndexBuffer = null;\n\nlet texture = null;\nlet textureImage = null;\n\nlet kernelUniform = null;\nlet kernelWeightUniform = null;\nlet embossUniform = null;\nconst kernels = {\n  'no_effect': [\n    0, 0, 0,\n    0, 1, 0,\n    0, 0, 0\n  ],\n  'sharpen1': [\n    0, -1, 0,\n    -1, 4, -1,\n    0, -1, 0\n  ],\n  'sharpen2': [\n    -1, -1, -1,\n    -1, 8, -1,\n    -1, -1, -1\n  ],\n  'sobel_edges_y': [\n    -1, 0, 1,\n    -2, 0, 2,\n    -1, 0, 1\n  ],\n  'sobel_edges_x': [\n    -1, -2, -1,\n    0, 0, 0,\n    1, 2, 1\n  ],\n  'sobel_both': [\n    -2, -2, 0,\n    -2, 0, 2,\n    0, 2, 2\n  ],\n  'blur': [\n    1, 1, 1,\n    1, 1, 1,\n    1, 1, 1\n  ],\n  'gaussian_blur': [\n    0.045, 0.122, 0.045,\n    0.122, 0.332, 0.122,\n    0.045, 0.122, 0.045\n  ],\n  'edge_detect': [\n    0, 1, 0,\n    1, -4, 1,\n    0, 1, 0\n  ],\n  'emboss1':[\n    -1, -1, 0,\n    -1, 0, 1,\n    0, 1, 1\n  ],\n  'emboss2':[\n    1, 1, 0,\n    1, 0, -1,\n    0, -1, -1\n  ],\n  'emboss3':[\n    0, -1, -1,\n    1, 0, -1,\n    1, 1, 0\n  ],\n  'emboss4':[\n    0, 1, 1,\n    -1, 0, 1,\n    -1, -1, 0\n  ]\n};\nlet current_kernel = 'no_effect';\nlet emboss = false;\n\nconst radios = document.querySelectorAll('input[type=radio][name=\"kernel\"]');\n\nwindow.addEventListener('load', initWebGL);\n\nfunction changeHandler() {\n  current_kernel = this.value;\n  emboss = this.value.indexOf('emboss') !== -1;\n}\n\nArray.prototype.forEach.call(radios, function (radio) {\n  radio.addEventListener('change', changeHandler);\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    createSquare();\n\n    loadTexture();\n\n    vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    kernelUniform = gl.getUniformLocation(glProgram, 'uKernel');\n    kernelWeightUniform = gl.getUniformLocation(glProgram, 'uKernelWeight');\n    embossUniform = gl.getUniformLocation(glProgram, 'uEmboss');\n\n    textureImage.onload = function () {\n      setupTexture();\n\n      (function animLoop() {\n        setupWebGL();\n\n        // left\n        gl.uniform1fv(kernelUniform, kernels.no_effect);\n        gl.uniform1i(embossUniform, 0);\n        gl.uniform1f(kernelWeightUniform, sumArray(kernels.no_effect));\n        gl.viewport(0, 0, canvas.width / 3.0, canvas.height);\n        drawScene();\n\n        const currentKernel = kernels[current_kernel].slice();\n        const currentKernelWeight = sumArray(currentKernel);\n\n        // center\n        gl.uniform1fv(kernelUniform, currentKernel);\n        gl.uniform1f(kernelWeightUniform, currentKernelWeight);\n        gl.viewport(canvas.width / 3.0, 0, canvas.width / 3.0, canvas.height);\n        drawScene();\n\n        // right â€“ kernel result added to our original image\n\n        if (current_kernel !== 'no_effect') {\n          currentKernel[4] += 1;\n        }\n        gl.uniform1fv(kernelUniform, currentKernel);\n\n        if (emboss) {\n          gl.uniform1i(embossUniform, 1);\n        } else {\n          gl.uniform1i(embossUniform, 0);\n        }\n\n        if (current_kernel === 'no_effect') {\n          gl.uniform1f(kernelWeightUniform, currentKernelWeight);\n        } else {\n          gl.uniform1f(kernelWeightUniform, currentKernelWeight + 1);\n        }\n        gl.viewport(2.0 * canvas.width / 3.0, 0, canvas.width / 3.0, canvas.height);\n        drawScene();\n\n        requestAnimationFrame(animLoop);\n      })();\n    };\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.1, 0.1, 0.1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    \n    varying vec2 position;\n    void main(void) {\n      position = vec2(aVertexPosition.xy);\n      gl_Position = vec4(position, 0.0, 1.0);\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp vec2 position;\n    uniform sampler2D uSampler;\n    uniform highp vec2 uTexDimensions;\n    uniform highp float uKernel[9];\n    uniform highp float uKernelWeight;\n    uniform highp int uEmboss;\n    \n    void main(void) {\n      //convert texture coordinates from [-1, 1] to [0, 1]\n      highp vec2 texCoords = position * 0.5 + .5;\n      \n      //find the size of each pixel relative to the [0, 1] range\n      highp vec2 texelSize = vec2(1.0, 1.0) / uTexDimensions;\n      \n      //modified from http://games.greggman.com/game/webgl-image-processing/\n      highp vec4 colorSum =\n        texture2D(uSampler, texCoords + texelSize * vec2(-1, -1)) * uKernel[0] +\n        texture2D(uSampler, texCoords + texelSize * vec2( 0, -1)) * uKernel[1] +\n        texture2D(uSampler, texCoords + texelSize * vec2( 1, -1)) * uKernel[2] +\n        \n        texture2D(uSampler, texCoords + texelSize * vec2(-1,  0)) * uKernel[3] +\n        \n        //central pixel\n        texture2D(uSampler, texCoords) * uKernel[4] +     \n        texture2D(uSampler, texCoords + texelSize * vec2( 1,  0)) * uKernel[5] +\n        \n        texture2D(uSampler, texCoords + texelSize * vec2(-1,  1)) * uKernel[6] +\n        texture2D(uSampler, texCoords + texelSize * vec2( 0,  1)) * uKernel[7] +\n        texture2D(uSampler, texCoords + texelSize * vec2( 1,  1)) * uKernel[8];\n        \n      highp float weight;\n      weight = uKernelWeight;\n      if (0.01 > weight) {\n        weight = 1.0;\n      }\n      \n      highp vec3 color = (colorSum/weight).rgb;\n      \n      if(uEmboss == 1) {\n        //to grayscale\n        highp float gray = dot(color, vec3(.3,.59,.11) )  +.5;\n        highp vec3 finalColor = vec3(gray,gray,gray);\n        gl_FragColor = vec4( finalColor, 1.0 );\n      }else{\n        gl_FragColor = vec4( color, 1.0 );\n      }\n    }\n  `;\n}\n\nfunction drawScene() {\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffer);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);\n  gl.drawElements(gl.TRIANGLES, vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n}\n\nfunction createSquare(size = 2.0) {\n  const vertexPositionData = [\n    0.0, 0.0, 0.0,\n    -size * 0.5, -size * 0.5, 0.0,\n    size * 0.5, -size * 0.5, 0.0,\n    size * 0.5, size * 0.5, 0.0,\n    -size * 0.5, size * 0.5, 0.0,\n  ];\n\n  const indexData = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1];\n  trianglesVerticeBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffer.itemSize = 3;\n  trianglesVerticeBuffer.numItems = vertexPositionData.length / 3;\n  vertexIndexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffer.itemSize = 3;\n  vertexIndexBuffer.numItems = indexData.length;\n}\n\nfunction loadTexture() {\n  textureImage = new Image();\n  textureImage.src = 'data/img/iu/iu01.jpg';\n}\n\nfunction setupTexture() {\n  texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  gl.uniform1i(glProgram.samplerUniform, 0);\n\n  if (!gl.isTexture(texture)) {\n    console.error('Error: Texture is invalid');\n  }\n\n  gl.generateMipmap(gl.TEXTURE_2D);\n  glProgram.samplerUniform = gl.getUniformLocation(glProgram, 'uSampler');\n  gl.uniform1i(glProgram.samplerUniform, 0);\n  gl.uniform2f(\n    gl.getUniformLocation(glProgram, 'uTexDimensions'),\n    textureImage.width,\n    textureImage.height\n  );\n}\n\nfunction sumArray(a) {\n  let sum = 0;\n\n  for (let key in a) {\n    if (!a.hasOwnProperty(key)) {\n      return;\n    }\n\n    sum += a[key];\n  }\n  return sum;\n}\n"],"sourceRoot":""}