{"version":3,"sources":["webpack:///./three-math03.js"],"names":["let","renderer","scene","camera","width","height","container","props","segments","xMin","xMax","yMin","yMax","onWindowResize","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","document","getElementById","THREE","Scene","background","Color","PerspectiveCamera","position","set","lookAt","const","grid","GridHelper","add","axes","AxesHelper","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","appendChild","domElement","OrbitControls","screenSpacePanning","u1","A","b","X","xSegments","ySegments","x","y","push","generateX","math","transpose","B","multiply","geom","Geometry","material","PointsMaterial","color","size","sizeAttenuation","map","v","forEach","vertices","Vector3","cloud","Points","createGraph","subtract","draw","addEventListener","init","animate","requestAnimationFrame","render"],"mappings":"2EACAA,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGEC,GACJC,SAAU,IACVC,MAAO,GACPC,KAAM,GACNC,MAAO,GACPC,KAAM,IA2CR,SAASC,IACPT,EAAQE,EAAUQ,YAClBT,EAASC,EAAUS,aACnBZ,EAAOa,OAASZ,EAAQC,EACxBF,EAAOc,yBACPhB,EAASiB,QAAQd,EAAOC,IA1C1B,WACEC,EAAYa,SAASC,eAAe,aACpChB,EAAQE,EAAUQ,YAClBT,EAASC,EAAUS,cAGnBb,EAAQ,IAAImB,MAAMC,OACZC,WAAa,IAAIF,MAAMG,MAAM,IAGnCrB,EAAS,IAAIkB,MAAMI,kBAAkB,GAAIrB,EAAQC,EAAQ,EAAG,MACrDqB,SAASC,IAAI,GAAI,GAAI,KAC5BxB,EAAOyB,OAAO,EAAG,EAAG,GAGpBC,IAAMC,EAAO,IAAIT,MAAMU,WAAW,IAAK,IACvC7B,EAAM8B,IAAIF,GAEVD,IAAMI,EAAO,IAAIZ,MAAMa,WAAW,KAClCD,EAAKP,SAASC,IAAI,EAAG,EAAG,GACxBzB,EAAM8B,IAAIC,IAGVhC,EAAW,IAAIoB,MAAMc,eAAeC,WAAW,KACtCC,cAAcC,OAAOC,kBAC9BtC,EAASiB,QAAQd,EAAOC,GACxBC,EAAUkC,YAAYvC,EAASwC,YAGd,IAAIpB,MAAMqB,cAAcvC,EAAQF,EAASwC,YACjDE,oBAAqB,EAwBhC,WACEd,IAAMe,GAAM,EAAG,EAAG,MAYpB,SAAqBC,EAAGC,GACtB9C,IAAI+C,EAmBN,SAAmBtC,EAAMC,EAAMC,EAAMC,EAAMJ,GAKzC,IAJAqB,IAAMkB,KACAC,GAAatC,EAAOD,GAAQD,EAC5ByC,GAAarC,EAAOD,GAAQH,EAEzB0C,EAAIzC,EAAMyC,GAAKxC,EAAMwC,GAAKF,EACjC,IAAKhD,IAAImD,EAAIxC,EAAMwC,GAAKvC,EAAMuC,GAAKF,EACjCF,EAAEK,MAAMF,EAAGC,IAIf,OAAOJ,EA9BCM,CAAU9C,EAAME,KAAMF,EAAMG,KAAMH,EAAMI,KAAMJ,EAAMK,KAAML,EAAMC,UAExEqC,EAAIS,KAAKC,UAAUV,GACnBE,EAAIO,KAAKC,UAAUR,GAEnBlB,IAAM2B,EAAIF,KAAKC,UAAUD,KAAKG,SAASZ,EAAGE,IACpCW,EAAO,IAAIrC,MAAMsC,SACjBC,EAAW,IAAIvC,MAAMwC,gBAAgBC,MAAO,SAAUC,KAAM,EAAGC,iBAAiB,IAEtFR,EAAES,IAAG,SAACC,GACJ,OAAOZ,KAAKtB,IAAIkC,EAAGpB,KAClBqB,QAAO,SAACD,GACTR,EAAKU,SAAShB,KAAK,IAAI/B,MAAMgD,QAAQH,EAAE,GAAIA,EAAE,GAAIA,EAAE,OAGrDrC,IAAMyC,EAAQ,IAAIjD,MAAMkD,OAAOb,EAAME,GACrC1D,EAAM8B,IAAIsC,GA1BVE,EAEIlB,KAAKmB,UAJG,EAAG,EAAG,GAII7B,GAClBU,KAAKmB,UAJG,EAAG,EAAG,GAII7B,IAEpBA,GA/BF8B,GAEApC,OAAOqC,iBAAiB,SAAU9D,GAAgB,GArCpD+D,GAgDA,SAASC,IACPC,sBAAsBD,GAKtB5E,EAAS8E,OAAO7E,EAAOC,GArDzB0E","file":"three-math03.js","sourcesContent":["// three\nlet renderer;\nlet scene;\nlet camera;\nlet width;\nlet height;\nlet container;\n\n// math\nconst props = {\n  segments: 100,\n  xMin: -25,\n  xMax: 25,\n  yMin: -25,\n  yMax: 25\n};\n\ninit();\nanimate();\n\nfunction init() {\n  container = document.getElementById('container');\n  width = container.clientWidth;\n  height = container.clientHeight;\n\n  // scene\n  scene = new THREE.Scene();\n  scene.background = new THREE.Color(0x000000);\n\n  // camera\n  camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000);\n  camera.position.set(50, 80, 130);\n  camera.lookAt(0, 0, 0);\n\n  // helper\n  const grid = new THREE.GridHelper(200, 20);\n  scene.add(grid);\n\n  const axes = new THREE.AxesHelper(100);\n  axes.position.set(0, 0, 0);\n  scene.add(axes);\n\n  // renderer\n  renderer = new THREE.WebGLRenderer({antialias: true});\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(width, height);\n  container.appendChild(renderer.domElement);\n\n  // controls\n  const controls = new THREE.OrbitControls(camera, renderer.domElement);\n  controls.screenSpacePanning = true;\n\n  draw();\n\n  window.addEventListener('resize', onWindowResize, false);\n}\n\nfunction onWindowResize() {\n  width = container.clientWidth;\n  height = container.clientHeight;\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  renderer.setSize(width, height);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}\n\nfunction draw() {\n  const u1 = [1, 0, 4.4];\n  const u2 = [0, 1, 4];\n  const u3 = [0, 0, 3];\n  createGraph(\n    [\n      math.subtract(u2, u1),\n      math.subtract(u3, u1)\n    ],\n    u1\n  );\n}\n\nfunction createGraph(A, b) {\n  let X = generateX(props.xMin, props.xMax, props.yMin, props.yMax, props.segments);\n\n  A = math.transpose(A);\n  X = math.transpose(X);\n\n  const B = math.transpose(math.multiply(A, X));\n  const geom = new THREE.Geometry();\n  const material = new THREE.PointsMaterial({color: 0xffff77, size: 2, sizeAttenuation: false});\n\n  B.map(v => {\n    return math.add(v, b)\n  }).forEach(v => {\n    geom.vertices.push(new THREE.Vector3(v[0], v[1], v[2]));\n  });\n\n  const cloud = new THREE.Points(geom, material);\n  scene.add(cloud)\n}\n\nfunction generateX(xMin, xMax, yMin, yMax, segments) {\n  const X = [];\n  const xSegments = (xMax - xMin) / segments;\n  const ySegments = (yMax - yMin) / segments;\n\n  for (let x = xMin; x <= xMax; x += xSegments) {\n    for (let y = yMin; y <= yMax; y += ySegments) {\n      X.push([x, y]);\n    }\n  }\n\n  return X;\n}\n"],"sourceRoot":""}