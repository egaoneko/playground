{"version":3,"sources":["webpack:///./canvas-gravity2.js","webpack:///../src/pg/utils/math.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_pg_utils_math__WEBPACK_IMPORTED_MODULE_0__","canvas","document","querySelector","ctx","getContext","mouse","x","undefined","y","colorSet","addEventListener","event","init","window","resize","Ball","dx","dy","radius","color","mass","this","velocity","prototype","draw","beginPath","arc","Math","PI","fillStyle","fill","update","balls","width","height","innerWidth","innerHeight","filter","ball","isCollided","forEach","Object","const","pow","let","cnt","length","some","b","i","push","loop","animate","clearRect","fillRect","circle","requestAnimationFrame","randomInt","min","max","floor","random","rotate","angle","cos","sin","resolveCollision","particle","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","m2","u1","u2","v1","v2","vFinal1","vFinal2","d"],"mappings":"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","file":"canvas-gravity2.js","sourcesContent":["import {\n  randomInt,\n  resolveCollision\n} from '../src/pg/utils/math';\n\nconst GRAVITY = 1;\nconst FRICTION = 0.79;\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\nconst mouse = {\n  x: undefined,\n  y: undefined\n};\nconst colorSet = [\n  '#8be9fd',\n  '#50fa7b',\n  '#ffb86c',\n  '#ff79c6',\n  '#bd93f9',\n  '#ff5555',\n  '#f1fa8c',\n];\n\ncanvas.addEventListener('mousemove', (event) => {\n  mouse.x = event.x;\n  mouse.y = event.y;\n});\n\ncanvas.addEventListener('click', () => {\n  init();\n});\n\nwindow.addEventListener('resize', () => {\n  resize();\n});\n\nclass Ball {\n  constructor(x, y, dx, dy, radius, color, mass) {\n    this.x = x;\n    this.y = y;\n    this.velocity = {\n      x: dx,\n      y: dy\n    };\n    this.radius = radius;\n    this.color = color;\n    this.mass = mass;\n  }\n\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n\n  update(balls) {\n    if (\n      this.x + this.radius + this.velocity.x >= canvas.width ||\n      this.x - this.radius + this.velocity.x < 0\n    ) {\n      this.velocity.x *= -1 * FRICTION;\n    }\n\n    if (this.y + this.radius + this.velocity.y >= canvas.height) {\n      this.velocity.y *= -1 * FRICTION;\n      this.velocity.x *= FRICTION;\n    } else {\n      this.velocity.y += GRAVITY;\n    }\n\n    if (this.x - this.radius < 0) {\n      this.x = this.radius\n    }\n\n    if (this.y - this.radius < 0) {\n      this.y = this.radius\n    }\n\n    if (this.x + this.radius > window.innerWidth) {\n      this.x = window.innerWidth - this.radius;\n    }\n\n    if (this.y + this.radius > window.innerHeight) {\n      this.y = window.innerHeight - this.radius;\n    }\n\n    this.x += this.velocity.x;\n    this.y += this.velocity.y;\n\n    // check collided\n    balls\n      .filter(ball => this !== ball)\n      .filter(ball => this.isCollided(ball))\n      .forEach(ball => {\n        resolveCollision(this, ball);\n      });\n\n    this.draw();\n  }\n\n  isCollided(ball) {\n    const x = this.x - ball.x;\n    const y = this.y - ball.y;\n    return (Math.pow(x, 2) + Math.pow(y, 2)) <= Math.pow((this.radius + ball.radius), 2);\n  }\n}\n\nlet balls = [];\nlet cnt = 0;\n\nfunction init() {\n\n  balls = [];\n\n  for (let i = 0; i < 100; i++) {\n    const radius = randomInt(8, 20);\n    const x = randomInt(radius, window.innerWidth - radius);\n    const dx = randomInt(-20, 20);\n    const y = randomInt(radius, window.innerHeight - radius);\n    const dy = randomInt(-2, 2);\n    const color = colorSet[randomInt(0, colorSet.length)];\n    const ball = new Ball(x, y, dx, dy, radius, color, 1);\n\n    if (balls.some(b => ball.isCollided(b))) {\n      cnt += 1;\n\n      if (cnt > 100) {\n        continue;\n      }\n\n      i -= 1;\n    } else {\n      cnt = 0;\n      balls.push(ball);\n    }\n  }\n}\n\nfunction resize() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = '#282a36';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  balls.forEach(circle => circle.update(balls));\n  requestAnimationFrame(animate);\n}\n\nresize();\ninit();\nanimate();\n","/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {boolean} success\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return false;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n  return true;\n}\n"],"sourceRoot":""}