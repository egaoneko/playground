{"version":3,"sources":["webpack:///./webgl-image-processing-1.js"],"names":["let","gl","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","trianglesVerticeBuffer","vertexIndexBuffer","texture","textureImage","NO_EFFECT","GRAYSCALE_EFFECT","NEGATIVE_EFFECT","GREEN_TINT_EFFECT","effectUniform","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","drawScene","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","drawElements","TRIANGLES","numItems","UNSIGNED_SHORT","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","getContext","e","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","size","vertexPositionData","indexData","createBuffer","bufferData","Float32Array","STATIC_DRAW","itemSize","length","Uint16Array","STREAM_DRAW","createSquare","Image","src","getAttribLocation","enableVertexAttribArray","getUniformLocation","onload","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","uniform1i","samplerUniform","isTexture","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","viewport"],"mappings":"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","file":"webgl-image-processing-1.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet trianglesVerticeBuffer = null;\nlet vertexIndexBuffer = null;\n\nlet texture = null;\nlet textureImage = null;\n\nconst NO_EFFECT = 0;\nconst GRAYSCALE_EFFECT = 1;\nconst NEGATIVE_EFFECT = 2;\nconst GREEN_TINT_EFFECT = 3;\n\nlet effectUniform = null;\n\nwindow.addEventListener('load', initWebGL);\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    createSquare();\n\n    loadTexture();\n\n    vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    effectUniform = gl.getUniformLocation(glProgram, 'uEffect');\n\n    textureImage.onload = function () {\n      setupTexture();\n      setupWebGL();\n\n      //top left\n      gl.uniform1i(effectUniform, NO_EFFECT);\n      gl.viewport(\n        canvas.width * 0.5 - canvas.height * 0.5,\n        canvas.height * 0.5,\n        canvas.height * 0.5,\n        canvas.height * 0.5\n      );\n      drawScene();\n      gl.uniform1i(effectUniform, GREEN_TINT_EFFECT);\n      //bottom left\n      gl.viewport(\n        canvas.width * 0.5 - canvas.height * 0.5,\n        0,\n        canvas.height * 0.5, canvas.height * 0.5\n      );\n\n      drawScene();\n      gl.uniform1i(effectUniform, GRAYSCALE_EFFECT);\n      //bottom right\n      gl.viewport(\n        canvas.width * 0.5,\n        0,\n        canvas.height * 0.5,\n        canvas.height * 0.5\n      );\n      drawScene();\n      gl.uniform1i(effectUniform, NEGATIVE_EFFECT);\n      //top right\n      gl.viewport(\n        canvas.width * 0.5,\n        canvas.height * 0.5,\n        canvas.height * 0.5,\n        canvas.height * 0.5\n      );\n      drawScene();\n    };\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.1, 0.1, 0.1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    \n    varying vec2 position;\n    void main(void) {\n      position = vec2(aVertexPosition.xy);\n      gl_Position = vec4(position, 0.0, 1.0);\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp vec2 position;\n    uniform sampler2D uSampler;\n    uniform int uEffect;\n    \n    void main(void) {\n      //convert texture coordinates from [-1, 1] to [0, 1]\n      highp vec2 texCoords = position * 0.5 + .5;\n      \n      highp vec4 texColor = texture2D( uSampler, vec2(texCoords.s, texCoords.t) );\n      highp vec4 finalColor;\n      \n      if(uEffect == 0){\n        finalColor = texColor;\n      }else if(uEffect == 1){\n        finalColor = vec4( vec3(1.0, 1.0, 1.0) - texColor.rgb, 1.0 );\n      }else if(uEffect == 2){\n        highp float gray = (texColor.r  + texColor.g + texColor.b)/3.0;\n        finalColor = vec4( gray, gray, gray, 1.0);\n      }else if(uEffect == 3){\n        texColor.rb *= 0.8;\n        finalColor = texColor;\n      }\n      \n      gl_FragColor = finalColor;  \n    }\n  `;\n}\n\nfunction drawScene() {\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffer);\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);\n  gl.drawElements(gl.TRIANGLES, vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n}\n\nfunction createSquare(size = 2.0) {\n  const vertexPositionData = [\n    0.0, 0.0, 0.0,\n    -size * 0.5, -size * 0.5, 0.0,\n    size * 0.5, -size * 0.5, 0.0,\n    size * 0.5, size * 0.5, 0.0,\n    -size * 0.5, size * 0.5, 0.0,\n  ];\n\n  const indexData = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1];\n  trianglesVerticeBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffer.itemSize = 3;\n  trianglesVerticeBuffer.numItems = vertexPositionData.length / 3;\n  vertexIndexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffer.itemSize = 3;\n  vertexIndexBuffer.numItems = indexData.length;\n}\n\nfunction loadTexture() {\n  textureImage = new Image();\n  textureImage.src = 'data/img/iu/iu01.jpg';\n}\n\nfunction setupTexture() {\n  texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  gl.uniform1i(glProgram.samplerUniform, 0);\n\n  if (!gl.isTexture(texture)) {\n    console.error('Error: Texture is invalid');\n  }\n}\n"],"sourceRoot":""}