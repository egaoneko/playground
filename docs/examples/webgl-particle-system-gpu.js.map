{"version":3,"sources":["webpack:///./webgl-particle-system-gpu.js"],"names":["let","gl","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","vertexVelocityAttribute","particles","PARTICLE_COMPONENTS","pointBuffer","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","paused","MAX_NUMBER_OF_PARTICLES","MAX_SPAWN_PER_FRAME","LIFESPAN","START_Y","currentNumberParticles","d","Date","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","adjustParticles","particlesOld","slice","i","length","old","concat","n","push","Math","random","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","getContext","e","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","pMatrixUniform","getUniformLocation","mvMatrixUniform","timeUniform","getAttribLocation","enableVertexAttribArray","createBuffer","animLoop","clearColor","clear","COLOR_BUFFER_BIT","enable","DEPTH_TEST","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","viewport","perspective","identity","translate","invertedMatrix","fromMat4","invert","transpose","setupWebGL","uniformMatrix4fv","uniform1f","getTime","itemSize","numItems","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","drawArrays","POINTS","requestAnimationFrame","evt","keyCode"],"mappings":"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","file":"webgl-particle-system-gpu.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet vertexVelocityAttribute = null;\nlet particles = []; //x,y,z,age, velx, vely, size\nconst PARTICLE_COMPONENTS = 7;\n\nlet pointBuffer = null;\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nlet paused = false;\n\nconst MAX_NUMBER_OF_PARTICLES = 10000;\nconst MAX_SPAWN_PER_FRAME = 10;\nconst LIFESPAN = 240.0;\nconst START_Y = -10.0;\n\nlet currentNumberParticles = 0;\nlet d = new Date();\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n  }\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n\n    getMatrixUniforms();\n\n    vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n    vertexVelocityAttribute = gl.getAttribLocation(glProgram, 'aVertexVelocity');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    gl.enableVertexAttribArray(vertexVelocityAttribute);\n\n    adjustParticles();\n\n    pointBuffer = gl.createBuffer();\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        setMatrixUniforms();\n        drawScene();\n        adjustParticles();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.1, 0.1, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n  gl.enable(gl.BLEND);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n  mat4.identity(mvMatrix);\n  mat4.translate(mvMatrix, mvMatrix, [0.0, -5.0, -30.0]);\n\n  const invertedMatrix = mat3.create();\n  mat3.fromMat4(invertedMatrix, mvMatrix);\n  mat3.invert(normalMatrix, invertedMatrix);\n  mat3.transpose(normalMatrix, normalMatrix);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec4 aVertexPosition;\n    attribute vec4 aVertexVelocity;\n    \n    uniform mat4 uPMatrix;\n    uniform mat4 uMVMatrix;\n    \n    varying highp float parametricTime;\n    \n    void main(void) {\n      parametricTime = (aVertexPosition.w/100.0);\n      \n      vec3 currentPosition = vec3(\n        aVertexPosition.x + (aVertexVelocity.x * parametricTime),\n        aVertexPosition.y + (aVertexVelocity.y * parametricTime),\n        aVertexPosition.z + (aVertexVelocity.x * parametricTime)\n      );\n      \n      currentPosition.y -= 4.9*parametricTime*parametricTime;\n      \n      gl_Position = uPMatrix * uMVMatrix * vec4(currentPosition.xyz, 1.0);\n      gl_PointSize = aVertexVelocity.z;\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp float parametricTime;\n    \n    void main(void) {   \n      gl_FragColor = vec4(parametricTime*.8, parametricTime*.8, 1.0, 0.9-(parametricTime*.4));\n    }\n  `;\n}\n\nfunction drawScene() {\n  gl.uniform1f(glProgram.timeUniform, d.getTime());\n\n  pointBuffer.itemSize = PARTICLE_COMPONENTS;\n  pointBuffer.numItems = currentNumberParticles;\n  gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(particles), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(\n    vertexPositionAttribute,\n    4,\n    gl.FLOAT,\n    false,\n    PARTICLE_COMPONENTS * Float32Array.BYTES_PER_ELEMENT,\n    0 * Float32Array.BYTES_PER_ELEMENT\n  );\n  gl.vertexAttribPointer(\n    vertexVelocityAttribute,\n    3,\n    gl.FLOAT,\n    false,\n    PARTICLE_COMPONENTS * Float32Array.BYTES_PER_ELEMENT,\n    4 * Float32Array.BYTES_PER_ELEMENT\n  );\n  gl.drawArrays(gl.POINTS, 0, currentNumberParticles);\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.timeUniform = gl.getUniformLocation(glProgram, 'uTime');\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n}\n\n\nfunction adjustParticles() {\n  const particlesOld = particles.slice(); //copy\n  particles = [];\n\n  for (let i = 0; i < particlesOld.length; i += PARTICLE_COMPONENTS) {\n    // remove old particles\n    // if past lifespan or below the start position, do not read particle\n    if ((particlesOld[i + 3] < LIFESPAN) &&\n      (particlesOld[i + 1] > (START_Y - 0.001))\n    ) {\n      const old = particlesOld.slice(i, i + PARTICLE_COMPONENTS);\n      old[3] += 1.0; //age\n      particles = particles.concat(old);\n    }\n  }\n  currentNumberParticles = particles.length / PARTICLE_COMPONENTS;\n\n  // spawn new particles\n  if (currentNumberParticles + MAX_SPAWN_PER_FRAME < MAX_NUMBER_OF_PARTICLES) {\n    for (let n = 0; n < MAX_SPAWN_PER_FRAME; ++n) {\n      particles.push(.5 * Math.random() - .25); //X\n      particles.push(START_Y); //Y\n      particles.push(Math.random() - .5); //Z\n      particles.push(0.0); //age\n      particles.push(5.0 * Math.random() - 10.0); //velX\n      particles.push(14.0 + 12.0 * Math.random()); //velY\n      particles.push(0.5 + Math.random() * 4.0); //size\n      ++currentNumberParticles;\n    }\n  }\n}\n"],"sourceRoot":""}