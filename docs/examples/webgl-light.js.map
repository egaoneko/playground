{"version":3,"sources":["webpack:///../src/pg/math/vector3.js","webpack:///./utils/webgl/mesh-utils.js","webpack:///./webgl-light.js"],"names":["Vector3","x","y","z","this","prototype","divide","scala","Error","cross","vector","const","length","Math","sqrt","normalize","__webpack_require__","d","__webpack_exports__","setupPlaneMesh","setupSphereMesh","_src_pg_math_vector3__WEBPACK_IMPORTED_MODULE_0__","gl","buffers","n","options","vertexPositionData","indexData","textureData","size","Object","assign","color","translation","textured","normalData","colorData","trianglesNormalBuffers","trianglesColorBuffers","trianglesVerticeBuffers","trianglesTexCoordBuffers","vertexIndexBuffers","i","push","j","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","ELEMENT_ARRAY_BUFFER","Uint16Array","STREAM_DRAW","radius","division","smoothShading","latitudeBands","longitudeBands","latNumber","theta","PI","sinTheta","sin","cosTheta","cos","longNumber","phi","sinPhi","let","first","second","origVertices","indices","vertices","a","calculateFlattenedVertices","origNormals","normals","b","c","n1","n2","n3","nx","ny","nz","v3","calculatePerFaceNormals","r","_utils_webgl_mesh_utils__WEBPACK_IMPORTED_MODULE_0__","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","vertexNormalAttribute","vertexColorAttribute","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","angle","paused","SHADER","flat","phong","gouraud_phong","phong_phong","attenuation","spotlight","fog","fog_spotlight","radios","document","querySelectorAll","changeHandler","deleteProgram","createProgram","value","type","vsSource","fsSource","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","useProgram","pMatrixUniform","getUniformLocation","mvMatrixUniform","normalMatrixUniform","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","window","addEventListener","querySelector","width","clientWidth","height","clientHeight","getContext","e","console","error","getAttribLocation","enableVertexAttribArray","animLoop","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","viewport","perspective","identity","translate","rotate","invertedMatrix","fromMat4","invert","transpose","uniformMatrix4fv","uniformMatrix3fv","vertexAttribPointer","FLOAT","disable","BLEND","blendFunc","SRC_ALPHA","ONE","blendEquation","FUNC_ADD","drawElements","TRIANGLES","UNSIGNED_SHORT","drawArrays","drawScene","requestAnimationFrame","evt","keyCode","Array","forEach","call","radio"],"mappings":"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","file":"webgl-light.js","sourcesContent":["/**\n * @module pg/math/vector3\n */\n\n/**\n * @classdesc\n * Vector 3D\n *\n * @api\n */\n\nexport default class Vector3 {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Divide by number\n   * @param {number} scala number for dividing\n   * @return {Vector3} this\n   * @api\n   */\n  divide(scala) {\n    if (typeof scala !== 'number') {\n      throw new Error(`invalid input: ${scala}`);\n    }\n\n    this.x /= scala;\n    this.y /= scala;\n    this.z /= scala;\n\n    return this;\n  }\n\n  /**\n   * Get crossed vector.\n   * @param {Vector3} vector vector for cross\n   * @return {Vector3} this\n   * @api\n   */\n  cross(vector) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n\n    if (!(vector instanceof Vector3)) {\n      throw new Error(`invalid input: ${vector}`);\n    }\n\n    this.x = y * vector.z - z * vector.y;\n    this.y = z * vector.x - x * vector.z;\n    this.z = x * vector.y - y * vector.x;\n  }\n\n  /**\n   * Get length of vector.\n   * @return {number} length\n   * @api\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  /**\n   * Get normalized vector\n   * @return {Vector3} normalized vector\n   * @api\n   */\n  normalize() {\n    return this.divide(this.length());\n  }\n}\n","import Vector3 from \"../../../src/pg/math/vector3\";\n\nexport function setupPlaneMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    size: 10.0,\n    color: [0.5, 0.5, 1.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    textured: false,\n  }, options);\n\n  const size = options.size;\n  const color = options.color;\n  const translation = options.translation;\n  const textured = options.textured;\n\n  let vertexPositionData;\n  let indexData;\n  let textureData;\n  const normalData = [];\n  const colorData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //plane\n  for (let i = 0; i < 5; ++i) {\n    normalData.push(0.0);\n    normalData.push(1.0);\n    normalData.push(0.0);\n    colorData.push(color[0]);\n    colorData.push(color[1]);\n    colorData.push(color[2]);\n    colorData.push(color[3]);\n  }\n\n  vertexPositionData = [\n    0.0, 0.0, 0.0,\n    -size, 0.0, -size,\n    size, 0.0, -size,\n    size, 0.0, size,\n    -size, 0.0, size\n  ];\n\n  textureData = [\n    0.0, 0.0,\n    -size, -size,\n    size, -size,\n    size, size,\n    -size, size\n  ];\n\n\n  for (var j = 0; j < vertexPositionData.length; j += 3) {\n    vertexPositionData[j] += translation[0];\n    vertexPositionData[j + 1] += translation[1];\n    vertexPositionData[j + 2] += translation[2];\n  }\n\n  indexData = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1];\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nexport function setupSphereMesh(gl, buffers, n, options) {\n  options = Object.assign({}, {\n    color: [1.0, 0.0, 0.0, 1.0],\n    translation: [0.0, 0.0, 0.0],\n    radius: 1.0,\n    division: 30,\n    smoothShading: true,\n    textured: false,\n  }, options);\n\n  const color = options.color;\n  const translation = options.translation;\n  const radius = options.radius;\n  const division = options.division;\n  const smoothShading = options.smoothShading;\n  const textured = options.textured;\n\n  let latitudeBands = division;\n  let longitudeBands = division;\n\n  let vertexPositionData = [];\n  let colorData = [];\n  let normalData = [];\n  const indexData = [];\n  const textureData = [];\n\n  const trianglesNormalBuffers = buffers.trianglesNormalBuffers;\n  const trianglesColorBuffers = buffers.trianglesColorBuffers;\n  const trianglesVerticeBuffers = buffers.trianglesVerticeBuffers;\n  const trianglesTexCoordBuffers = buffers.trianglesTexCoordBuffers;\n  const vertexIndexBuffers = buffers.vertexIndexBuffers;\n\n  //modified from http://learningwebgl.com/cookbook/index.php/How_to_draw_a_sphere\n  for (let latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n    const theta = latNumber * Math.PI / latitudeBands;\n    const sinTheta = Math.sin(theta);\n    const cosTheta = Math.cos(theta);\n\n    for (let longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n      const phi = longNumber * 2 * Math.PI / longitudeBands;\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n\n      const x = cosPhi * sinTheta;\n      const y = cosTheta;\n      const z = sinPhi * sinTheta;\n      // const u = 1 - (longNumber / longitudeBands);\n      // const v = latNumber / latitudeBands;\n\n      textureData.push((x + 1.0) * .5);\n      textureData.push((y + 1.0) * .5);\n\n      normalData.push(x);\n      normalData.push(y);\n      normalData.push(z);\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n      vertexPositionData.push(radius * x + translation[0]);\n      vertexPositionData.push(radius * y + translation[1]);\n      vertexPositionData.push(radius * z + translation[2]);\n    }\n  }\n\n  for (let latNumber = 0; latNumber < latitudeBands; latNumber++) {\n    for (let longNumber = 0; longNumber < longitudeBands; longNumber++) {\n      const first = (latNumber * (longitudeBands + 1)) + longNumber;\n      const second = first + longitudeBands + 1;\n      indexData.push(first);\n      indexData.push(second);\n      indexData.push(first + 1);\n\n      indexData.push(second);\n      indexData.push(second + 1);\n      indexData.push(first + 1);\n    }\n  }\n\n  if (!smoothShading) {\n    vertexPositionData = calculateFlattenedVertices(vertexPositionData, indexData);\n    colorData = [];\n    for (let i = 0; i < indexData.length; ++i) {\n      colorData.push(color[0]);\n      colorData.push(color[1]);\n      colorData.push(color[2]);\n      colorData.push(color[3]);\n    }\n    normalData = calculatePerFaceNormals(normalData, indexData);\n  }\n\n  trianglesNormalBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n  trianglesNormalBuffers[n].itemSize = 3;\n  trianglesNormalBuffers[n].numItems = normalData.length / 3;\n\n  trianglesColorBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);\n  trianglesColorBuffers[n].itemSize = 4;\n  trianglesColorBuffers[n].numItems = colorData.length / 4;\n\n  trianglesVerticeBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[n]);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);\n  trianglesVerticeBuffers[n].itemSize = 3;\n  trianglesVerticeBuffers[n].numItems = vertexPositionData.length / 3;\n\n  if (textured) {\n    trianglesTexCoordBuffers[n] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesTexCoordBuffers[n]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureData), gl.STATIC_DRAW);\n    trianglesTexCoordBuffers[n].itemSize = 2;\n    trianglesTexCoordBuffers[n].numItems = textureData.length / 2;\n  }\n\n  vertexIndexBuffers[n] = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[n]);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n  vertexIndexBuffers[n].itemSize = 3;\n  vertexIndexBuffers[n].numItems = indexData.length;\n}\n\nfunction calculateFlattenedVertices(origVertices, indices) {\n  const vertices = [];\n  for (let i = 0; i < indices.length; ++i) {\n    const a = indices[i] * 3;\n    vertices.push(origVertices[a]);\n    vertices.push(origVertices[a + 1]);\n    vertices.push(origVertices[a + 2]);\n  }\n  return vertices;\n}\n\nfunction calculatePerFaceNormals(origNormals, indices) {\n  const normals = [];\n  for (let i = 0; i < indices.length; i += 3) {\n    const a = indices[i] * 3;\n    const b = indices[i + 1] * 3;\n    const c = indices[i + 2] * 3;\n\n    const n1 = new Vector3(origNormals[a], origNormals[a + 1], origNormals[a + 2]);\n    const n2 = new Vector3(origNormals[b], origNormals[b + 1], origNormals[b + 2]);\n    const n3 = new Vector3(origNormals[c], origNormals[c + 1], origNormals[c + 2]);\n\n    const nx = (n1.x + n2.x + n3.x) / 3;\n    const ny = (n1.y + n2.y + n3.y) / 3;\n    const nz = (n1.z + n2.z + n3.z) / 3;\n\n    const v3 = new Vector3(nx, ny, nz);\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n\n    normals.push(v3.x);\n    normals.push(v3.y);\n    normals.push(v3.z);\n  }\n  return normals;\n}\n","import {setupPlaneMesh, setupSphereMesh} from \"./utils/webgl/mesh-utils\";\n\nlet gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet vertexNormalAttribute = null;\nlet vertexColorAttribute = null;\nlet trianglesVerticeBuffers = [];\nlet trianglesNormalBuffers = [];\nlet trianglesColorBuffers = [];\nlet vertexIndexBuffers = [];\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nlet angle = 0.0;\n\nlet paused = false;\n\nconst SHADER = {\n  flat: {\n    vertexShader: flatVertexShaderSource(),\n    fragmentShader: flatFragmentShaderSource()\n  },\n  phong: {\n    vertexShader: phongVertexShaderSource(),\n    fragmentShader: phongFragmentShaderSource()\n  },\n  gouraud_phong: {\n    vertexShader: gouraudPhongVertexShaderSource(),\n    fragmentShader: gouraudPhongFragmentShaderSource()\n  },\n  phong_phong: {\n    vertexShader: phongPhongVertexShaderSource(),\n    fragmentShader: phongPhongFragmentShaderSource()\n  },\n  attenuation: {\n    vertexShader: attenuationVertexShaderSource(),\n    fragmentShader: attenuationFragmentShaderSource()\n  },\n  spotlight: {\n    vertexShader: spotlightVertexShaderSource(),\n    fragmentShader: spotlightFragmentShaderSource()\n  },\n  fog: {\n    vertexShader: fogVertexShaderSource(),\n    fragmentShader: fogFragmentShaderSource()\n  },\n  fog_spotlight: {\n    vertexShader: fogSpotlightVertexShaderSource(),\n    fragmentShader: fogSpotlightFragmentShaderSource()\n  }\n};\n\nconst radios = document.querySelectorAll('input[type=radio][name=\"light\"]');\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n    default:\n      break;\n  }\n});\n\nfunction changeHandler() {\n  gl.deleteProgram(glProgram);\n  createProgram(this.value);\n}\n\nArray.prototype.forEach.call(radios, function(radio) {\n  radio.addEventListener('change', changeHandler);\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    setupMeshes();\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        drawScene();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.7, 0.7, 0.7, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n}\n\nfunction initShaders() {\n  createProgram('flat');\n}\n\nfunction createProgram(type) {\n  // create program\n  glProgram = gl.createProgram();\n  attachShader(glProgram, type);\n  // use program\n  gl.useProgram(glProgram);\n  getMatrixUniforms();\n}\n\nfunction attachShader(glProgram, type) {\n  // get shader source\n  const vsSource = SHADER[type].vertexShader;\n  const fsSource = SHADER[type].fragmentShader;\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction setupMeshes() {\n  setupSphereMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    0,\n    {\n      translation: [-1.0, -0.75, 0.0],\n      color: [1.0, 0.0, 0.0, 1.0],\n      division: 20,\n      smoothShading: false\n    }\n  );\n\n  setupSphereMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    1,\n    {\n      translation: [0.0, 0.0, 1.0],\n      color: [0.0, 1.0, 0.0, 1.0],\n      division: 10,\n      smoothShading: false\n    }\n  );\n\n  setupSphereMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    2,\n    {\n      translation: [1.0, 0.25, -1.0],\n      color: [1.0, 1.0, 0.0, 1.0],\n      division: 5,\n      smoothShading: false\n    }\n  );\n\n  setupSphereMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    3,\n    {\n      translation: [-1.0, 1.0, -1.0],\n      color: [1.0, 0.0, 1.0, 1.0],\n    }\n  );\n\n  setupSphereMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    4,\n    {\n      translation: [-0.0, 1.75, -0.0],\n      color: [0.0, 1.0, 1.0, 1.0],\n    }\n  );\n\n\n  setupPlaneMesh(\n    gl,\n    {\n      trianglesNormalBuffers,\n      trianglesColorBuffers,\n      trianglesVerticeBuffers,\n      vertexIndexBuffers,\n    },\n    5,\n    {\n      translation: [0.0, -1.0, 0.0],\n    }\n  );\n\n  vertexPositionAttribute = gl.getAttribLocation(glProgram, \"aVertexPosition\");\n  vertexColorAttribute = gl.getAttribLocation(glProgram, \"aVertexColor\");\n  vertexNormalAttribute = gl.getAttribLocation(glProgram, \"aVertexNormal\");\n  gl.enableVertexAttribArray(vertexPositionAttribute);\n  gl.enableVertexAttribArray(vertexColorAttribute);\n  gl.enableVertexAttribArray(vertexNormalAttribute);\n}\n\nfunction drawScene() {\n  // sphere\n  mat4.identity(mvMatrix);\n  mat4.translate(mvMatrix, mvMatrix, [0.0, 0.4, -6.5]);\n  mat4.rotate(mvMatrix, mvMatrix, -0.3, [-0.3, 0.0, 0.2]);\n  mat4.rotate(mvMatrix, mvMatrix, angle, [0.0, 1.0, 0.0]);\n\n  const invertedMatrix = mat3.create();\n  mat3.fromMat4(invertedMatrix, mvMatrix);\n  mat3.invert(normalMatrix, invertedMatrix);\n  mat3.transpose(normalMatrix, normalMatrix);\n  angle += 0.005;\n  setMatrixUniforms();\n\n  for (let i = 0; i < vertexIndexBuffers.length; ++i) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesVerticeBuffers[i]);\n    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesColorBuffers[i]);\n    gl.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesNormalBuffers[i]);\n    gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 0, 0);\n\n    if (i === 4) {\n      gl.disable(gl.DEPTH_TEST);\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n      gl.blendEquation(gl.FUNC_ADD);\n    } else {\n      gl.disable(gl.BLEND);\n      gl.enable(gl.DEPTH_TEST);\n    }\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[i]);\n    if (i > 2) {\n      gl.drawElements(gl.TRIANGLES, vertexIndexBuffers[i].numItems, gl.UNSIGNED_SHORT, 0);\n    } else {\n      gl.drawArrays(gl.TRIANGLES, 0, trianglesVerticeBuffers[i].numItems);\n    }\n  }\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.normalMatrixUniform = gl.getUniformLocation(glProgram, \"uNormalMatrix\");\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n  gl.uniformMatrix3fv(glProgram.normalMatrixUniform, false, normalMatrix);\n}\n\nfunction flatVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform mat4 uPMatrix;    \n    uniform mat4 uMVMatrix;\n    uniform mat3 uNormalMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 L;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vec3 pointLightPosition = vec3(1.0, 2.0, -1.0);\n      vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - aVertexPosition.xyz));\n      vec3 ambientColor = vec3(0.1, 0.1, 0.1);\n      \n      L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      N = uNormalMatrix * aVertexNormal;\n      \n      vColor = aVertexColor;\n    }\n  `;\n}\n\nfunction flatFragmentShaderSource() {\n  return `\n    varying highp vec3 vColor;\n    varying highp vec3 N;\n    varying highp vec3 L;\n    \n    void main(void) {\n      highp float lambert = max(dot(normalize(N), normalize(L)), 0.0);\n      gl_FragColor = vec4(vColor * lambert, 1.0);\n    }\n  `;\n}\n\nfunction phongVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform highp mat4 uPMatrix;    \n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vColor = aVertexColor;\n      vPosition = aVertexPosition;\n      N = aVertexNormal;\n    }\n  `;\n}\n\nfunction phongFragmentShaderSource() {\n  return `\n    uniform highp mat4 uPMatrix;\n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    \n    void main(void) {\n      highp vec3 n = uNormalMatrix * N;\n      \n      highp vec3 pointLightPosition = vec3(1.0, 2.0, -1.0);\n      highp vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - vPosition.xyz));\n      \n      highp vec3 L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      \n      highp float lambert = max(dot(normalize(n), normalize(L)), 0.0);\n      gl_FragColor = vec4(vColor * lambert, 1.0);\n    }\n  `;\n}\n\nfunction gouraudPhongVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform highp mat4 uPMatrix;    \n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp float diffuseLambert;\n    varying highp float specular;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      vColor = aVertexColor;\n      \n      vec3 pointLightPosition = vec3(1.0, 2.0, -1.0);\n      vec3 pointLightDirection = vec3(pointLightPosition.xyz - aVertexPosition.xyz);\n      \n      vec3 L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      vec3 N = normalize(uNormalMatrix * aVertexNormal);\n      vec3 V = -vec3(uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0));\n      \n      L = normalize(L);\n      V = normalize(V); \n      \n      vec3 R = reflect(-L, N);\n      float shininess = 128.0;\n      \n      specular = pow(max(0.0, dot(R, V)), shininess);\n      diffuseLambert = dot(L, N);\n    }\n  `;\n}\n\nfunction gouraudPhongFragmentShaderSource() {\n  return ` \n    varying highp vec3 vColor;\n    varying highp float diffuseLambert;\n    varying highp float specular;\n    \n    void main(void) {\n      highp float AmbientIntensity = 0.3;\n      highp vec3 DiffuseLightIntensity = vec3(0.9, 0.9, 0.9);\n      highp float SpecularIntensity = 0.5;\n      \n      highp vec3 AmbientColour = vec3(0.1, 0.1, 0.1);\n      highp vec3 DiffuseMaterialColour = vColor;\n      highp vec3 SpecularColour = vec3(1.0, 1.0, 1.0);\n      \n      gl_FragColor = vec4(AmbientColour * AmbientIntensity +\n        diffuseLambert * DiffuseMaterialColour * DiffuseLightIntensity +\n        SpecularColour * specular * SpecularIntensity, 1.0);\n    }\n  `;\n}\n\nfunction phongPhongVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform highp mat4 uPMatrix;    \n    uniform highp mat4 uMVMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vColor = aVertexColor;\n      vPosition = aVertexPosition;\n      N = aVertexNormal;\n    }\n  `;\n}\n\nfunction phongPhongFragmentShaderSource() {\n  return ` \n    uniform highp mat4 uPMatrix;\n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n\n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n\n    void main(void) {\n      highp vec3 pointLightPosition = vec3(5.0, 1.0, 5.0);\n\n      highp vec3 pointLightDirection = vec3(pointLightPosition.xyz - vPosition.xyz);\n      \n      highp mat4 mvp = uPMatrix * uMVMatrix;\n\n      highp vec3 L = vec3(mvp * vec4(pointLightDirection, 1.0));\n      highp vec3 V = -vec3(mvp * vec4(vPosition,1.0));\n\n      highp vec3 l = normalize(L);\n      highp vec3 n = normalize(uNormalMatrix * N);\n      highp vec3 v = normalize(V);\n      \n      highp vec3 R = reflect(l, n);\n\n      highp float diffuseLambert = dot(l,n);\n      highp float Roughness = 1.0;\n      highp float AmbientIntensity = 0.3;\n      highp vec3 DiffuseLightIntensity = vec3(0.9, 0.9, 0.9);\n      highp float SpecularIntensity = 0.5;\n      highp float shininess = 128.0;\n\n      highp float specular = pow( max(0.0,dot(R,v)), shininess);\n\n      highp vec3 AmbientColour = vec3(0.1, 0.1, 0.1);\n      highp vec3 DiffuseMaterialColour = vColor.xyz;\n      highp vec3 SpecularColour = vec3(1.0, 1.0, 1.0);\n    \n      gl_FragColor = vec4(AmbientColour*AmbientIntensity + \n        diffuseLambert * DiffuseMaterialColour*DiffuseLightIntensity +\n        SpecularColour * specular*SpecularIntensity, 1.0);\n    }\n  `;\n}\n\nfunction attenuationVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform highp mat4 uPMatrix;    \n    uniform highp mat4 uMVMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vColor = aVertexColor;\n      vPosition = aVertexPosition;\n      N = aVertexNormal;\n    }\n  `;\n}\n\nfunction attenuationFragmentShaderSource() {\n  return ` \n    uniform highp mat4 uPMatrix;\n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n\n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n\n    void main(void) {\n      highp vec3 pointLightPosition = vec3(5.0, 1.0, 5.0);\n\n      highp vec3 pointLightDirection = vec3(pointLightPosition.xyz - vPosition.xyz);\n      highp float d = length(pointLightDirection);\n      highp float attenuation = 1.0/(.01 + .01*d+.02*d*d);\n      \n      highp mat4 mvp = uPMatrix * uMVMatrix;\n\n      highp vec3 L = vec3(mvp * vec4(pointLightDirection, 1.0));\n      highp vec3 V = -vec3(mvp * vec4(vPosition,1.0));\n\n      highp vec3 l = normalize(L);\n      highp vec3 n = normalize(uNormalMatrix * N);\n      highp vec3 v = normalize(V);\n      \n      highp vec3 R = reflect(l, n);\n\n      highp float diffuseLambert = dot(l,n);\n      highp float Roughness = 1.0;\n      highp float AmbientIntensity = 0.3;\n      highp vec3 DiffuseLightIntensity = vec3(0.9, 0.9, 0.9);\n      highp float SpecularIntensity = 0.5;\n      highp float shininess = 128.0;\n\n      highp float specular = pow(max(0.0,dot(R,v)), shininess);\n\n      highp vec3 AmbientColour = vec3(0.1, 0.1, 0.1) * attenuation;\n      highp vec3 DiffuseMaterialColour = vColor.xyz * attenuation;\n      highp vec3 SpecularColour = vec3(1.0, 1.0, 1.0) * attenuation;\n    \n      gl_FragColor = vec4(AmbientColour*AmbientIntensity + \n        diffuseLambert * DiffuseMaterialColour*DiffuseLightIntensity +\n        SpecularColour * specular*SpecularIntensity, 1.0);\n    }\n  `;\n}\n\nfunction spotlightVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform highp mat4 uPMatrix;    \n    uniform highp mat4 uMVMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vColor = aVertexColor;\n      vPosition = aVertexPosition;\n      N = aVertexNormal;\n    }\n  `;\n}\n\nfunction spotlightFragmentShaderSource() {\n  return ` \n    uniform highp mat4 uPMatrix;\n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n\n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n\n    void main(void) {\n      highp vec3 pointLightPosition = vec3(5.0, 1.0, 5.0);\n\n      highp vec3 pointLightDirection = vec3(pointLightPosition.xyz - vPosition.xyz);\n      highp float d = length(pointLightDirection);\n      highp float attenuation = 1.0/(.01 + .01*d + .02*d*d);\n      \n      highp mat4 mvp = uPMatrix * uMVMatrix;\n\n      highp vec3 L = vec3(mvp * vec4(pointLightDirection, 1.0));\n      highp vec3 V = -vec3(mvp * vec4(vPosition,1.0));\n\n      highp vec3 l = normalize(L);\n      highp vec3 n = normalize(uNormalMatrix * N);\n      highp vec3 v = normalize(V);\n      \n      highp vec3 R = reflect(l, n);\n\n      highp float diffuseLambert = dot(l,n);\n      \n      // spotlight\n      highp float spotCosCutoff = 0.6;\n      highp float spotExponent = 2.0;\n      highp vec3 spotDirection = vec3(0.5, 0.5, 0.5);\n      highp float spotEffect = dot(normalize(spotDirection), l);\n      \n      if (diffuseLambert > 0.0) {\n        if(spotEffect > spotCosCutoff) {\n          highp float Roughness = 1.0;\n          highp float AmbientIntensity = 0.3;\n          highp vec3 DiffuseLightIntensity = vec3(0.9, 0.9, 0.9);\n          highp float SpecularIntensity = 0.5;\n          highp float shininess = 32.0;\n\n          highp float specular = pow(max(0.0,dot(R,v)), shininess);\n\n          highp vec3 AmbientColour = vec3(0.1, 0.1, 0.1) * attenuation;\n          highp vec3 DiffuseMaterialColour = vColor.xyz * attenuation;\n          highp vec3 SpecularColour = vec3(1.0, 1.0, 1.0) * attenuation;\n    \n          gl_FragColor = vec4(AmbientColour*AmbientIntensity + \n            diffuseLambert * DiffuseMaterialColour*DiffuseLightIntensity +\n            SpecularColour * specular*SpecularIntensity, 1.0);\n        } else {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n      } else {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      }\n    } \n  `;\n}\n\nfunction fogVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform highp mat4 uPMatrix;    \n    uniform highp mat4 uMVMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    varying highp float fogZ;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vColor = aVertexColor;\n      vPosition = aVertexPosition;\n      N = aVertexNormal;\n      fogZ = length(gl_Position.xyz);\n    }\n  `;\n}\n\nfunction fogFragmentShaderSource() {\n  return ` \n    uniform highp mat4 uPMatrix;\n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n\n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    varying highp float fogZ;\n\n    void main(void) {\n      highp vec3 pointLightPosition = vec3(5.0, 1.0, 5.0);\n\n      highp vec3 pointLightDirection = vec3(pointLightPosition.xyz - vPosition.xyz);\n      highp float d = length(pointLightDirection);\n      highp float attenuation = 68.0/(.31 + .01*d+.22*d*d);\n      \n      highp mat4 mvp = uPMatrix * uMVMatrix;\n\n      highp vec3 L = vec3(mvp * vec4(pointLightDirection, 1.0));\n      highp vec3 V = -vec3(mvp * vec4(vPosition,1.0));\n\n      highp vec3 l = normalize(L);\n      highp vec3 n = normalize(uNormalMatrix * N);\n      highp vec3 v = normalize(V);\n      \n      highp vec3 R = reflect(l, n);\n\n      highp float diffuseLambert = dot(l,n);\n      highp float Roughness = 1.0;\n      highp float AmbientIntensity = 0.75;\n      highp vec3 DiffuseLightIntensity = vec3(0.9, 0.9, 0.9);\n      highp float SpecularIntensity = 0.8;\n      highp float shininess = 128.0;\n\n      highp float specular = pow(max(0.0,dot(R,v)), shininess);\n\n      highp vec3 AmbientColour = vec3(0.1, 0.1, 0.1) * attenuation;\n      highp vec3 DiffuseMaterialColour = vColor.xyz * attenuation;\n      highp vec3 SpecularColour = vec3(1.0, 1.0, 1.0) * attenuation;\n      \n      // calculate fog\n      highp float fogDensity = 0.25;\n      highp vec4 fogColor = vec4(0.1, 0.2, 0.1, 0.6);\n      \n      highp float fogFactor = exp(-fogDensity * fogDensity * fogZ * fogZ);\n      fogFactor = clamp(fogFactor, 0.0, 1.0);\n    \n      highp vec4 materialColor = vec4(AmbientColour*AmbientIntensity + \n        diffuseLambert * DiffuseMaterialColour*DiffuseLightIntensity +\n        SpecularColour * specular*SpecularIntensity, 1.0);\n      \n      gl_FragColor = mix(fogColor, materialColor, fogFactor);\n    }\n  `;\n}\n\nfunction fogSpotlightVertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexColor;\n    attribute vec3 aVertexNormal;\n\n    uniform highp mat4 uPMatrix;    \n    uniform highp mat4 uMVMatrix;\n    \n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    varying highp float fogZ;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      \n      vColor = aVertexColor;\n      vPosition = aVertexPosition;\n      N = aVertexNormal;\n      fogZ = length(gl_Position.xyz);\n    }\n  `;\n}\n\nfunction fogSpotlightFragmentShaderSource() {\n  return ` \n    uniform highp mat4 uPMatrix;\n    uniform highp mat4 uMVMatrix;\n    uniform highp mat3 uNormalMatrix;\n\n    varying highp vec3 vColor;\n    varying highp vec3 vPosition;\n    varying highp vec3 N;\n    varying highp float fogZ;\n\n    void main(void) {\n      highp vec3 pointLightPosition = vec3(5.0, 1.0, 5.0);\n\n      highp vec3 pointLightDirection = vec3(pointLightPosition.xyz - vPosition.xyz);\n      highp float d = length(pointLightDirection);\n      highp float attenuation = 1.0/(.01 + .01*d + .02*d*d);\n      \n      highp mat4 mvp = uPMatrix * uMVMatrix;\n\n      highp vec3 L = vec3(mvp * vec4(pointLightDirection, 1.0));\n      highp vec3 V = -vec3(mvp * vec4(vPosition,1.0));\n\n      highp vec3 l = normalize(L);\n      highp vec3 n = normalize(uNormalMatrix * N);\n      highp vec3 v = normalize(V);\n      \n      highp vec3 R = reflect(l, n);\n\n      highp float diffuseLambert = dot(l,n);\n      \n      // spotlight\n      highp float spotCosCutoff = 0.6;\n      highp float spotExponent = 2.0;\n      highp vec3 spotDirection = vec3(0.5, 0.5, 0.5);\n      highp float spotEffect = dot(normalize(spotDirection), l);\n      \n      // calculate fog\n      highp float fogDensity = 0.075;\n      highp vec4 fogColor = vec4(0.1, 0.2, 0.1, 0.6);\n      \n      highp float fogFactor = exp(-fogDensity * fogDensity * fogZ * fogZ);\n      fogFactor = clamp(fogFactor, 0.0, 1.0);\n      \n      highp vec4 materialColor = vec4(0.0, 0.0, 0.0, 1.0);\n      \n      if (diffuseLambert > 0.0) {\n        if(spotEffect > spotCosCutoff) {\n          highp float Roughness = 1.0;\n          highp float AmbientIntensity = 0.3;\n          highp vec3 DiffuseLightIntensity = vec3(0.9, 0.9, 0.9);\n          highp float SpecularIntensity = 0.5;\n          highp float shininess = 32.0;\n\n          highp float specular = pow( max(0.0,dot(R,v)), shininess);\n\n          highp vec3 AmbientColour = vec3(0.1, 0.1, 0.1) * attenuation;\n          highp vec3 DiffuseMaterialColour = vColor.xyz * attenuation;\n          highp vec3 SpecularColour = vec3(1.0, 1.0, 1.0) * attenuation;\n    \n          materialColor = vec4(AmbientColour*AmbientIntensity + \n            diffuseLambert * DiffuseMaterialColour*DiffuseLightIntensity +\n            SpecularColour * specular*SpecularIntensity, 1.0);\n        } \n      }\n      \n      gl_FragColor = mix(fogColor, materialColor, fogFactor); \n    } \n  `;\n}\n\n"],"sourceRoot":""}