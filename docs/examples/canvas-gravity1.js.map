{"version":3,"sources":["webpack:///./canvas-gravity1.js","webpack:///../src/pg/utils/math.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_pg_utils_math__WEBPACK_IMPORTED_MODULE_0__","canvas","document","querySelector","ctx","getContext","mouse","x","undefined","y","colorSet","addEventListener","event","init","window","resize","Ball","dx","dy","radius","color","this","prototype","draw","beginPath","arc","Math","PI","fillStyle","fill","update","width","height","let","balls","i","const","Object","innerWidth","innerHeight","length","push","animate","clearRect","fillRect","forEach","circle","requestAnimationFrame","randomInt","min","max","floor","random","rotate","velocity","angle","cos","sin","resolveCollision","particle","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","d"],"mappings":"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","file":"canvas-gravity1.js","sourcesContent":["import {randomInt} from '../src/pg/utils/math';\n\nconst GRAVITY = 1;\nconst FRICTION = 0.79;\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\nconst mouse = {\n  x: undefined,\n  y: undefined\n};\nconst colorSet = [\n  '#8be9fd',\n  '#50fa7b',\n  '#ffb86c',\n  '#ff79c6',\n  '#bd93f9',\n  '#ff5555',\n  '#f1fa8c',\n];\n\ncanvas.addEventListener('mousemove', (event) => {\n  mouse.x = event.x;\n  mouse.y = event.y;\n});\n\ncanvas.addEventListener('click', () => {\n  init();\n});\n\nwindow.addEventListener('resize', () => {\n  resize();\n});\n\nclass Ball {\n  constructor(x, y, dx, dy, radius, color) {\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this.radius = radius;\n    this.color = color;\n  }\n\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n\n  update() {\n    if (this.x + this.radius + this.dx >= canvas.width || this.x - this.radius + this.dx < 0) {\n      this.dx *= -1 * FRICTION;\n    }\n\n    if (this.y + this.radius + this.dy >= canvas.height) {\n      this.dy *= -1 * FRICTION;\n      this.dx *= FRICTION;\n    } else {\n      this.dy += GRAVITY;\n    }\n\n    this.x += this.dx;\n    this.y += this.dy;\n    this.draw();\n  }\n}\n\nlet balls = [];\n\nfunction init() {\n\n  balls = [];\n\n  for (let i = 0; i < 500; i++) {\n    const radius = randomInt(8, 20);\n    const x = randomInt(radius, window.innerWidth - radius);\n    const dx = randomInt(-20, 20);\n    const y = randomInt(radius, window.innerHeight - radius);\n    const dy = randomInt(-2, 2);\n    const color = colorSet[randomInt(0, colorSet.length)];\n\n    balls.push(new Ball(x, y, dx, dy, radius, color));\n  }\n}\n\nfunction resize() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = '#282a36';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  balls.forEach(circle => circle.update());\n  requestAnimationFrame(animate);\n}\n\nresize();\ninit();\nanimate();\n","/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {boolean} success\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return false;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n  return true;\n}\n"],"sourceRoot":""}