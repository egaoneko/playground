{"version":3,"sources":["webpack:///./deckgl-base.js"],"names":["const","container","document","querySelector","ambientLight","deck","AmbientLight","color","intensity","pointLight1","PointLight","position","pointLight2","lightingEffect","LightingEffect","material","ambient","diffuse","shininess","specularColor","colorRange","deckgl","DeckGL","controller","reuseMaps","mapboxApiAccessToken","preventStyleDiffing","mapStyle","initialViewState","longitude","latitude","zoom","minZoom","maxZoom","pitch","bearing","d3","csv","then","data","props","hexagonLayer","HexagonLayer","id","coverage","elevationRange","elevationScale","length","extruded","getPosition","d","radius","upperPercentile","transitions","setProps","layers","effects","renderLayer","map","Number","lng","lat"],"mappings":"0EAAAA,IAEMC,EAAYC,SAASC,cAAc,QAEnCC,EAAe,IAAIC,KAAKC,cAC5BC,OAAQ,IAAK,IAAK,KAClBC,UAAW,IAGPC,EAAc,IAAIJ,KAAKK,YAC3BH,OAAQ,IAAK,IAAK,KAClBC,UAAW,GACXG,WAAY,QAAU,UAAW,OAG7BC,EAAc,IAAIP,KAAKK,YAC3BH,OAAQ,IAAK,IAAK,KAClBC,UAAW,GACXG,WAAY,SAAU,UAAW,OAG7BE,EAAiB,IAAIR,KAAKS,6BAC9BV,cACAK,cACAG,IAGIG,GACJC,QAAS,IACTC,QAAS,GACTC,UAAW,GACXC,eAAgB,GAAI,GAAI,KAapBC,IACH,EAAG,IAAK,MACR,GAAI,IAAK,MACT,IAAK,IAAK,MACV,IAAK,IAAK,MACV,IAAK,IAAK,KACV,IAAK,GAAI,KAGNC,EAAS,IAAIhB,KAAKiB,QACtBrB,UAAWA,EACXsB,YAAY,EACZC,WAAW,EACXC,qBAxDA,6FAyDAC,qBAAqB,EACrBC,SAAU,iCACVC,kBAzBAC,WAAY,mBACZC,SAAU,mBACVC,KAAM,IACNC,QAAS,EACTC,QAAS,GACTC,MAAO,KACPC,SAAU,sBAiDZC,GAAGC,IACD,0GACAC,KAAI,SAACC,IA7BP,SAAqBC,GACX,IAAAD,EAAAC,EAAAD,+BAAe,4CAAwB,qCAAgB,GAE/DvC,IAAMyC,EAAe,IAAIpC,KAAKqC,cAC5BC,GAAI,qBACJvB,WACAwB,OACAL,EACAM,gBAAiB,EAAG,KACpBC,eAAgBP,GAAQA,EAAKQ,OAAS,GAAK,EAC3CC,UAAU,EACVC,YAAW,SAAEC,GAAE,OAAGA,UAClBC,kBACAC,WACArC,EAEAsC,aACEP,eAAgB,OAIpBzB,EAAOiC,UACLC,QAASd,GACTe,SAAU3C,KAQZ4C,OADAlB,EAAOA,EAAKmB,IAAG,SAACR,GAAE,OAAIS,OAAOT,EAAEU,KAAMD,OAAOT,EAAEW","file":"deckgl-base.js","sourcesContent":["const accessToken =\n  \"pk.eyJ1IjoiZWdhb25la28iLCJhIjoiY2pkYnJtdWg4N3Y0ejMzbzV2NHkzanJodCJ9.509Ns7trg6hi_lZKGyWzew\";\nconst container = document.querySelector(\"#map\");\n\nconst ambientLight = new deck.AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight1 = new deck.PointLight({\n  color: [255, 255, 255],\n  intensity: 0.8,\n  position: [-0.144528, 49.739968, 80000]\n});\n\nconst pointLight2 = new deck.PointLight({\n  color: [255, 255, 255],\n  intensity: 0.8,\n  position: [-3.807751, 54.104682, 8000]\n});\n\nconst lightingEffect = new deck.LightingEffect({\n  ambientLight,\n  pointLight1,\n  pointLight2\n});\n\nconst material = {\n  ambient: 0.64,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [51, 51, 51]\n};\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -1.4157267858730052,\n  latitude: 52.232395363869415,\n  zoom: 6.6,\n  minZoom: 5,\n  maxZoom: 15,\n  pitch: 40.5,\n  bearing: -27.396674584323023\n};\n\nconst colorRange = [\n  [1, 152, 189],\n  [73, 227, 206],\n  [216, 254, 181],\n  [254, 237, 177],\n  [254, 173, 84],\n  [209, 55, 78]\n];\n\nconst deckgl = new deck.DeckGL({\n  container: container,\n  controller: true,\n  reuseMaps: true,\n  mapboxApiAccessToken: accessToken,\n  preventStyleDiffing: true,\n  mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n  initialViewState: INITIAL_VIEW_STATE\n});\n\nfunction renderLayer(props) {\n  const { data, radius = 1000, upperPercentile = 100, coverage = 1 } = props;\n\n  const hexagonLayer = new deck.HexagonLayer({\n    id: \"heatmap\",\n    colorRange,\n    coverage,\n    data,\n    elevationRange: [0, 3000],\n    elevationScale: data && data.length ? 50 : 0,\n    extruded: true,\n    getPosition: d => d,\n    radius,\n    upperPercentile,\n    material,\n\n    transitions: {\n      elevationScale: 3000\n    }\n  });\n\n  deckgl.setProps({\n    layers: [hexagonLayer],\n    effects: [lightingEffect]\n  });\n}\n\nd3.csv(\n  'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'\n).then(data => {\n  data = data.map(d => [Number(d.lng), Number(d.lat)]);\n  renderLayer({\n    data\n  });\n});"],"sourceRoot":""}