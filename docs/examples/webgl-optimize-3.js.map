{"version":3,"sources":["webpack:///./webgl-optimize-3.js"],"names":["let","gl","canvas","container","glProgram","fragmentShader","vertexShader","vertexPositionAttribute","vertexNormalAttribute","vertexTexCoordAttribute","trianglesInterleavedBuffers","vertexIndexBuffers","spherePositions","texture","textureImage","textureFilename","textureAtlasAreas","pMatrix","mat4","create","mvMatrix","normalMatrix","mat3","num_spheres","paused","SpherePosition","this","x_offset_orig","Math","random","y_offset_orig","z_offset_orig","x_offset","y_offset","z_offset","x_angle","y_angle","z_angle","angle","radius","i","push","makeShader","source","type","const","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","setMvMatrix","sp","identity","translate","rotate","invertedMatrix","fromMat4","invert","transpose","cos","sin","setMatrixUniforms","uniformMatrix4fv","mvMatrixUniform","uniformMatrix3fv","normalMatrixUniform","window","addEventListener","document","querySelector","width","clientWidth","height","clientHeight","getContext","e","console","error","vsSource","fsSource","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","initShaders","active_num","tex_start_x","tex_start_y","tex_scale_x","tex_scale_y","interleavedData","indexData","latNumber","theta","PI","sinTheta","cosTheta","longNumber","phi","sinPhi","cosPhi","x","y","z","u","v","first","second","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","length","ELEMENT_ARRAY_BUFFER","Uint16Array","STREAM_DRAW","setupSphereData","pMatrixUniform","getUniformLocation","samplerUniform","Image","onload","activeTexture","TEXTURE0","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","generateMipmap","isTexture","src","viewport","perspective","getAttribLocation","enableVertexAttribArray","animLoop","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","drawElements","TRIANGLES","UNSIGNED_SHORT","drawScene","requestAnimationFrame","evt","keyCode"],"mappings":"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","file":"webgl-optimize-3.js","sourcesContent":["let gl = null;\nlet canvas = null;\nlet container = null;\nlet glProgram = null;\nlet fragmentShader = null;\nlet vertexShader = null;\n\nlet vertexPositionAttribute = null;\nlet vertexNormalAttribute = null;\nlet vertexTexCoordAttribute = null;\nconst trianglesInterleavedBuffers = [];\nconst vertexIndexBuffers = [];\n\nconst spherePositions = [];\nlet texture = null;\nlet textureImage = null;\nlet textureFilename = \"texture_atlas.jpg\";\n// x_offset, y_offset, x_scale, y_scale\nconst textureAtlasAreas = [\n  [0.0, 0.0, 0.5, 0.5], //moon\n  [0.5, 0.0, 0.5, 0.5], //sun\n  [0.0, 0.5, 0.25, 0.25], //saturn\n  [0.0, 0.75, 0.25, 0.25], //jupiter\n  [0.5, 0.5, 0.25, 0.25], //earth\n  [0.5, 0.75, 0.25, 0.25] //mars\n];\nconst texture_directory = 'data/img/';\n\ntextureFilename = texture_directory + textureFilename;\n\nlet pMatrix = mat4.create();\nlet mvMatrix = mat4.create();\nlet normalMatrix = mat3.create();\n\nconst num_spheres = 2000;\nlet paused = false;\n\nclass SpherePosition {\n  constructor() {\n    this.x_offset_orig = 10.0 - Math.random() * 20.0;\n    this.y_offset_orig = 10.0 - Math.random() * 20.0;\n    this.z_offset_orig = -25.0 + Math.random() * 12.0;\n\n    this.x_offset = this.x_offset_orig;\n    this.y_offset = this.y_offset_orig;\n    this.z_offset = this.z_offset_orig;\n\n    this.x_angle = Math.random() * 360;\n    this.y_angle = Math.random() * 360;\n    this.z_angle = Math.random() * 360;\n    this.angle = 0.005;\n    this.radius = 0.1 + Math.random() * .2;\n  }\n}\n\nfor (let i = 0; i < num_spheres; ++i) {\n  spherePositions.push(new SpherePosition());\n}\n\nwindow.addEventListener('load', initWebGL);\ndocument.addEventListener('keyup', (evt) => {\n  switch (evt.keyCode) {\n    case 80: // 'p'\n      paused = !paused;\n      break;\n  }\n});\n\nfunction initWebGL() {\n  canvas = document.querySelector('#canvas');\n  container = document.querySelector('#container');\n  canvas.width = container.clientWidth;\n  canvas.height = container.clientHeight;\n\n  try {\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (gl) {\n    initShaders();\n    setupSphereData();\n\n    getMatrixUniforms();\n    loadTexture();\n\n    gl.viewport(0, 0, canvas.width, canvas.height);\n    mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);\n    gl.uniformMatrix4fv(glProgram.pMatrixUniform, false, pMatrix);\n    vertexPositionAttribute = gl.getAttribLocation(glProgram, 'aVertexPosition');\n    vertexNormalAttribute = gl.getAttribLocation(glProgram, 'aVertexNormal');\n    vertexTexCoordAttribute = gl.getAttribLocation(glProgram, 'aVertexTexCoord');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    gl.enableVertexAttribArray(vertexNormalAttribute);\n    gl.enableVertexAttribArray(vertexTexCoordAttribute);\n\n\n    (function animLoop() {\n\n      if (!paused) {\n        setupWebGL();\n        drawScene();\n      }\n\n      requestAnimationFrame(animLoop);\n    })();\n  }\n}\n\nfunction setupWebGL() {\n  // set the clear color to a shade of green\n  gl.clearColor(0.1, 0.5, 0.1, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n}\n\nfunction initShaders() {\n  // get shader source\n  const vsSource = vertexShaderSource();\n  const fsSource = fragmentShaderSource();\n\n  // compile shaders\n  vertexShader = makeShader(vsSource, gl.VERTEX_SHADER);\n  fragmentShader = makeShader(fsSource, gl.FRAGMENT_SHADER);\n\n  // create program\n  glProgram = gl.createProgram();\n\n  // attach and link shaders to the program\n  gl.attachShader(glProgram, vertexShader);\n  gl.attachShader(glProgram, fragmentShader);\n  gl.linkProgram(glProgram);\n\n  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program.');\n  }\n\n  // use program\n  gl.useProgram(glProgram);\n}\n\nfunction makeShader(source, type) {\n  // compile the shader\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(`Error compiling shader: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\nfunction vertexShaderSource() {\n  return `\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexNormal;\n    attribute vec2 aVertexTexCoord;\n    \n    uniform mat3 uNormalMatrix;\n    uniform mat4 uMVMatrix;\n    uniform mat4 uPMatrix;\n    \n    varying highp float vLight;\n    varying highp vec2 vTextureCoord;\n    \n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      vTextureCoord = aVertexTexCoord;\n      \n      vec3 pointLightPosition = vec3(1.0,2.0,-1.0);\n      vec3 pointLightDirection = normalize(vec3(pointLightPosition.xyz - aVertexPosition.xyz));\n       \n      vec3 L = vec3(uPMatrix * uMVMatrix * vec4(pointLightDirection, 1.0));\n      vec3 N = uNormalMatrix * aVertexNormal;\n      float lambert = max(dot(normalize(N), normalize(L)), 0.0);\n      vLight = 0.1 + lambert;\n    }\n  `;\n}\n\nfunction fragmentShaderSource() {\n  return `\n    varying highp float vLight;\n    varying highp vec2 vTextureCoord;\n    \n    uniform sampler2D uSampler;\n    \n    void main(void) {\n      highp vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.st));\n      gl_FragColor = vec4(textureColor.xyz * vLight, textureColor.a);\n    }\n  `;\n}\n\nfunction setMvMatrix(sp) {\n  mat4.identity(mvMatrix);\n  mat4.identity(normalMatrix);\n  mat4.translate(mvMatrix, mvMatrix, [sp.x_offset, sp.y_offset, sp.z_offset]);\n  mat4.rotate(mvMatrix, mvMatrix, sp.angle, [sp.x_angle, sp.y_angle, sp.z_angle]);\n\n  const invertedMatrix = mat3.create();\n  mat3.fromMat4(invertedMatrix, mvMatrix);\n  mat3.invert(normalMatrix, invertedMatrix);\n  mat3.transpose(normalMatrix, normalMatrix);\n\n  sp.x_angle += Math.random();\n  sp.y_angle += Math.random();\n  sp.z_angle += Math.random();\n  sp.x_offset = (Math.cos(sp.angle) * sp.x_offset_orig);\n  sp.y_offset = (Math.sin(sp.angle) * sp.y_offset_orig);\n  sp.z_offset = -25.0 + 12.0 * Math.sin(sp.angle);\n  sp.angle += 0.005;\n}\n\nfunction drawScene() {\n  for (let i = 0; i < num_spheres; ++i) {\n    setMvMatrix(spherePositions[i]);\n    setMatrixUniforms();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesInterleavedBuffers[i]);\n    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false,\n      8 * Float32Array.BYTES_PER_ELEMENT, 0);\n    gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false,\n      8 * Float32Array.BYTES_PER_ELEMENT,\n      3 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(vertexTexCoordAttribute, 2, gl.FLOAT, false,\n      8 * Float32Array.BYTES_PER_ELEMENT,\n      6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.drawElements(gl.TRIANGLES, vertexIndexBuffers[i].numItems, gl.UNSIGNED_SHORT, 0);\n  }\n}\n\n//modified from http://learningwebgl.com/cookbook/index.php/How_to_draw_a_sphere\nfunction setupSphereData() {\n  for (let i = 0; i < num_spheres; ++i) {\n    const active_num = i % 6;\n    const tex_start_x = textureAtlasAreas[active_num][0];\n    const tex_start_y = textureAtlasAreas[active_num][1];\n    const tex_scale_x = textureAtlasAreas[active_num][2];\n    const tex_scale_y = textureAtlasAreas[active_num][3];\n\n    const latitudeBands = 30;\n    const longitudeBands = 30;\n    const radius = spherePositions[i].radius;\n\n    const interleavedData = [];\n    const indexData = [];\n\n    for (let latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n      const theta = latNumber * Math.PI / latitudeBands;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      for (let longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n        const phi = longNumber * 2 * Math.PI / longitudeBands;\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n\n        const x = cosPhi * sinTheta;\n        const y = cosTheta;\n        const z = sinPhi * sinTheta;\n        const u = 1 - (longNumber / longitudeBands);\n        const v = latNumber / latitudeBands;\n        const first = (latNumber * (longitudeBands + 1)) + longNumber;\n        const second = first + longitudeBands + 1;\n\n        //position\n        interleavedData.push(radius * x);\n        interleavedData.push(radius * y);\n        interleavedData.push(radius * z);\n\n        //normal\n        interleavedData.push(x);\n        interleavedData.push(y);\n        interleavedData.push(z);\n\n        //texture coordinates\n        interleavedData.push(u * tex_scale_x + tex_start_x);\n        interleavedData.push(v * tex_scale_y + tex_start_y);\n\n        //indices\n        if ((latNumber < latitudeBands) && (longNumber < longitudeBands)) {\n          indexData.push(first);\n          indexData.push(second);\n          indexData.push(first + 1);\n\n          indexData.push(second);\n          indexData.push(second + 1);\n          indexData.push(first + 1);\n        }\n      }\n    }\n\n    trianglesInterleavedBuffers[i] = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, trianglesInterleavedBuffers[i]);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(interleavedData), gl.STATIC_DRAW);\n    trianglesInterleavedBuffers[i].itemSize = 8;\n    trianglesInterleavedBuffers[i].numItems = interleavedData.length / 8;\n\n    vertexIndexBuffers[i] = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffers[i]);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STREAM_DRAW);\n    vertexIndexBuffers[i].itemSize = 3;\n    vertexIndexBuffers[i].numItems = indexData.length;\n  }\n}\n\nfunction getMatrixUniforms() {\n  glProgram.pMatrixUniform = gl.getUniformLocation(glProgram, 'uPMatrix');\n  glProgram.mvMatrixUniform = gl.getUniformLocation(glProgram, 'uMVMatrix');\n  glProgram.normalMatrixUniform = gl.getUniformLocation(glProgram, 'uNormalMatrix');\n  glProgram.samplerUniform = gl.getUniformLocation(glProgram, 'uSampler');\n}\n\nfunction setMatrixUniforms() {\n  gl.uniformMatrix4fv(glProgram.mvMatrixUniform, false, mvMatrix);\n  gl.uniformMatrix3fv(glProgram.normalMatrixUniform, false, normalMatrix);\n}\n\nfunction loadTexture() {\n  textureImage = new Image();\n  textureImage.onload = function () {\n    setupTexture();\n  };\n  textureImage.src = textureFilename;\n}\n\nfunction setupTexture() {\n  gl.activeTexture(gl.TEXTURE0);\n  texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  if (!gl.isTexture(texture)) {\n    console.error(\"Error: Texture is invalid\");\n  }\n}\n"],"sourceRoot":""}