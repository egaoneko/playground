{"version":3,"file":"math.js","sources":["../../../src/pg/utils/math.js"],"sourcesContent":["/**\n * @module pg/utils/math\n */\n\n/**\n * Gets a random integer\n *\n * @param {number} min minimum number.\n * @param {number} max maximum number.\n * @return {number} The random integer number.\n * @api\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Gets convex 2d numbers\n * @param {number} step step.\n * @return {array} The convex 2d numbers.\n * @api\n */\nexport function convex2d(step) {\n  const convex = [];\n\n  for (let i = 0; i < step; i++) {\n    const x = i / step;\n    convex.push([x, 1 - i / step]);\n  }\n  return convex;\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} velocity The velocity of an individual particle\n * @param {number} angle The angle of collision between two objects in radians\n * @return {Object} The altered x and y velocities after the coordinate system has been rotated\n */\nexport function rotate(velocity, angle) {\n  return {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\n  };\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * {@link https://gist.github.com/christopher4lis/f9ccb589ee8ecf751481f05a8e59b1dc}\n *\n * @param {object} particle A particle object with x and y coordinates, plus velocity\n * @param {object} otherParticle A particle object with x and y coordinates, plus velocity\n * @return {undefined} Does not return a value\n */\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n    return;\n  }\n\n  // Grab angle between the two colliding particles\n  const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\n\n  // Store mass in var for better readability in collision equation\n  const m1 = particle.mass;\n  const m2 = otherParticle.mass;\n\n  // Velocity before equation\n  const u1 = rotate(particle.velocity, angle);\n  const u2 = rotate(otherParticle.velocity, angle);\n\n  // Velocity after 1d collision equation\n  const v1 = {x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), y: u1.y};\n  const v2 = {x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), y: u2.y};\n\n  // Final velocity after rotating axis back to original location\n  const vFinal1 = rotate(v1, -angle);\n  const vFinal2 = rotate(v2, -angle);\n\n  // Swap particle velocities for realistic bounce effect\n  particle.velocity.x = vFinal1.x;\n  particle.velocity.y = vFinal1.y;\n\n  otherParticle.velocity.x = vFinal2.x;\n  otherParticle.velocity.y = vFinal2.y;\n}\n"],"names":["const","let"],"mappings":"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"}